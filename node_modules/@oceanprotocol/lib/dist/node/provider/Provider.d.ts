import Account from '../ocean/Account';
import { Instantiable, InstantiableConfig } from '../Instantiable.abstract';
import { File } from '../ddo/interfaces/File';
import { ComputeJob } from '../ocean/interfaces/ComputeJob';
import { ComputeInput } from '../ocean/interfaces/ComputeInput';
import { Output } from '../ocean/interfaces/ComputeOutput';
import { MetadataAlgorithm } from '../ddo/interfaces/MetadataAlgorithm';
import DID from '../ocean/DID';
export interface ServiceEndpoint {
    serviceName: string;
    method: string;
    urlPath: string;
}
export declare class Provider extends Instantiable {
    nonce: string;
    private baseUrl;
    servicesEndpoints: ServiceEndpoint[];
    computeAddress: string;
    providerAddress: string;
    providerVersion: string;
    static getInstance(config: InstantiableConfig): Promise<Provider>;
    setBaseUrl(url: string): Promise<boolean>;
    get url(): string;
    getServiceEndpoints(): Promise<ServiceEndpoint[]>;
    getEndpointURL(serviceName: string): ServiceEndpoint;
    createSignature(account: Account, agreementId: string): Promise<string>;
    createHashSignature(account: Account, message: string): Promise<string>;
    encrypt(did: string, document: any, account: Account): Promise<string>;
    fileinfo(url: string | DID): Promise<File[]>;
    getNonce(consumerAddress: string): Promise<string>;
    initialize(did: string, serviceIndex: number, serviceType: string, consumerAddress: string): Promise<string>;
    download(did: string, txId: string, tokenAddress: string, serviceType: string, serviceIndex: string, destination: string, account: Account, files: File[], index?: number): Promise<any>;
    computeStart(did: string, consumerAccount: Account, algorithmDid?: string, algorithmMeta?: MetadataAlgorithm, output?: Output, txId?: string, serviceIndex?: string, serviceType?: string, tokenAddress?: string, algorithmTransferTxId?: string, algorithmDataToken?: string, additionalInputs?: ComputeInput[]): Promise<ComputeJob | ComputeJob[]>;
    computeStop(did: string, consumerAccount: Account, jobId: string): Promise<ComputeJob | ComputeJob[]>;
    computeDelete(did: string, consumerAccount: Account, jobId: string): Promise<ComputeJob | ComputeJob[]>;
    computeStatus(did: string, consumerAccount: Account, jobId?: string, txId?: string, sign?: boolean): Promise<ComputeJob | ComputeJob[]>;
    getInitializeEndpoint(): ServiceEndpoint;
    getNonceEndpoint(): ServiceEndpoint;
    getEncryptEndpoint(): ServiceEndpoint;
    getFileinfoEndpoint(): ServiceEndpoint;
    getComputeStartEndpoint(): ServiceEndpoint;
    getComputeStopEndpoint(): ServiceEndpoint;
    getComputeStatusEndpoint(): ServiceEndpoint;
    getComputeDeleteEndpoint(): ServiceEndpoint;
    getDownloadEndpoint(): ServiceEndpoint;
    isValidProvider(url: string): Promise<boolean>;
}
