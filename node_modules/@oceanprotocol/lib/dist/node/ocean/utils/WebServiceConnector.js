"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebServiceConnector = void 0;
var fs_1 = __importDefault(require("fs"));
var save_file_1 = __importDefault(require("save-file"));
var fetch = require('node-fetch');
var WebServiceConnector = (function () {
    function WebServiceConnector(logger) {
        this.logger = logger;
    }
    WebServiceConnector.prototype.post = function (url, payload) {
        if (payload != null) {
            return this.fetch(url, {
                method: 'POST',
                body: payload,
                headers: {
                    'Content-type': 'application/json'
                },
                timeout: 5000
            });
        }
        else {
            return this.fetch(url, {
                method: 'POST',
                timeout: 5000
            });
        }
    };
    WebServiceConnector.prototype.get = function (url) {
        return this.fetch(url, {
            method: 'GET',
            headers: {
                'Content-type': 'application/json'
            },
            timeout: 5000
        });
    };
    WebServiceConnector.prototype.put = function (url, payload) {
        if (payload != null) {
            return this.fetch(url, {
                method: 'PUT',
                body: payload,
                headers: {
                    'Content-type': 'application/json'
                },
                timeout: 5000
            });
        }
        else {
            return this.fetch(url, {
                method: 'PUT',
                headers: {
                    'Content-type': 'application/json'
                },
                timeout: 5000
            });
        }
    };
    WebServiceConnector.prototype.delete = function (url, payload) {
        if (payload != null) {
            return this.fetch(url, {
                method: 'DELETE',
                body: payload,
                headers: {
                    'Content-type': 'application/json'
                },
                timeout: 5000
            });
        }
        else {
            return this.fetch(url, {
                method: 'DELETE',
                headers: {
                    'Content-type': 'application/json'
                },
                timeout: 5000
            });
        }
    };
    WebServiceConnector.prototype.downloadFile = function (url, destination, index) {
        return __awaiter(this, void 0, void 0, function () {
            var response, filename, _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, this.get(url)];
                    case 1:
                        response = _b.sent();
                        if (!response.ok) {
                            throw new Error('Response error.');
                        }
                        try {
                            filename = response.headers
                                .get('content-disposition')
                                .match(/attachment;filename=(.+)/)[1];
                        }
                        catch (_c) {
                            try {
                                filename = url.split('/').pop();
                            }
                            catch (_d) {
                                filename = "file" + index;
                            }
                        }
                        if (!destination) return [3, 3];
                        return [4, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                                var fileStream;
                                return __generator(this, function (_a) {
                                    fs_1.default.mkdirSync(destination, { recursive: true });
                                    fileStream = fs_1.default.createWriteStream("" + destination + filename);
                                    response.body.pipe(fileStream);
                                    response.body.on('error', reject);
                                    fileStream.on('finish', resolve);
                                    return [2];
                                });
                            }); })];
                    case 2:
                        _b.sent();
                        return [2, destination];
                    case 3:
                        _a = save_file_1.default;
                        return [4, response.arrayBuffer()];
                    case 4:
                        _a.apply(void 0, [_b.sent(), filename]);
                        _b.label = 5;
                    case 5: return [2];
                }
            });
        });
    };
    WebServiceConnector.prototype.downloadFileBrowser = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var anchor;
            return __generator(this, function (_a) {
                anchor = document.createElement('a');
                anchor.download = '';
                anchor.href = url;
                anchor.click();
                return [2];
            });
        });
    };
    WebServiceConnector.prototype.fetch = function (url, opts) {
        return __awaiter(this, void 0, void 0, function () {
            var result, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4, fetch(url, opts)];
                    case 1:
                        result = _d.sent();
                        if (!!result.ok) return [3, 3];
                        this.logger.error("Error requesting [" + opts.method + "] " + url);
                        _b = (_a = this.logger).error;
                        _c = "Response message: \n";
                        return [4, result.text()];
                    case 2:
                        _b.apply(_a, [_c + (_d.sent())]);
                        throw result;
                    case 3: return [2, result];
                }
            });
        });
    };
    return WebServiceConnector;
}());
exports.WebServiceConnector = WebServiceConnector;
//# sourceMappingURL=WebServiceConnector.js.map