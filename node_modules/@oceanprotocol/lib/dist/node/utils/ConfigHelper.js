"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigHelper = void 0;
var lib_1 = require("../lib");
var fs_1 = __importDefault(require("fs"));
var os_1 = require("os");
var DefaultContractsAddresses = __importStar(require("@oceanprotocol/contracts/artifacts/address.json"));
var configs = [
    {
        networkId: null,
        network: 'unknown',
        nodeUri: 'http://localhost:8545',
        metadataCacheUri: 'http://127.0.0.1:5000',
        providerUri: 'http://127.0.0.1:8030',
        subgraphUri: null,
        explorerUri: null,
        oceanTokenAddress: null,
        oceanTokenSymbol: 'OCEAN',
        factoryAddress: '0x1234',
        poolFactoryAddress: null,
        fixedRateExchangeAddress: null,
        metadataContractAddress: null,
        startBlock: 0
    },
    {
        networkId: 8996,
        network: 'development',
        nodeUri: 'http://localhost:8545',
        metadataCacheUri: 'http://127.0.0.1:5000',
        providerUri: 'http://127.0.0.1:8030',
        subgraphUri: null,
        explorerUri: null,
        oceanTokenAddress: null,
        oceanTokenSymbol: 'OCEAN',
        factoryAddress: null,
        poolFactoryAddress: null,
        fixedRateExchangeAddress: null,
        metadataContractAddress: null,
        startBlock: 0
    },
    {
        networkId: 3,
        network: 'ropsten',
        nodeUri: 'https://ropsten.infura.io/v3',
        metadataCacheUri: 'https://aquarius.ropsten.oceanprotocol.com',
        providerUri: 'https://provider.ropsten.oceanprotocol.com',
        subgraphUri: 'https://subgraph.ropsten.oceanprotocol.com',
        explorerUri: 'https://ropsten.etherscan.io',
        oceanTokenAddress: null,
        oceanTokenSymbol: 'OCEAN',
        factoryAddress: null,
        poolFactoryAddress: null,
        fixedRateExchangeAddress: null,
        metadataContractAddress: null,
        startBlock: 9227563
    },
    {
        networkId: 4,
        network: 'rinkeby',
        nodeUri: 'https://rinkeby.infura.io/v3',
        metadataCacheUri: 'https://aquarius.rinkeby.oceanprotocol.com',
        providerUri: 'https://provider.rinkeby.oceanprotocol.com',
        subgraphUri: 'https://subgraph.rinkeby.oceanprotocol.com',
        explorerUri: 'https://rinkeby.etherscan.io',
        oceanTokenAddress: null,
        oceanTokenSymbol: 'OCEAN',
        factoryAddress: null,
        poolFactoryAddress: null,
        fixedRateExchangeAddress: null,
        metadataContractAddress: null,
        startBlock: 7294090
    },
    {
        networkId: 1,
        network: 'mainnet',
        nodeUri: 'https://mainnet.infura.io/v3',
        metadataCacheUri: 'https://aquarius.mainnet.oceanprotocol.com',
        providerUri: 'https://provider.mainnet.oceanprotocol.com',
        subgraphUri: 'https://subgraph.mainnet.oceanprotocol.com',
        explorerUri: 'https://etherscan.io',
        oceanTokenAddress: null,
        oceanTokenSymbol: 'OCEAN',
        factoryAddress: null,
        poolFactoryAddress: null,
        fixedRateExchangeAddress: null,
        metadataContractAddress: null,
        startBlock: 11105459
    },
    {
        networkId: 137,
        network: 'polygon',
        nodeUri: 'https://rpc-mainnet.maticvigil.com/',
        metadataCacheUri: 'https://aquarius.polygon.oceanprotocol.com',
        providerUri: 'https://provider.polygon.oceanprotocol.com',
        subgraphUri: 'https://subgraph.polygon.oceanprotocol.com',
        explorerUri: 'https://explorer.matic.network',
        oceanTokenAddress: null,
        oceanTokenSymbol: 'mOCEAN',
        factoryAddress: null,
        poolFactoryAddress: null,
        fixedRateExchangeAddress: null,
        metadataContractAddress: null,
        startBlock: 11005222
    }
];
var ConfigHelper = (function () {
    function ConfigHelper() {
    }
    ConfigHelper.prototype.getAddressesFromEnv = function (network) {
        var configAddresses;
        if (DefaultContractsAddresses[network]) {
            var _a = DefaultContractsAddresses[network], DTFactory = _a.DTFactory, BFactory = _a.BFactory, FixedRateExchange = _a.FixedRateExchange, Metadata = _a.Metadata, Ocean = _a.Ocean;
            configAddresses = __assign({ factoryAddress: DTFactory, poolFactoryAddress: BFactory, fixedRateExchangeAddress: FixedRateExchange, metadataContractAddress: Metadata, oceanTokenAddress: Ocean }, (process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI }));
        }
        if (fs_1.default && process.env.ADDRESS_FILE) {
            try {
                var data = JSON.parse(fs_1.default.readFileSync(process.env.ADDRESS_FILE ||
                    os_1.homedir + "/.ocean/ocean-contracts/artifacts/address.json", 'utf8'));
                var _b = data[network], DTFactory = _b.DTFactory, BFactory = _b.BFactory, FixedRateExchange = _b.FixedRateExchange, Metadata = _b.Metadata, Ocean = _b.Ocean;
                configAddresses = __assign({ factoryAddress: DTFactory, poolFactoryAddress: BFactory, fixedRateExchangeAddress: FixedRateExchange, metadataContractAddress: Metadata, oceanTokenAddress: Ocean }, (process.env.AQUARIUS_URI && { metadataCacheUri: process.env.AQUARIUS_URI }));
            }
            catch (e) {
            }
        }
        return configAddresses;
    };
    ConfigHelper.prototype.getConfig = function (network, infuraProjectId) {
        var filterBy = typeof network === 'string' ? 'network' : 'networkId';
        var config = configs.find(function (c) { return c[filterBy] === network; });
        if (!config) {
            lib_1.Logger.error("No config found for given network '" + network + "'");
            return null;
        }
        var contractAddressesConfig = this.getAddressesFromEnv(config.network);
        config = __assign(__assign({}, config), contractAddressesConfig);
        var nodeUri = infuraProjectId
            ? config.nodeUri + "/" + infuraProjectId
            : config.nodeUri;
        return __assign(__assign({}, config), { nodeUri: nodeUri });
    };
    return ConfigHelper;
}());
exports.ConfigHelper = ConfigHelper;
//# sourceMappingURL=ConfigHelper.js.map