{"remainingRequest":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/components/vx-card/VxCard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/components/vx-card/VxCard.vue","mtime":1617441534121},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Prism from 'vue-prism-component';\nimport _color from '@/assets/utils/color.js';\n\nexport default {\n  name: 'vx-card',\n  props: {\n    title: String,\n    subtitle: String,\n    actionButtons: {\n      type: Boolean,\n      default: false\n    },\n    actionButtonsColor: {\n      type: String,\n      default: 'success'\n    },\n    codeToggler: {\n      type: Boolean,\n      default: false\n    },\n    noShadow: {\n      default: false,\n      type: Boolean\n    },\n    noRadius: {\n      default: false,\n      type: Boolean\n    },\n    cardBorder: {\n      default: false,\n      type: Boolean\n    },\n    codeLanguage: {\n      default: 'markup',\n      type: String\n    },\n    collapseAction: {\n      default: false,\n      type: Boolean\n    },\n    refreshContentAction: {\n      default: false,\n      type: Boolean\n    },\n    removeCardAction: {\n      default: false,\n      type: Boolean\n    },\n    headerBackground: {\n      default: '',\n      type: String\n    },\n    // bodyBackground: {\n    //   default: '',\n    //   type: String\n    // },\n    // headerbackground: {\n    //   default: '',\n    //   type: String\n    // },\n    cardBackground: {\n      default: '',\n      type: String\n    },\n    contentColor: {\n      default: '',\n      type: String\n    },\n    titleColor: {\n      default: '',\n      type: String\n    },\n    subtitleColor: {\n      default: '#b8c2cc',\n      type: String\n    }\n  },\n  data() {\n    return {\n      isContentCollapsed: false,\n      showCode: false,\n      maxHeight: null,\n      cardMaxHeight: null,\n      codeContainerMaxHeight: '0px',\n      tempHidden: false\n    };\n  },\n  computed: {\n    hasAction() {\n      return (\n        this.$slots.actions ||\n        this.actionButtons ||\n        this.collapseAction ||\n        this.refreshContentAction ||\n        this.removeCardAction ||\n        this.codeToggler\n      );\n    },\n    hasHeader() {\n      return this.hasAction || this.title || this.subtitle;\n    },\n    StyleItems() {\n      return { maxHeight: this.maxHeight };\n    },\n    cardStyles() {\n      const obj = { maxHeight: this.cardMaxHeight };\n      if (!_color.isColor(this.cardBackground))\n        obj.background = _color.getColor(this.cardBackground);\n      if (!_color.isColor(this.contentColor))\n        obj.color = _color.getColor(this.contentColor);\n      return obj;\n    },\n    codeContainerStyles() {\n      return { maxHeight: this.codeContainerMaxHeight };\n    },\n    cardClasses() {\n      let str = '';\n\n      // Add bg class\n      if (_color.isColor(this.cardBackground)) {\n        str += ` bg-${this.cardBackground}`;\n      }\n\n      // add content color\n      if (_color.isColor(this.contentColor)) {\n        str += ` text-${this.contentColor}`;\n      }\n\n      return str.trim();\n    },\n    titleStyles() {\n      return {\n        color: _color.getColor(this.titleColor)\n      };\n    },\n    titleClasses() {\n      let str = '';\n\n      // add content color\n      if (_color.isColor(this.titleColor)) {\n        str += ` text-${this.titleColor}`;\n      }\n\n      return str.trim();\n    },\n    subtitleStyles() {\n      const obj = {};\n      if (!_color.isColor(this.subtitleColor))\n        obj.color = _color.getColor(this.subtitleColor);\n\n      return obj;\n    },\n    subtitleClasses() {\n      let str = '';\n\n      // add content color\n      if (_color.isColor(this.subtitleColor)) {\n        str += ` text-${this.subtitleColor}`;\n      }\n\n      return str.trim();\n    }\n  },\n  methods: {\n    toggleContent() {\n      this.$refs.content.style.overflow = 'hidden';\n      const scrollHeight = this.$refs.content.scrollHeight;\n      if (this.maxHeight == '1.5rem') {\n        this.maxHeight = `${scrollHeight}px`;\n        setTimeout(() => {\n          this.maxHeight = 'none';\n          this.$refs.content.style.overflow = null;\n        }, 300);\n      } else {\n        this.maxHeight = `${scrollHeight}px`;\n        setTimeout(() => {\n          this.maxHeight = '1.5rem';\n          this.$refs.content.style.overflow = null;\n        }, 50);\n      }\n      this.isContentCollapsed = !this.isContentCollapsed;\n      this.$emit('toggleCollapse', this.isContentCollapsed);\n    },\n    refreshcard() {\n      this.$vs.loading({\n        container: this.$refs.content,\n        scale: 0.5\n      });\n      this.tempHidden = true;\n      this.$emit('refresh', this);\n    },\n    removeRefreshAnimation(time = 100) {\n      setTimeout(() => {\n        this.$vs.loading.close(this.$refs.content);\n        this.tempHidden = false;\n      }, time);\n    },\n    removeCard() {\n      const scrollHeight = this.$refs.card.scrollHeight;\n      this.cardMaxHeight = `${scrollHeight}px`;\n      this.$el.style.overflow = 'hidden';\n      setTimeout(() => {\n        this.cardMaxHeight = '0px';\n      }, 50);\n      this.$emit('remove');\n    },\n    toggleCode() {\n      this.tempHidden = true;\n      this.showCode = !this.showCode;\n      const scrollHeight = this.$refs.codeContainer.scrollHeight;\n      if (this.codeContainerMaxHeight == '0px') {\n        this.codeContainerMaxHeight = `${scrollHeight}px`;\n        setTimeout(() => {\n          this.codeContainerMaxHeight = 'none';\n          this.tempHidden = false;\n        }, 300);\n      } else {\n        this.codeContainerMaxHeight = `${scrollHeight}px`;\n        setTimeout(() => {\n          this.codeContainerMaxHeight = '0px';\n          this.tempHidden = false;\n        }, 150);\n      }\n    }\n  },\n  components: {\n    Prism\n  }\n};\n",{"version":3,"sources":["VxCard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"VxCard.vue","sourceRoot":"src/components/vx-card","sourcesContent":["<!-- =========================================================================================\n    File Name: VxCard.vue\n    Description: Card Component\n    Component Name: VxCard\n    ----------------------------------------------------------------------------------------\n    Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\n      Author: Pixinvent\n    Author URL: http://www.themeforest.net/user/pixinvent\n========================================================================================== -->\n\n<template>\n  <div\n    class=\"vx-card\"\n    ref=\"card\"\n    :class=\"[\n      { 'overflow-hidden': tempHidden },\n      { 'no-shadow': noShadow },\n      { 'rounded-none': noRadius },\n      { 'card-border': cardBorder },\n      cardClasses\n    ]\"\n    :style=\"cardStyles\"\n    v-on=\"$listeners\"\n  >\n    <div class=\"vx-card__header\" v-if=\"hasHeader\">\n      <!-- card title -->\n      <div class=\"vx-card__title\">\n        <h4 v-if=\"this.$props.title\" :style=\"titleStyles\" :class=\"titleClasses\">\n          {{ title }}\n        </h4>\n        <h6\n          v-if=\"this.$props.subtitle\"\n          :style=\"subtitleStyles\"\n          :class=\"subtitleClasses\"\n        >\n          {{ subtitle }}\n        </h6>\n      </div>\n\n      <!-- card actions -->\n      <div class=\"vx-card__actions\" v-if=\"hasAction\">\n        <slot name=\"actions\">\n          <div\n            class=\"vx-card__action-buttons\"\n            v-if=\"\n              (actionButtons ||\n                collapseAction ||\n                refreshContentAction ||\n                removeCardAction) &&\n                !codeToggler\n            \"\n          >\n            <feather-icon\n              @click=\"toggleContent\"\n              icon=\"ChevronUpIcon\"\n              :class=\"{ rotate180: !isContentCollapsed }\"\n              class=\"ml-4\"\n              v-if=\"actionButtons || collapseAction\"\n            />\n            <feather-icon\n              @click=\"refreshcard\"\n              icon=\"RotateCwIcon\"\n              class=\"ml-4\"\n              v-if=\"actionButtons || refreshContentAction\"\n            />\n            <feather-icon\n              @click=\"removeCard\"\n              icon=\"XIcon\"\n              class=\"ml-4\"\n              v-if=\"actionButtons || removeCardAction\"\n            />\n          </div>\n          <div\n            class=\"vx-card__code-toggler sm:block hidden\"\n            v-if=\"codeToggler && !actionButtons\"\n          >\n            <feather-icon\n              icon=\"CodeIcon\"\n              :class=\"{\n                'border border-solid border-primary border-t-0 border-r-0 border-l-0': showCode\n              }\"\n              @click=\"toggleCode\"\n            ></feather-icon>\n          </div>\n        </slot>\n      </div>\n    </div>\n\n    <div\n      class=\"vx-card__collapsible-content vs-con-loading__container\"\n      ref=\"content\"\n      :class=\"[\n        { collapsed: isContentCollapsed },\n        { 'overflow-hidden': tempHidden }\n      ]\"\n      :style=\"StyleItems\"\n    >\n      <!-- content with no body(no padding) -->\n      <slot name=\"no-body\"></slot>\n\n      <!-- content inside body(with padding) -->\n      <div class=\"vx-card__body\" v-if=\"this.$slots.default\">\n        <slot></slot>\n      </div>\n\n      <!-- content with no body(no padding) -->\n      <slot name=\"no-body-bottom\"></slot>\n\n      <div class=\"vx-card__footer\" v-if=\"this.$slots.footer\">\n        <slot name=\"footer\"></slot>\n      </div>\n    </div>\n\n    <div\n      class=\"vx-card__code-container\"\n      ref=\"codeContainer\"\n      v-show=\"this.$slots.codeContainer\"\n      :style=\"codeContainerStyles\"\n      :class=\"{ collapsed: !showCode }\"\n    >\n      <div class=\"code-content\">\n        <prism :language=\"codeLanguage\" :key=\"$vs.rtl\">\n          <slot name=\"codeContainer\"></slot>\n        </prism>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Prism from 'vue-prism-component';\nimport _color from '@/assets/utils/color.js';\n\nexport default {\n  name: 'vx-card',\n  props: {\n    title: String,\n    subtitle: String,\n    actionButtons: {\n      type: Boolean,\n      default: false\n    },\n    actionButtonsColor: {\n      type: String,\n      default: 'success'\n    },\n    codeToggler: {\n      type: Boolean,\n      default: false\n    },\n    noShadow: {\n      default: false,\n      type: Boolean\n    },\n    noRadius: {\n      default: false,\n      type: Boolean\n    },\n    cardBorder: {\n      default: false,\n      type: Boolean\n    },\n    codeLanguage: {\n      default: 'markup',\n      type: String\n    },\n    collapseAction: {\n      default: false,\n      type: Boolean\n    },\n    refreshContentAction: {\n      default: false,\n      type: Boolean\n    },\n    removeCardAction: {\n      default: false,\n      type: Boolean\n    },\n    headerBackground: {\n      default: '',\n      type: String\n    },\n    // bodyBackground: {\n    //   default: '',\n    //   type: String\n    // },\n    // headerbackground: {\n    //   default: '',\n    //   type: String\n    // },\n    cardBackground: {\n      default: '',\n      type: String\n    },\n    contentColor: {\n      default: '',\n      type: String\n    },\n    titleColor: {\n      default: '',\n      type: String\n    },\n    subtitleColor: {\n      default: '#b8c2cc',\n      type: String\n    }\n  },\n  data() {\n    return {\n      isContentCollapsed: false,\n      showCode: false,\n      maxHeight: null,\n      cardMaxHeight: null,\n      codeContainerMaxHeight: '0px',\n      tempHidden: false\n    };\n  },\n  computed: {\n    hasAction() {\n      return (\n        this.$slots.actions ||\n        this.actionButtons ||\n        this.collapseAction ||\n        this.refreshContentAction ||\n        this.removeCardAction ||\n        this.codeToggler\n      );\n    },\n    hasHeader() {\n      return this.hasAction || this.title || this.subtitle;\n    },\n    StyleItems() {\n      return { maxHeight: this.maxHeight };\n    },\n    cardStyles() {\n      const obj = { maxHeight: this.cardMaxHeight };\n      if (!_color.isColor(this.cardBackground))\n        obj.background = _color.getColor(this.cardBackground);\n      if (!_color.isColor(this.contentColor))\n        obj.color = _color.getColor(this.contentColor);\n      return obj;\n    },\n    codeContainerStyles() {\n      return { maxHeight: this.codeContainerMaxHeight };\n    },\n    cardClasses() {\n      let str = '';\n\n      // Add bg class\n      if (_color.isColor(this.cardBackground)) {\n        str += ` bg-${this.cardBackground}`;\n      }\n\n      // add content color\n      if (_color.isColor(this.contentColor)) {\n        str += ` text-${this.contentColor}`;\n      }\n\n      return str.trim();\n    },\n    titleStyles() {\n      return {\n        color: _color.getColor(this.titleColor)\n      };\n    },\n    titleClasses() {\n      let str = '';\n\n      // add content color\n      if (_color.isColor(this.titleColor)) {\n        str += ` text-${this.titleColor}`;\n      }\n\n      return str.trim();\n    },\n    subtitleStyles() {\n      const obj = {};\n      if (!_color.isColor(this.subtitleColor))\n        obj.color = _color.getColor(this.subtitleColor);\n\n      return obj;\n    },\n    subtitleClasses() {\n      let str = '';\n\n      // add content color\n      if (_color.isColor(this.subtitleColor)) {\n        str += ` text-${this.subtitleColor}`;\n      }\n\n      return str.trim();\n    }\n  },\n  methods: {\n    toggleContent() {\n      this.$refs.content.style.overflow = 'hidden';\n      const scrollHeight = this.$refs.content.scrollHeight;\n      if (this.maxHeight == '1.5rem') {\n        this.maxHeight = `${scrollHeight}px`;\n        setTimeout(() => {\n          this.maxHeight = 'none';\n          this.$refs.content.style.overflow = null;\n        }, 300);\n      } else {\n        this.maxHeight = `${scrollHeight}px`;\n        setTimeout(() => {\n          this.maxHeight = '1.5rem';\n          this.$refs.content.style.overflow = null;\n        }, 50);\n      }\n      this.isContentCollapsed = !this.isContentCollapsed;\n      this.$emit('toggleCollapse', this.isContentCollapsed);\n    },\n    refreshcard() {\n      this.$vs.loading({\n        container: this.$refs.content,\n        scale: 0.5\n      });\n      this.tempHidden = true;\n      this.$emit('refresh', this);\n    },\n    removeRefreshAnimation(time = 100) {\n      setTimeout(() => {\n        this.$vs.loading.close(this.$refs.content);\n        this.tempHidden = false;\n      }, time);\n    },\n    removeCard() {\n      const scrollHeight = this.$refs.card.scrollHeight;\n      this.cardMaxHeight = `${scrollHeight}px`;\n      this.$el.style.overflow = 'hidden';\n      setTimeout(() => {\n        this.cardMaxHeight = '0px';\n      }, 50);\n      this.$emit('remove');\n    },\n    toggleCode() {\n      this.tempHidden = true;\n      this.showCode = !this.showCode;\n      const scrollHeight = this.$refs.codeContainer.scrollHeight;\n      if (this.codeContainerMaxHeight == '0px') {\n        this.codeContainerMaxHeight = `${scrollHeight}px`;\n        setTimeout(() => {\n          this.codeContainerMaxHeight = 'none';\n          this.tempHidden = false;\n        }, 300);\n      } else {\n        this.codeContainerMaxHeight = `${scrollHeight}px`;\n        setTimeout(() => {\n          this.codeContainerMaxHeight = '0px';\n          this.tempHidden = false;\n        }, 150);\n      }\n    }\n  },\n  components: {\n    Prism\n  }\n};\n</script>\n\n<style lang=\"scss\">\n@import '@/assets/scss/vuexy/components/vxCard.scss';\n</style>\n"]}]}