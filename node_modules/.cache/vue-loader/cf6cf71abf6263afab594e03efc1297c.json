{"remainingRequest":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/views/pages/EditScript.vue?vue&type=style&index=0&id=51b19a4c&scoped=true&lang=css&","dependencies":[{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/views/pages/EditScript.vue","mtime":1617441641275},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[contentEditable='true']:empty:not(:focus):before {\n  content: attr(data-text);\n}\n::placeholder {\n  color: #626262;\n  opacity: 0.7;\n}\n.title2 {\n  height: 40px !important;\n  border: 0.5px solid lightgray;\n  font-size: 14px;\n  overflow-y: auto;\n  border-radius: 5px;\n  color: #626262;\n  opacity: 1; /* Firefox */\n  text-indent: 0.01%;\n  font-family: Montserrat, Helvetica, Arial, sans-serif;\n  font-weight: 400;\n  font-style: normal;\n  font-variant: normal;\n  text-decoration: none solid rgb(98, 98, 98);\n  text-align: start;\n  line-height: 22.4px;\n  vertical-align: baseline;\n  padding: 9px;\n}\n.description2 {\n  height: 60px !important;\n  border-radius: 5px;\n  border: 0.5px solid lightgray;\n  font-size: 14px;\n  overflow-y: auto;\n  color: #626262;\n  opacity: 1;\n  text-indent: 0.01%;\n  font-family: Montserrat, Helvetica, Arial, sans-serif;\n  font-weight: 400;\n  font-style: normal;\n  font-variant: normal;\n  text-decoration: none solid rgb(98, 98, 98);\n  text-align: start;\n  line-height: 22.4px;\n  vertical-align: baseline;\n  padding: 9px;\n}\n.video-script2 {\n  height: 250px !important;\n  border: 0.5px solid lightgray;\n  font-size: 14px;\n  overflow-y: auto;\n  border-radius: 5px;\n  color: #626262;\n  opacity: 1;\n  text-indent: 0.01%;\n  font-family: Montserrat, Helvetica, Arial, sans-serif;\n  font-weight: 400;\n  font-style: normal;\n  font-variant: normal;\n  text-decoration: none solid rgb(98, 98, 98);\n  text-align: start;\n  line-height: 22.4px;\n  vertical-align: baseline;\n  padding: 9px;\n}\n.video-script.vs-con-textarea >>> .vs-textarea {\n  height: 250px !important;\n}\n\n.items-center {\n  text-align: center;\n  text-align: -moz-center;\n  text-align: -webkit-center;\n}\n\n.items-left {\n  text-align: left;\n  text-align: -moz-left;\n  text-align: -webkit-left;\n}\n\n.items-right {\n  text-align: right;\n  text-align: -moz-right;\n  text-align: -webkit-right;\n}\n\n/*.text-window {\n  height: 33rem;\n  margin-top: calc(100% - 33rem);\n} */\n\n.text-window .vx-card {\n  /*height: 20rem;*/\n  border: 0.5px solid gray;\n}\n\n.text-window .vx-card div {\n  padding: 0.2rem;\n  height: 15rem;\n  overflow-y: auto;\n}\n.text-window .vx-card {\n  border: 1px solid rgba(0, 0, 0, 0.2);\n}\n",{"version":3,"sources":["EditScript.vue"],"names":[],"mappingsggBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EditScript.vue","sourceRoot":"src/views/pages","sourcesContent":["<template>\n  <div>\n    <form v-if=\"currentTabIndex === 0\">\n      <vx-card :title=\"$t('studio.text.t1')\" class=\"text-window\">\n        <div class=\"text-left\">\n          <h6>{{ $t('studio.text.t2') }}</h6>\n          <span class=\"text-danger text-sm\" v-show=\"errors.has('title')\">{{\n            errors.first('title')\n          }}</span>\n          <input\n            type=\"text\"\n            id=\"title\"\n            name=\"title\"\n            size=\"large\"\n            :placeholder=\"$t('studio.text.t2')\"\n            v-model=\"title\"\n            class=\"w-full mt-3 mb-3 title2\"\n            v-validate=\"'required'\"\n            autocomplete=\"off\"\n          />\n          <div class=\"flex items-start -mx-2\">\n            <h6 class=\"px-2\">{{ $t('studio.text.t4') }}</h6>\n            <div class=\"px-2\">\n              <LanguageSelect v-model=\"srcLang\" />\n            </div>\n          </div>\n          <span class=\"text-danger text-sm\" v-show=\"errors.has('script')\">{{\n            errors.first('script')\n          }}</span>\n          <textarea\n            type=\"text\"\n            id=\"videoScript\"\n            name=\"script\"\n            :placeholder=\"$t('studio.text.t5')\"\n            v-model=\"videoScript\"\n            v-validate=\"'required'\"\n            class=\"w-full mt-3 mb-3 video-script2\"\n          >\n          </textarea>\n        </div>\n        <div class=\"items-center\">\n          <div class=\"w-full items-center relative\">\n            <vs-button class=\"bg-cutsom-purple\" @click.prevent=\"handleSubmit\">{{\n              $t('studio.text.t6')\n            }}</vs-button>\n            <div class=\"absolute\" style=\"right: 8px; bottom: 6px\">\n              <vs-dropdown\n                vs-custom-content\n                vs-trigger-click\n                class=\"cursor-pointer\"\n              >\n                <span\n                  class=\"cursor-pointer flex items-center\"\n                  style=\"transform: translate(0px, -2px)\"\n                >\n                  <span class=\"font-bold\">{{\n                    breakTypeOptions[breakType]\n                  }}</span>\n                  <vs-icon icon-pack=\"feather\" icon=\"icon icon-chevron-down\" />\n                </span>\n                <vs-dropdown-menu class=\"w-48 i18n-dropdown vx-navbar-dropdown\">\n                  <vs-dropdown-item @click=\"breakType = 'short'\">\n                    &nbsp;Short Scenes</vs-dropdown-item\n                  >\n                  <vs-dropdown-item @click=\"breakType = 'long'\">\n                    &nbsp;Long Scenes</vs-dropdown-item\n                  >\n                </vs-dropdown-menu>\n              </vs-dropdown>\n            </div>\n          </div>\n        </div>\n      </vx-card>\n      <!--<div style=\"margin-bottom: 150px\"></div>-->\n    </form>\n    <DocumentUpload v-else-if=\"currentTabIndex === 1\" />\n    <ExternalUrl v-else />\n    <vs-popup ref=\"custom_teams_modal\" :active.sync=\"choiceModal\">\n      <div class=\"p-2\">\n        <h2 class=\"font-extrabold mb-4\">Select from following links</h2>\n        <template v-for=\"(link, idx) in queryContent.links\">\n          <vx-card\n            :key=\"idx\"\n            @click=\"onSelectLink(idx)\"\n            class=\"cursor-pointer mt-3\"\n            style=\"background: #f3f4f6\"\n            noShadow\n          >\n            <div class=\"flex items-center -m-2\">\n              <vs-icon icon=\"language\" size=\"24px\" class=\"mr-2\"></vs-icon>\n              <p :title=\"link\" class=\"truncate ellipsis font-medium\">\n                {{ link }}\n              </p>\n            </div></vx-card\n          >\n        </template>\n        <vs-divider>Or</vs-divider>\n        <p class=\"font-semibold\">\n          Copy paste your script into the video script box alongwith a suitable\n          title in the video title\n        </p>\n      </div>\n    </vs-popup>\n  </div>\n</template>\n\n<script>\nimport LanguageSelect from './components/LanguageSelect.vue';\nimport DocumentUpload from './components/DocumentUpload';\nimport ExternalUrl from './components/ExternalUrl';\n\nexport default {\n  components: {\n    LanguageSelect,\n    DocumentUpload,\n    ExternalUrl\n  },\n  data() {\n    return {\n      form: {\n        title: '',\n        description: '',\n        videoScript: ''\n      },\n\n      options: [\n        { value: 'en', label: 'English' },\n        { value: 'ru', label: 'Russian' },\n        { value: 'pt', label: 'Portugese' }\n      ],\n      breakType: 'short',\n      breakTypeOptions: {\n        long: 'Long Scenes',\n        short: 'Short Scenes'\n      },\n      queryContent: {\n        links: []\n      },\n      contentUrl: '',\n      choiceModal: false,\n      task_id: null,\n      requestInterval: Function\n    };\n  },\n  computed: {\n    videoScript: {\n      get() {\n        return this.$store.state.studio.videoScript;\n      },\n      set(value) {\n        this.$store.commit('studio/setScript', value);\n      }\n    },\n    srcLang: {\n      get() {\n        return this.$store.state.studio.video.srcLang;\n      },\n      set(value) {\n        this.$store.commit('studio/SET_VIDEO_ATTR', {\n          key: 'srcLang',\n          value: value\n        });\n      }\n    },\n    title: {\n      get() {\n        return this.$store.state.studio.video.title;\n      },\n      set(value) {\n        this.$store.commit('studio/SET_VIDEO_ATTR', {\n          key: 'title',\n          value: value\n        });\n      }\n    },\n    description: {\n      get() {\n        return this.$store.state.studio.video.description;\n      },\n      set(value) {\n        this.$store.commit('studio/SET_VIDEO_ATTR', {\n          key: 'description',\n          value: value\n        });\n      }\n    },\n    uploadedDocumentIsPPT() {\n      return this.$store.state.studio.video.fromPPT;\n    },\n    currentTabIndex() {\n      return this.$store.state.studio.tabIndex;\n    }\n  },\n  created() {\n    if (\n      !this.$route.params.videoId &&\n      Object.keys(this.$route.query).length === 0 &&\n      this.title === '' &&\n      this.videoScript === ''\n    ) {\n      const storedForm = JSON.parse(localStorage.getItem('form'));\n      if (storedForm) {\n        this.title = storedForm.title;\n        this.videoScript = storedForm.videoScript;\n      }\n    }\n    window.addEventListener('beforeunload', this.saveForm);\n  },\n  mounted() {\n    this.$refs.custom_teams_modal.$el.childNodes[1].childNodes[0].style.display =\n      'none';\n    if (this.$route.query.contentUrl) {\n      const { contentUrl, tempauth, Translate, ApiVersion } = this.$route.query;\n      const downloadUrl = tempauth\n        ? `${contentUrl}&Translate=${Translate}&tempauth=${tempauth}&ApiVersion=${ApiVersion}`\n        : contentUrl;\n      this.handleUrlSubmit(downloadUrl, this.$route.query.ext);\n    }\n    if (this.$route.query.attachments) {\n      const attachmentList = this.$route.query.attachments.split(',');\n      this.queryContent.links.splice(0, 0, ...attachmentList);\n    }\n    if (this.$route.query.html) {\n      // console.log(this.$route.query.html);\n      const parser = new DOMParser();\n      const parsedHtml = parser.parseFromString(\n        this.$route.query.html,\n        'text/html'\n      );\n      // console.log(parsedHtml);\n      const anchorTagArray = parsedHtml.querySelectorAll('a');\n      if (anchorTagArray) {\n        anchorTagArray.forEach(a => {\n          this.queryContent.links.push(a.href);\n        });\n        if (this.queryContent.links.length > 1) {\n          this.choiceModal = true;\n        } else if (this.queryContent.links.length === 1) {\n          this.onSelectLink(0);\n        } else {\n          this.$vs.dialog({\n            type: 'alert',\n            color: 'primary',\n            title: `Text too Long!`,\n            acceptText: 'Okay',\n            text:\n              'The length of text in the message was too long. Kindly copy the text and paste it in the video script box.'\n          });\n        }\n      }\n    } else if (this.$route.query.text) {\n      this.videoScript = this.$route.query.text;\n    }\n    if (Object.keys(this.$route.query).length !== 0) {\n      this.$router.replace({ query: null });\n    }\n  },\n  methods: {\n    saveForm() {\n      const form = {\n        title: this.title,\n        videoScript: this.videoScript\n      };\n      localStorage.setItem('form', JSON.stringify(form));\n    },\n    summarizeScript() {\n      this.$Progress.start();\n      this.$store\n        .dispatch('studio/summarizeScript')\n        .then(res => {\n          console.log('summarized script', res);\n          document.getElementById('video-script').innerText = res;\n          this.$forceUpdate();\n          this.$Progress.finish();\n        })\n        .catch(err => {\n          console.log('error in summarization', err);\n          this.$Progress.fail();\n        });\n    },\n    scriptInput(e) {\n      this.$store.commit('studio/setScript', e.target.innerText);\n    },\n    handleSubmit() {\n      this.$validator.validateAll().then(result => {\n        if (result) {\n          this.createScenes();\n        } else {\n          this.$vs.notify({\n            title: 'Invalid Input',\n            text: this.errors.has('title')\n              ? 'Enter Video title'\n              : 'Enter Video script',\n            color: 'danger'\n          });\n        }\n      });\n    },\n    createScenes() {\n      this.$Progress.start();\n      this.$vs.loading({ color: 'transparent' });\n      this.$store.commit('studio/SET_VIDEO_ATTR', {\n        key: 'scrLang',\n        value: this.srcLang\n      });\n      this.$store\n        .dispatch('studio/sentenceDetection', this.breakType)\n        .then(res => {\n          console.log('sentences', res.data.sentences);\n          console.log('keywords', res.data.keywords);\n          /* this.$store\n            .dispatch('studio/keywordExtraction')\n            .then(resKeywords => {\n              console.log('keywords', resKeywords); */\n          this.$store\n            .dispatch('studio/videoSuggestions')\n            .then(resVideos => {\n              console.log('videos', resVideos);\n              this.$Progress.finish();\n              this.$vs.loading.close();\n              this.$store.commit('studio/resetState');\n              /* this.$store\n                    .dispatch('studio/audioSuggestions')\n                    .then(res => {\n                      this.$Progress.finish();\n                      this.$vs.loading.close();\n                      this.$store.commit('studio/resetState');\n                    })\n                    .catch(err => {\n                      this.$Progress.fail();\n                      this.$vs.loading.close();\n                      console.log(err);\n                      this.$vs.notify({\n                        title: 'Error Occured',\n                        text: 'Audio Suggestions',\n                        color: 'danger'\n                      });\n                    }); */\n            })\n            .catch(err => {\n              console.log(err);\n              this.$Progress.fail();\n              this.$vs.loading.close();\n              this.$vs.notify({\n                title: 'Error Occured',\n                text: 'Video Suggestions',\n                color: 'danger'\n              });\n            });\n        })\n        /* .catch(err => {\n              console.log(err);\n              this.$Progress.fail();\n              this.$vs.loading.close();\n              this.$vs.notify({\n                title: 'Error Occured',\n                text: 'keyword Extraction',\n                color: 'danger'\n              });\n            });\n        }) */\n        .catch(err => {\n          console.log(err);\n          this.$Progress.fail();\n          this.$vs.loading.close();\n          this.$vs.notify({\n            title: 'Error Occured',\n            text: 'Sentence Detection',\n            color: 'danger'\n          });\n        });\n    },\n    handleUrlSubmit(contentUrl, ext) {\n      if (ext === 'mp4') {\n        this.contentUrl = contentUrl;\n        this.$validator.reset();\n        this.$Progress.start();\n        this.$vs.loading({ color: 'transparent' });\n        this.splitIntoChunks();\n      } else {\n        this.fetchContent(contentUrl, ext);\n      }\n    },\n    async splitIntoChunks() {\n      const requestBody = {\n        video_url: this.contentUrl,\n        option: 'small',\n        task_id: this.task_id\n      };\n      // console.log({ requestBody });\n      try {\n        const apiResponse = await this.$store.dispatch(\n          'studio/breakVideoIntoScenes',\n          requestBody\n        );\n        // console.log({ chunksAPIResponse: apiResponse });\n        if (!this.task_id) this.task_id = apiResponse.task_id;\n        if (apiResponse.status) {\n          const scenes = {};\n          const videos = {};\n          const images = {};\n          const keywords = {};\n          apiResponse.data.forEach((chunkUrl, index) => {\n            scenes[index] = '';\n            videos[index] = '';\n            images[index] = '';\n            keywords[index] = [];\n            this.$store.commit('studio/setInitialVideo', {\n              indexs: index,\n              value: chunkUrl\n            });\n            this.$store.commit('studio/setSentences', scenes);\n            this.$store.commit('studio/setVideos', videos);\n            this.$store.commit('studio/setKeywords', keywords);\n            this.$store.commit('studio/setImages', images);\n            this.$Progress.finish();\n            this.$vs.loading.close();\n            setTimeout(() => this.$store.commit('studio/toggleLibrary'), 1000);\n          });\n        } else {\n          this.requestInterval = setTimeout(\n            () => this.splitIntoChunks(),\n            10000\n          );\n        }\n      } catch (err) {\n        console.log({ chunksAPIError: err });\n        this.$vs.notify({\n          title: 'Error',\n          text: 'Fail to split video',\n          color: 'danger'\n        });\n        this.$Progress.fail();\n        this.$vs.loading.close();\n      }\n    },\n    fetchContent(url, ext) {\n      this.$Progress.start();\n      this.$vs.loading({ color: 'transparent' });\n      this.$store\n        .dispatch('studio/extractInfoFromUrl', { url, ext })\n        .then(data => {\n          if (data.slides) {\n            const scenes = {};\n            const videos = {};\n            const images = {};\n            const keywords = {};\n            this.$store.commit('studio/SET_VIDEO_ATTR', {\n              key: 'fromPPT',\n              value: true\n            });\n            let script = '';\n            Object.values(data.slides).forEach(({ img_path, text }, index) => {\n              scenes[index] = '*No notes found in this slide*';\n              videos[index] = '';\n              images[index] = { 0: [img_path, 'slide', 'slide'] };\n              keywords[index] = [];\n              script += text;\n              this.$store.commit('studio/setInitialVideo', {\n                indexs: index,\n                value: img_path\n              });\n            });\n            this.$store.commit('studio/setSentences', scenes);\n            this.$store.commit('studio/setVideos', videos);\n            this.$store.commit('studio/setKeywords', keywords);\n            this.$store.commit('studio/setImages', images);\n            this.$store.commit('studio/setScript', script);\n          }\n          if (data.title) {\n            this.$store.commit('studio/SET_VIDEO_ATTR', {\n              key: 'title',\n              value: data.title\n            });\n          }\n          if (data.text) {\n            this.$store.commit('studio/setScript', data.text);\n          }\n          if (!this.uploadedDocumentIsPPT) this.tabIndex = 0;\n          else\n            setTimeout(() => this.$store.commit('studio/toggleLibrary'), 1000);\n\n          this.$Progress.finish();\n          this.$vs.loading.close();\n        })\n        .catch(() => {\n          this.$Progress.fail();\n          this.$vs.loading.close();\n          this.$vs.notify({\n            title: 'Invalid URL',\n            text: 'No text found',\n            color: 'danger'\n          });\n        });\n    },\n    onSelectText() {\n      this.videoScript = this.queryContent.text;\n      this.choiceModal = false;\n    },\n    onSelectLink(idx) {\n      this.choiceModal = false;\n      this.fetchContent(this.queryContent.links[idx]);\n    }\n  },\n  beforeDestroy() {\n    this.saveForm();\n    window.removeEventListener('beforeunload', this.saveForm);\n  }\n};\n</script>\n\n<style scoped>\n[contentEditable='true']:empty:not(:focus):before {\n  content: attr(data-text);\n}\n::placeholder {\n  color: #626262;\n  opacity: 0.7;\n}\n.title2 {\n  height: 40px !important;\n  border: 0.5px solid lightgray;\n  font-size: 14px;\n  overflow-y: auto;\n  border-radius: 5px;\n  color: #626262;\n  opacity: 1; /* Firefox */\n  text-indent: 0.01%;\n  font-family: Montserrat, Helvetica, Arial, sans-serif;\n  font-weight: 400;\n  font-style: normal;\n  font-variant: normal;\n  text-decoration: none solid rgb(98, 98, 98);\n  text-align: start;\n  line-height: 22.4px;\n  vertical-align: baseline;\n  padding: 9px;\n}\n.description2 {\n  height: 60px !important;\n  border-radius: 5px;\n  border: 0.5px solid lightgray;\n  font-size: 14px;\n  overflow-y: auto;\n  color: #626262;\n  opacity: 1;\n  text-indent: 0.01%;\n  font-family: Montserrat, Helvetica, Arial, sans-serif;\n  font-weight: 400;\n  font-style: normal;\n  font-variant: normal;\n  text-decoration: none solid rgb(98, 98, 98);\n  text-align: start;\n  line-height: 22.4px;\n  vertical-align: baseline;\n  padding: 9px;\n}\n.video-script2 {\n  height: 250px !important;\n  border: 0.5px solid lightgray;\n  font-size: 14px;\n  overflow-y: auto;\n  border-radius: 5px;\n  color: #626262;\n  opacity: 1;\n  text-indent: 0.01%;\n  font-family: Montserrat, Helvetica, Arial, sans-serif;\n  font-weight: 400;\n  font-style: normal;\n  font-variant: normal;\n  text-decoration: none solid rgb(98, 98, 98);\n  text-align: start;\n  line-height: 22.4px;\n  vertical-align: baseline;\n  padding: 9px;\n}\n.video-script.vs-con-textarea >>> .vs-textarea {\n  height: 250px !important;\n}\n\n.items-center {\n  text-align: center;\n  text-align: -moz-center;\n  text-align: -webkit-center;\n}\n\n.items-left {\n  text-align: left;\n  text-align: -moz-left;\n  text-align: -webkit-left;\n}\n\n.items-right {\n  text-align: right;\n  text-align: -moz-right;\n  text-align: -webkit-right;\n}\n\n/*.text-window {\n  height: 33rem;\n  margin-top: calc(100% - 33rem);\n} */\n\n.text-window .vx-card {\n  /*height: 20rem;*/\n  border: 0.5px solid gray;\n}\n\n.text-window .vx-card div {\n  padding: 0.2rem;\n  height: 15rem;\n  overflow-y: auto;\n}\n.text-window .vx-card {\n  border: 1px solid rgba(0, 0, 0, 0.2);\n}\n</style>\n"]}]}