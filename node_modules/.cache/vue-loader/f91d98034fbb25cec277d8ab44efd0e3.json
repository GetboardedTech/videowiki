{"remainingRequest":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/layouts/components/vertical-nav-menu/VerticalNavMenuGroup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/layouts/components/vertical-nav-menu/VerticalNavMenuGroup.vue","mtime":1617441534121},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport VNavMenuItem from './VerticalNavMenuItem.vue';\n\nexport default {\n  name: 'v-nav-menu-group',\n  props: {\n    openHover: { type: Boolean, default: false },\n    open: { type: Boolean, default: false },\n    group: { type: Object },\n    groupIndex: { type: Number }\n  },\n  components: {\n    VNavMenuItem\n  },\n  data: () => ({\n    maxHeight: '0px',\n    openItems: false\n  }),\n  computed: {\n    verticalNavMenuItemsMin() {\n      return this.$store.state.verticalNavMenuItemsMin;\n    },\n    styleItems() {\n      return { maxHeight: this.maxHeight };\n    },\n    itemIcon() {\n      return index => {\n        if (!((index.match(/\\./g) || []).length > 1)) return 'CircleIcon';\n      };\n    },\n    isGroupActive() {\n      return item => {\n        const path = this.$route.fullPath;\n        let open = false;\n        const routeParent = this.$route.meta\n          ? this.$route.meta.parent\n          : undefined;\n\n        const func = item => {\n          if (item.submenu) {\n            item.submenu.forEach(item => {\n              if ((path == item.url || routeParent == item.slug) && item.url) {\n                open = true;\n              } else if (item.submenu) {\n                func(item);\n              }\n            });\n          }\n        };\n\n        func(item);\n        return open;\n      };\n    }\n  },\n  watch: {\n    // OPEN & CLOSES DROPDOWN ON ROUTE CHANGE\n    $route() {\n      if (this.verticalNavMenuItemsMin) return;\n\n      const scrollHeight = this.scrollHeight;\n\n      // Collapse Group\n      if (this.openItems && !this.open) {\n        this.maxHeight = `${scrollHeight}px`;\n        setTimeout(() => {\n          this.maxHeight = `${0}px`;\n        }, 50);\n\n        // Expand Group\n      } else if (this.open) {\n        this.maxHeight = `${scrollHeight}px`;\n        setTimeout(() => {\n          this.maxHeight = 'none';\n        }, 300);\n      }\n    },\n    maxHeight() {\n      this.openItems = this.maxHeight != '0px';\n    },\n    // OPEN AND CLOSES DROPDOWN MENU ON NavMenu COLLAPSE AND DEFAULT VIEW\n    '$store.state.verticalNavMenuItemsMin'(val) {\n      const scrollHeight = this.$refs.items.scrollHeight;\n\n      if (!val && this.open) {\n        this.maxHeight = `${scrollHeight}px`;\n        setTimeout(() => {\n          this.maxHeight = 'none';\n        }, 300);\n      } else {\n        this.maxHeight = `${scrollHeight}px`;\n        setTimeout(() => {\n          this.maxHeight = '0px';\n        }, 50);\n      }\n      if (val && this.open) {\n        this.maxHeight = `${scrollHeight}px`;\n        setTimeout(() => {\n          this.maxHeight = '0px';\n        }, 250);\n      }\n    }\n  },\n  methods: {\n    clickGroup() {\n      if (!this.openHover) {\n        const thisScrollHeight = this.$refs.items.scrollHeight;\n\n        if (this.maxHeight == '0px') {\n          this.maxHeight = `${thisScrollHeight}px`;\n          setTimeout(() => {\n            this.maxHeight = 'none';\n          }, 300);\n        } else {\n          this.maxHeight = `${thisScrollHeight}px`;\n          setTimeout(() => {\n            this.maxHeight = `${0}px`;\n          }, 50);\n        }\n\n        this.$parent.$children.map(child => {\n          if (child.isGroupActive) {\n            if (child !== this && !child.open && child.maxHeight != '0px') {\n              setTimeout(() => {\n                child.maxHeight = `${0}px`;\n              }, 50);\n            }\n          }\n        });\n      }\n    },\n    mouseover() {\n      if (this.openHover) {\n        const scrollHeight = this.$refs.items.scrollHeight;\n        this.maxHeight = `${scrollHeight}px`;\n      }\n    },\n    mouseout() {\n      if (this.openHover) {\n        const scrollHeight = 0;\n        this.maxHeight = `${scrollHeight}px`;\n      }\n    }\n  },\n  mounted() {\n    this.openItems = this.open;\n    if (this.open) {\n      this.maxHeight = 'none';\n    }\n  }\n};\n",{"version":3,"sources":["VerticalNavMenuGroup.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"VerticalNavMenuGroup.vue","sourceRoot":"src/layouts/components/vertical-nav-menu","sourcesContent":["<!-- =========================================================================================\n\tFile Name: VerticalNavMenuGroup.vue\n\tDescription: Vertical NavMenu Group Component. Extends vuesax framework's 'vs-sidebar-group' component\n\tComponent Name: VerticalNavMenuGroup\n\t----------------------------------------------------------------------------------------\n\tItem Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\n\tAuthor: Pixinvent\n\tAuthor URL: http://www.themeforest.net/user/pixinvent\n========================================================================================== -->\n\n<template>\n  <div\n    class=\"vs-sidebar-group\"\n    :class=\"[\n      { 'vs-sidebar-group-open': openItems },\n      { 'vs-sidebar-group-active': open },\n      { 'disabled-item pointer-events-none': group.isDisabled }\n    ]\"\n    @mouseover=\"mouseover\"\n    @mouseout=\"mouseout\"\n  >\n    <!-- Group Label -->\n    <div @click=\"clickGroup\" class=\"group-header w-full\">\n      <span class=\"flex items-center w-full\">\n        <!-- Group Icon -->\n        <feather-icon\n          v-if=\"group.icon || this.groupIndex > Math.floor(this.groupIndex)\"\n          :icon=\"group.icon || 'CircleIcon'\"\n          :svgClasses=\"{ 'w-3 h-3': this.groupIndex % 1 != 0 }\"\n        />\n\n        <!-- Group Name -->\n        <span\n          v-show=\"!verticalNavMenuItemsMin\"\n          class=\"truncate mr-3 select-none\"\n          >{{ group.name }}</span\n        >\n\n        <!-- Group Tag -->\n        <vs-chip\n          class=\"ml-auto mr-4\"\n          :color=\"group.tagColor\"\n          v-if=\"group.tag && !verticalNavMenuItemsMin\"\n          >{{ group.tag }}</vs-chip\n        >\n      </span>\n\n      <!-- Group Collapse Icon -->\n      <feather-icon\n        v-show=\"!verticalNavMenuItemsMin\"\n        :class=\"[{ rotate90: openItems }, 'feather-grp-header-arrow']\"\n        :icon=\"$vs.rtl ? 'ChevronLeftIcon' : 'ChevronRightIcon'\"\n        svg-classes=\"w-4 h-4\"\n      />\n\n      <!-- Group Tooltip -->\n      <span class=\"vs-sidebar--tooltip\">{{ group.name }}</span>\n    </div>\n    <!-- /Group Label -->\n\n    <!-- Group Items -->\n    <ul ref=\"items\" :style=\"styleItems\" class=\"vs-sidebar-group-items\">\n      <li v-for=\"(groupItem, index) in group.submenu\" :key=\"index\">\n        <!-- If item is group -->\n        <v-nav-menu-group\n          v-if=\"groupItem.submenu\"\n          :group=\"groupItem\"\n          :groupIndex=\"Number(`${groupIndex}.${index + 1}`)\"\n          :open=\"isGroupActive(groupItem)\"\n          :openHover=\"openHover\"\n        />\n\n        <!-- Else: Item -->\n        <v-nav-menu-item\n          v-else\n          icon-small\n          :index=\"groupIndex + '.' + index\"\n          :to=\"groupItem.slug !== 'external' ? groupItem.url : null\"\n          :href=\"groupItem.slug === 'external' ? groupItem.url : null\"\n          :icon=\"itemIcon(groupIndex + '.' + index)\"\n          :slug=\"groupItem.slug\"\n          :target=\"groupItem.target\"\n        >\n          <span class=\"truncate\">{{ groupItem.name }}</span>\n          <vs-chip\n            class=\"ml-auto\"\n            :color=\"groupItem.tagColor\"\n            v-if=\"groupItem.tag\"\n            >{{ groupItem.tag }}</vs-chip\n          >\n        </v-nav-menu-item>\n      </li>\n    </ul>\n    <!-- /Group Items -->\n  </div>\n</template>\n\n<script>\nimport VNavMenuItem from './VerticalNavMenuItem.vue';\n\nexport default {\n  name: 'v-nav-menu-group',\n  props: {\n    openHover: { type: Boolean, default: false },\n    open: { type: Boolean, default: false },\n    group: { type: Object },\n    groupIndex: { type: Number }\n  },\n  components: {\n    VNavMenuItem\n  },\n  data: () => ({\n    maxHeight: '0px',\n    openItems: false\n  }),\n  computed: {\n    verticalNavMenuItemsMin() {\n      return this.$store.state.verticalNavMenuItemsMin;\n    },\n    styleItems() {\n      return { maxHeight: this.maxHeight };\n    },\n    itemIcon() {\n      return index => {\n        if (!((index.match(/\\./g) || []).length > 1)) return 'CircleIcon';\n      };\n    },\n    isGroupActive() {\n      return item => {\n        const path = this.$route.fullPath;\n        let open = false;\n        const routeParent = this.$route.meta\n          ? this.$route.meta.parent\n          : undefined;\n\n        const func = item => {\n          if (item.submenu) {\n            item.submenu.forEach(item => {\n              if ((path == item.url || routeParent == item.slug) && item.url) {\n                open = true;\n              } else if (item.submenu) {\n                func(item);\n              }\n            });\n          }\n        };\n\n        func(item);\n        return open;\n      };\n    }\n  },\n  watch: {\n    // OPEN & CLOSES DROPDOWN ON ROUTE CHANGE\n    $route() {\n      if (this.verticalNavMenuItemsMin) return;\n\n      const scrollHeight = this.scrollHeight;\n\n      // Collapse Group\n      if (this.openItems && !this.open) {\n        this.maxHeight = `${scrollHeight}px`;\n        setTimeout(() => {\n          this.maxHeight = `${0}px`;\n        }, 50);\n\n        // Expand Group\n      } else if (this.open) {\n        this.maxHeight = `${scrollHeight}px`;\n        setTimeout(() => {\n          this.maxHeight = 'none';\n        }, 300);\n      }\n    },\n    maxHeight() {\n      this.openItems = this.maxHeight != '0px';\n    },\n    // OPEN AND CLOSES DROPDOWN MENU ON NavMenu COLLAPSE AND DEFAULT VIEW\n    '$store.state.verticalNavMenuItemsMin'(val) {\n      const scrollHeight = this.$refs.items.scrollHeight;\n\n      if (!val && this.open) {\n        this.maxHeight = `${scrollHeight}px`;\n        setTimeout(() => {\n          this.maxHeight = 'none';\n        }, 300);\n      } else {\n        this.maxHeight = `${scrollHeight}px`;\n        setTimeout(() => {\n          this.maxHeight = '0px';\n        }, 50);\n      }\n      if (val && this.open) {\n        this.maxHeight = `${scrollHeight}px`;\n        setTimeout(() => {\n          this.maxHeight = '0px';\n        }, 250);\n      }\n    }\n  },\n  methods: {\n    clickGroup() {\n      if (!this.openHover) {\n        const thisScrollHeight = this.$refs.items.scrollHeight;\n\n        if (this.maxHeight == '0px') {\n          this.maxHeight = `${thisScrollHeight}px`;\n          setTimeout(() => {\n            this.maxHeight = 'none';\n          }, 300);\n        } else {\n          this.maxHeight = `${thisScrollHeight}px`;\n          setTimeout(() => {\n            this.maxHeight = `${0}px`;\n          }, 50);\n        }\n\n        this.$parent.$children.map(child => {\n          if (child.isGroupActive) {\n            if (child !== this && !child.open && child.maxHeight != '0px') {\n              setTimeout(() => {\n                child.maxHeight = `${0}px`;\n              }, 50);\n            }\n          }\n        });\n      }\n    },\n    mouseover() {\n      if (this.openHover) {\n        const scrollHeight = this.$refs.items.scrollHeight;\n        this.maxHeight = `${scrollHeight}px`;\n      }\n    },\n    mouseout() {\n      if (this.openHover) {\n        const scrollHeight = 0;\n        this.maxHeight = `${scrollHeight}px`;\n      }\n    }\n  },\n  mounted() {\n    this.openItems = this.open;\n    if (this.open) {\n      this.maxHeight = 'none';\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\">\n@import '@/assets/scss/vuexy/components/verticalNavMenuGroup.scss';\n</style>\n"]}]}