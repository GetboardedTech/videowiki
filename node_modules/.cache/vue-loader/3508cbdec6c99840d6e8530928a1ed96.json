{"remainingRequest":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/components/search/SearchModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/components/search/SearchModal.vue","mtime":1617441641267},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport VideoPreview from '../../layouts/components/vertical-nav-menu/PanelItems/components/VideoPreview';\nimport ImagePreview from '../../layouts/components/vertical-nav-menu/PanelItems/components/ImagePreview';\nexport default {\n  name: 'SearchModal',\n  props: ['sceneNum', 'showModal'],\n  components: {\n    VideoPreview,\n    ImagePreview\n  },\n  data() {\n    return {\n      searchQuery: '',\n      searchInProgress: false,\n      media: 'video'\n    };\n  },\n  computed: {\n    videoList() {\n      return this.$store.state.studio.videos[this.sceneNum - 1];\n    },\n    imageList() {\n      return this.$store.state.studio.images[this.sceneNum - 1];\n    },\n    keywords() {\n      return this.$store.state.studio.keywords;\n    },\n    modalVisibility: {\n      get() {\n        return this.showModal;\n      },\n      set(val) {\n        this.$emit('update:showModal', val);\n      }\n    }\n  },\n  methods: {\n    selectVideo(v) {\n      this.$emit('close');\n      this.$store.commit('studio/selectVideo', {\n        value: v[1],\n        sceneNum: this.sceneNum\n      });\n    },\n    selectImage(img, zoomType) {\n      this.$emit('close');\n      const dataObj = {\n        image_url: img,\n        zoom: zoomType,\n        sceneNum: this.sceneNum\n      };\n      this.$vs.loading({\n        color: 'transparent',\n        container: `#upload_scene_${this.sceneNum}`\n      });\n      this.$store.commit('TOGGLE_PROGRESS_BAR', false);\n      this.$Progress.start();\n      this.$store\n        .dispatch('studio/addMotionToImage', dataObj)\n        .then(() => {\n          this.$Progress.finish();\n          this.$vs.loading.close();\n        })\n        .catch(() => {\n          this.$Progress.fail();\n          this.$vs.loading.close();\n        })\n        .finally(() => {\n          this.$vs.loading.close(\n            `#upload_scene_${this.currentScene} > .con-vs-loading`\n          );\n          setTimeout(() => {\n            this.$store.commit('TOGGLE_PROGRESS_BAR', true);\n          }, 1000);\n        });\n    },\n    searchMedia() {\n      this.searchInProgress = true;\n      this.$vs.loading({\n        background: 'primary',\n        color: '#fff',\n        container: '#search-with-loading',\n        scale: 0.4\n      });\n      const mediaType = this.media;\n      const dataObj = {\n        searchQuery: this.searchQuery,\n        srcLang: this.$store.state.studio.video.srcLang,\n        type: mediaType\n      };\n      this.$store\n        .dispatch('studio/searchMedia', dataObj)\n        .then(res => {\n          if (Object.keys(res.data).length === 0) {\n            this.$vs.notify({\n              title: 'Not Found',\n              text: `Cannot find ${mediaType}s related to this keyword`,\n              color: 'danger'\n            });\n          } else {\n            const dataObj = {\n              sceneNum: this.sceneNum - 1,\n              value: res.data\n            };\n            mediaType === 'video'\n              ? this.$store.commit('studio/setSearchedVideos', dataObj)\n              : this.$store.commit('studio/setSearchedImages', dataObj);\n          }\n        })\n        .catch(err => {\n          console.log(err);\n        })\n        .finally(() => {\n          this.searchInProgress = false;\n          this.$vs.loading.close(`#search-with-loading > .con-vs-loading`);\n        });\n\n      if (!this.keywords[this.sceneNum - 1].includes(this.searchQuery)) {\n        this.addKeyword();\n      }\n    },\n    addKeyword() {\n      const payload = {\n        keyword: this.searchQuery,\n        sceneNum: this.sceneNum - 1\n      };\n      this.$store.commit('studio/addKeyword', payload);\n    }\n  }\n};\n",{"version":3,"sources":["SearchModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"SearchModal.vue","sourceRoot":"src/components/search","sourcesContent":["<template>\n  <vs-popup title=\"Search Media\" :active.sync=\"modalVisibility\">\n    <vx-input-group class=\"mb-4\">\n      <vs-input v-model=\"searchQuery\" placeholder=\"Search...\" />\n      <template slot=\"append\">\n        <div class=\"append-text btn-addon\">\n          <vs-button\n            color=\"primary\"\n            class=\"vs-con-loading__container\"\n            id=\"search-with-loading\"\n            icon-pack=\"feather\"\n            icon=\"icon-search\"\n            :disabled=\"searchInProgress\"\n            @click=\"searchMedia()\"\n          ></vs-button>\n        </div>\n      </template>\n    </vx-input-group>\n    <div class=\"flex justify-center -mx-2 mb-base\">\n      <vs-radio\n        v-model=\"media\"\n        class=\"px-2\"\n        vs-name=\"mediaType\"\n        vs-value=\"video\"\n        >Videos</vs-radio\n      >\n      <vs-radio\n        v-model=\"media\"\n        class=\"px-2\"\n        vs-name=\"mediaType\"\n        vs-value=\"image\"\n        >Images</vs-radio\n      >\n    </div>\n    <div v-if=\"media === 'video'\" class=\"flex flex-wrap -mr-2 -ml-2 -mb-2\">\n      <div\n        v-for=\"(v, indexv) in videoList\"\n        :key=\"`sv_${sceneNum}_${indexv}`\"\n        class=\"w-full sm:w-1/2 md:w-1/2 lg:w-1/3 p-2\"\n      >\n        <VideoPreview\n          :src=\"v[1]\"\n          v-show=\"v[3] !== ''\"\n          @click.native=\"selectVideo(v)\"\n          class=\"cursor-pointer\"\n        />\n      </div>\n    </div>\n    <div v-else class=\"flex flex-wrap -mr-2 -ml-2 -mb-2\">\n      <div\n        v-for=\"(img, indexi) in imageList\"\n        :key=\"`si_${sceneNum}_${indexi}`\"\n        class=\"w-full sm:w-1/2 md:w-1/2 lg:w-1/3 p-2\"\n      >\n        <ImagePreview\n          :src=\"img[0]\"\n          :imageId=\"`modal_img_${indexi}`\"\n          @motion=\"selectImage(img[0], $event)\"\n        />\n      </div>\n    </div>\n  </vs-popup>\n</template>\n<script>\nimport VideoPreview from '../../layouts/components/vertical-nav-menu/PanelItems/components/VideoPreview';\nimport ImagePreview from '../../layouts/components/vertical-nav-menu/PanelItems/components/ImagePreview';\nexport default {\n  name: 'SearchModal',\n  props: ['sceneNum', 'showModal'],\n  components: {\n    VideoPreview,\n    ImagePreview\n  },\n  data() {\n    return {\n      searchQuery: '',\n      searchInProgress: false,\n      media: 'video'\n    };\n  },\n  computed: {\n    videoList() {\n      return this.$store.state.studio.videos[this.sceneNum - 1];\n    },\n    imageList() {\n      return this.$store.state.studio.images[this.sceneNum - 1];\n    },\n    keywords() {\n      return this.$store.state.studio.keywords;\n    },\n    modalVisibility: {\n      get() {\n        return this.showModal;\n      },\n      set(val) {\n        this.$emit('update:showModal', val);\n      }\n    }\n  },\n  methods: {\n    selectVideo(v) {\n      this.$emit('close');\n      this.$store.commit('studio/selectVideo', {\n        value: v[1],\n        sceneNum: this.sceneNum\n      });\n    },\n    selectImage(img, zoomType) {\n      this.$emit('close');\n      const dataObj = {\n        image_url: img,\n        zoom: zoomType,\n        sceneNum: this.sceneNum\n      };\n      this.$vs.loading({\n        color: 'transparent',\n        container: `#upload_scene_${this.sceneNum}`\n      });\n      this.$store.commit('TOGGLE_PROGRESS_BAR', false);\n      this.$Progress.start();\n      this.$store\n        .dispatch('studio/addMotionToImage', dataObj)\n        .then(() => {\n          this.$Progress.finish();\n          this.$vs.loading.close();\n        })\n        .catch(() => {\n          this.$Progress.fail();\n          this.$vs.loading.close();\n        })\n        .finally(() => {\n          this.$vs.loading.close(\n            `#upload_scene_${this.currentScene} > .con-vs-loading`\n          );\n          setTimeout(() => {\n            this.$store.commit('TOGGLE_PROGRESS_BAR', true);\n          }, 1000);\n        });\n    },\n    searchMedia() {\n      this.searchInProgress = true;\n      this.$vs.loading({\n        background: 'primary',\n        color: '#fff',\n        container: '#search-with-loading',\n        scale: 0.4\n      });\n      const mediaType = this.media;\n      const dataObj = {\n        searchQuery: this.searchQuery,\n        srcLang: this.$store.state.studio.video.srcLang,\n        type: mediaType\n      };\n      this.$store\n        .dispatch('studio/searchMedia', dataObj)\n        .then(res => {\n          if (Object.keys(res.data).length === 0) {\n            this.$vs.notify({\n              title: 'Not Found',\n              text: `Cannot find ${mediaType}s related to this keyword`,\n              color: 'danger'\n            });\n          } else {\n            const dataObj = {\n              sceneNum: this.sceneNum - 1,\n              value: res.data\n            };\n            mediaType === 'video'\n              ? this.$store.commit('studio/setSearchedVideos', dataObj)\n              : this.$store.commit('studio/setSearchedImages', dataObj);\n          }\n        })\n        .catch(err => {\n          console.log(err);\n        })\n        .finally(() => {\n          this.searchInProgress = false;\n          this.$vs.loading.close(`#search-with-loading > .con-vs-loading`);\n        });\n\n      if (!this.keywords[this.sceneNum - 1].includes(this.searchQuery)) {\n        this.addKeyword();\n      }\n    },\n    addKeyword() {\n      const payload = {\n        keyword: this.searchQuery,\n        sceneNum: this.sceneNum - 1\n      };\n      this.$store.commit('studio/addKeyword', payload);\n    }\n  }\n};\n</script>\n"]}]}