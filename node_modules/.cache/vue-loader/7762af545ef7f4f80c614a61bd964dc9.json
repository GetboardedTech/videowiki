{"remainingRequest":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/views/components/audioRecorder.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/views/components/audioRecorder.vue","mtime":1617441641275},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nconst MicRecorder = require('mic-recorder-to-mp3');\nexport default {\n  name: 'audio-recorder',\n  props: ['sceneNum'],\n  data() {\n    return {\n      button: null,\n      recorder: null,\n      recordingInProcess: false,\n      recordingReady: false,\n      audioBlob: null,\n      audioFile: null,\n      isRunning: true,\n      trimVideo: false,\n      showModal: false,\n      minutes: 0,\n      secondes: 0,\n      time: 0,\n      timer: null\n    };\n  },\n  filters: {\n    prettify: function(value) {\n      const data = value.split(':');\n      let minutes = data[0];\n      let secondes = data[1];\n      if (minutes < 10) {\n        minutes = '0' + minutes;\n      }\n      if (secondes < 10) {\n        secondes = '0' + secondes;\n      }\n      return minutes + ':' + secondes;\n    }\n  },\n  computed: {\n    prettyTime() {\n      const time = this.time / 60;\n      const minutes = parseInt(time);\n      const secondes = Math.round((time - minutes) * 60);\n      return minutes + ':' + secondes;\n    },\n    recordedAudios() {\n      return this.$store.state.studio.recordedAudios;\n    },\n    addedAudioVideos() {\n      return this.$store.state.studio.addedAudioVideos;\n    }\n  },\n  methods: {\n    removeAddedAudio() {\n      this.$store.commit('studio/setVideoWithAudio', {\n        sceneNum: parseInt(this.sceneNum) + 1,\n        value: null\n      });\n    },\n    removeRecording() {\n      this.$store.commit('studio/setRecordedAudio', {\n        sceneNum: parseInt(this.sceneNum),\n        value: null\n      });\n    },\n    openFile() {\n      document.getElementById(`recorded_file`).click();\n    },\n    uploadRecordedFile(event) {\n      this.audioFile = event.target.files[0];\n      const url = URL.createObjectURL(this.audioFile);\n      const audioObj = {\n        value: url,\n        sceneNum: parseInt(this.sceneNum)\n      };\n      this.$store.commit('studio/setRecordedAudio', audioObj);\n    },\n    playVid() {\n      const vid = document.getElementById('video_' + this.sceneNum);\n      if (vid) {\n        vid.currentTime = 0;\n        vid.play();\n      }\n    },\n    pauseVid() {\n      const vid = document.getElementById('video_' + this.sceneNum);\n      if (vid) {\n        vid.pause();\n      }\n    },\n    startRecording() {\n      this.recorder\n        .start()\n        .then(() => {\n          this.playVid();\n          this.startTimer();\n          this.recordingInProcess = true;\n        })\n        .catch(e => {\n          console.error(e);\n        });\n    },\n    toBase64(blob) {\n      const reader = new FileReader();\n      reader.readAsDataURL(blob);\n      let base64data = null;\n      return new Promise((resolve, reject) => {\n        reader.onloadend = function() {\n          base64data = reader.result;\n          // console.log(base64data);\n          resolve(base64data);\n        };\n      });\n    },\n    stopRecording() {\n      this.recorder\n        .stop()\n        .getMp3()\n        .then(([buffer, blob]) => {\n          this.pauseVid();\n          this.resetTimer();\n\n          this.recordingInProcess = false;\n          // console.log(buffer, blob);\n\n          /* this.toBase64(blob)\n            .then((res) => {\n              this.audioBlob = res;\n            })\n            .catch((e) => {\n              console.error(e);\n            }); */\n          this.audioFile = new File(buffer, 'music_' + this.sceneNum + '.mp3', {\n            type: blob.type,\n            lastModified: Date.now()\n          });\n          const url = URL.createObjectURL(this.audioFile);\n          const audioObj = {\n            value: url,\n            sceneNum: parseInt(this.sceneNum)\n          };\n          this.$store.commit('studio/setRecordedAudio', audioObj);\n          // this.$emit('updateComponent');\n        });\n    },\n    compareAudioVideoDuration() {\n      const videoDuration = document.getElementById('video_' + this.sceneNum)\n        .duration;\n      const audioDuration = document.getElementById('audio_' + this.sceneNum)\n        .duration;\n      if (Math.abs(audioDuration - videoDuration) > 1) {\n        this.showModal = true;\n        if (audioDuration < videoDuration) this.trimVideo = true;\n      } else this.audioVideoMerge();\n    },\n    async handleImageAudioMerge() {\n      const dataObj = {\n        image_url: this.$store.state.studio.selectedFromLibraryVideos[\n          parseInt(this.sceneNum) + 1\n        ],\n        zoom: 'None'\n      };\n      try {\n        const res = await this.$store.dispatch(\n          'studio/addMotionToImage',\n          dataObj\n        );\n        return res.url;\n      } catch (err) {\n        return false;\n      }\n    },\n    async audioVideoMerge() {\n      if (this.showModal) this.showModal = false;\n      this.$vs.loading({\n        background: '#fff',\n        container: `#scene_card_${this.sceneNum}`,\n        type: 'sound',\n        text: 'Adding Voice...'\n      });\n      const fd = new FormData();\n      // fd.append(\"audio_data\", this.audioBlob, this.audioBlob.name)\n      // console.log(fd.entries())\n      /* this.audioBlob.arrayBuffer().then(res => {\n        console.log(res)\n      }) */\n      // console.log('audio blob', this.audioBlob);\n      /* var dataObj = {\n        audio: this.audioFile,\n      }; */\n      const audioUrl = this.audioFile\n        ? this.audioFile\n        : this.recordedAudios[parseInt(this.sceneNum)];\n      fd.append('audio', audioUrl);\n      let videoUrl = '';\n      if (\n        this.$store.state.studio.preparedScenesVideos[\n          parseInt(this.sceneNum) + 1\n        ]\n      ) {\n        videoUrl = this.$store.state.studio.preparedScenesVideos[\n          parseInt(this.sceneNum) + 1\n        ];\n      } else {\n        videoUrl = this.$store.state.studio.selectedFromLibraryVideos[\n          parseInt(this.sceneNum) + 1\n        ];\n      }\n      const urlString = new URL(videoUrl);\n      if (urlString.pathname.split('/')[2] === 'ppt_file') {\n        videoUrl = await this.handleImageAudioMerge();\n      }\n      if (!videoUrl) {\n        this.$vs.loading.close(\n          `#scene_card_${this.sceneNum} > .con-vs-loading`\n        );\n        return;\n      }\n      // dataObj.video = videoUrl;\n      fd.append('video', videoUrl);\n      /* this.$Progress.start();\n      this.$vs.loading({ color: 'transparent' }); */\n      this.$store\n        .dispatch('studio/audioVideoMerge', fd)\n        .then(res => {\n          console.log(res);\n          const response = {\n            sceneNum: parseInt(this.sceneNum) + 1,\n            value: res.data.video_url\n          };\n          this.$emit('updateComponent');\n          this.$store.commit('studio/setVideoWithAudio', response);\n          this.$store.commit('studio/setRecordedAudio', {\n            sceneNum: parseInt(this.sceneNum),\n            value: res.data.audio_url\n          });\n          /* this.$Progress.finish();\n          this.$vs.loading.close(); */\n          // console.log('done', res.data.url);\n          // this.f(res.data.url);\n        })\n        .catch(err => {\n          console.log(err);\n          /* this.$Progress.fail();\n          this.$vs.loading.close(); */\n          this.$vs.notify({\n            title: 'Error Occured',\n            text: 'Cannot merge audio and video',\n            color: 'danger'\n          });\n        })\n        .finally(() => {\n          this.$vs.loading.close(\n            `#scene_card_${this.sceneNum} > .con-vs-loading`\n          );\n        });\n    },\n    f(v) {\n      this.$store.commit('studio/selectVideo', v);\n      console.log(\n        'selected videos',\n        this.$store.state.studio.preparedScenesVideos\n      );\n    },\n    startTimer() {\n      this.isRunning = true;\n      if (!this.timer) {\n        this.timer = setInterval(() => {\n          this.time++;\n          /* if (this.time > 0) {\n            this.time++\n          } else {\n            clearInterval(this.timer)\n            //this.sound.play()\n            this.reset()\n          } */\n        }, 1000);\n      }\n    },\n    stopTimer() {\n      this.isRunning = false;\n      clearInterval(this.timer);\n      this.timer = null;\n    },\n    resetTimer() {\n      this.stopTimer();\n      this.time = 0;\n      this.secondes = 0;\n      this.minutes = 0;\n    }\n  },\n  mounted() {\n    this.recorder = new MicRecorder({\n      bitRate: 128\n    });\n  }\n};\n",{"version":3,"sources":["audioRecorder.vue"],"names":[],"mappingsfile":"audioRecorder.vue","sourceRoot":"src/views/components","sourcesContent":["<template>\n  <div class=\"w-full\">\n    <div>\n      <div\n        class=\"flex flex-wrap justify-center -m-2\"\n        v-if=\"!recordedAudios[parseInt(sceneNum)] && !recordingInProcess\"\n      >\n        <div class=\"p-2\">\n          <vs-button @click=\"startRecording\">{{\n            $t('studio.voice.v1')\n          }}</vs-button>\n        </div>\n        <div class=\"p-2\">\n          <vs-button @click=\"openFile\">Add Audio</vs-button>\n          <input\n            type=\"file\"\n            :id=\"`recorded_file`\"\n            @change=\"uploadRecordedFile\"\n            class=\"hidden\"\n            accept=\"audio/*\"\n          />\n        </div>\n      </div>\n      <div v-show=\"recordingInProcess\">\n        <vs-button\n          color=\"danger\"\n          icon=\"pause\"\n          radius\n          class=\"mb-3 animation\"\n          @click=\"stopRecording\"\n        ></vs-button>\n        <h6>\n          {{ prettyTime | prettify }}\n        </h6>\n      </div>\n      <!--ul\n        :class=\"'playlist_' + sceneNum\"\n        :id=\"'play_' + sceneNum\">\n        class=\"mb-base\"\n      ></ul-->\n      <div\n        class=\"flex flex-wrap controls-wrapper\"\n        v-if=\"recordedAudios[parseInt(sceneNum)] && !recordingInProcess\"\n      >\n        <div\n          class=\"cursor-pointer delete-recording-btn w-full sm:w-1/10\"\n          @click=\"removeRecording\"\n        >\n          <vs-icon icon=\"delete\" size=\"20px\" color=\"primary\" />\n        </div>\n        <div\n          class=\"flex flex-wrap items-center justify-center w-full sm:w-9/10\"\n        >\n          <div class=\"p-2 flex sm:w-1/2 w-4/5\">\n            <audio controls :id=\"'audio_' + sceneNum\" style=\"height:42px\">\n              <source\n                :src=\"recordedAudios[parseInt(sceneNum)]\"\n                type=\"audio/mp3\"\n              />\n              Your browser does not support the audio element.\n            </audio>\n          </div>\n          <!--div class=\"p-2\">\n            <vx-tooltip text=\"Record again\">\n              <vs-button icon=\"replay\" @click=\"startRecording\" />\n            </vx-tooltip>\n          </div-->\n          <div class=\"p-2\">\n            <vs-button\n              style=\"inline-text: center\"\n              @click=\"compareAudioVideoDuration\"\n              >Add Voice</vs-button\n            >\n          </div>\n          <div class=\"p-1\">\n            <vx-tooltip text=\"Remove Voice\">\n              <vs-button\n                icon=\"block\"\n                color=\"danger\"\n                :disabled=\"!addedAudioVideos[parseInt(sceneNum) + 1]\"\n                @click=\"removeAddedAudio\"\n              ></vs-button>\n            </vx-tooltip>\n          </div>\n        </div>\n      </div>\n    </div>\n    <vs-popup title=\"Confirmation\" :active.sync=\"showModal\">\n      <p v-if=\"trimVideo\" class=\"mb-base\">\n        We will trim the video to match it with audio\n      </p>\n      <p v-else class=\"mb-base\">\n        We will loop the video to match it with audio\n      </p>\n      <div class=\"flex justify-around\">\n        <vs-button type=\"filled\" color=\"danger\" @click=\"showModal = false\"\n          >No, Record Again</vs-button\n        >\n        <vs-button type=\"filled\" color=\"primary\" @click=\"audioVideoMerge\"\n          >OK</vs-button\n        >\n      </div>\n    </vs-popup>\n  </div>\n</template>\n\n<script>\nconst MicRecorder = require('mic-recorder-to-mp3');\nexport default {\n  name: 'audio-recorder',\n  props: ['sceneNum'],\n  data() {\n    return {\n      button: null,\n      recorder: null,\n      recordingInProcess: false,\n      recordingReady: false,\n      audioBlob: null,\n      audioFile: null,\n      isRunning: true,\n      trimVideo: false,\n      showModal: false,\n      minutes: 0,\n      secondes: 0,\n      time: 0,\n      timer: null\n    };\n  },\n  filters: {\n    prettify: function(value) {\n      const data = value.split(':');\n      let minutes = data[0];\n      let secondes = data[1];\n      if (minutes < 10) {\n        minutes = '0' + minutes;\n      }\n      if (secondes < 10) {\n        secondes = '0' + secondes;\n      }\n      return minutes + ':' + secondes;\n    }\n  },\n  computed: {\n    prettyTime() {\n      const time = this.time / 60;\n      const minutes = parseInt(time);\n      const secondes = Math.round((time - minutes) * 60);\n      return minutes + ':' + secondes;\n    },\n    recordedAudios() {\n      return this.$store.state.studio.recordedAudios;\n    },\n    addedAudioVideos() {\n      return this.$store.state.studio.addedAudioVideos;\n    }\n  },\n  methods: {\n    removeAddedAudio() {\n      this.$store.commit('studio/setVideoWithAudio', {\n        sceneNum: parseInt(this.sceneNum) + 1,\n        value: null\n      });\n    },\n    removeRecording() {\n      this.$store.commit('studio/setRecordedAudio', {\n        sceneNum: parseInt(this.sceneNum),\n        value: null\n      });\n    },\n    openFile() {\n      document.getElementById(`recorded_file`).click();\n    },\n    uploadRecordedFile(event) {\n      this.audioFile = event.target.files[0];\n      const url = URL.createObjectURL(this.audioFile);\n      const audioObj = {\n        value: url,\n        sceneNum: parseInt(this.sceneNum)\n      };\n      this.$store.commit('studio/setRecordedAudio', audioObj);\n    },\n    playVid() {\n      const vid = document.getElementById('video_' + this.sceneNum);\n      if (vid) {\n        vid.currentTime = 0;\n        vid.play();\n      }\n    },\n    pauseVid() {\n      const vid = document.getElementById('video_' + this.sceneNum);\n      if (vid) {\n        vid.pause();\n      }\n    },\n    startRecording() {\n      this.recorder\n        .start()\n        .then(() => {\n          this.playVid();\n          this.startTimer();\n          this.recordingInProcess = true;\n        })\n        .catch(e => {\n          console.error(e);\n        });\n    },\n    toBase64(blob) {\n      const reader = new FileReader();\n      reader.readAsDataURL(blob);\n      let base64data = null;\n      return new Promise((resolve, reject) => {\n        reader.onloadend = function() {\n          base64data = reader.result;\n          // console.log(base64data);\n          resolve(base64data);\n        };\n      });\n    },\n    stopRecording() {\n      this.recorder\n        .stop()\n        .getMp3()\n        .then(([buffer, blob]) => {\n          this.pauseVid();\n          this.resetTimer();\n\n          this.recordingInProcess = false;\n          // console.log(buffer, blob);\n\n          /* this.toBase64(blob)\n            .then((res) => {\n              this.audioBlob = res;\n            })\n            .catch((e) => {\n              console.error(e);\n            }); */\n          this.audioFile = new File(buffer, 'music_' + this.sceneNum + '.mp3', {\n            type: blob.type,\n            lastModified: Date.now()\n          });\n          const url = URL.createObjectURL(this.audioFile);\n          const audioObj = {\n            value: url,\n            sceneNum: parseInt(this.sceneNum)\n          };\n          this.$store.commit('studio/setRecordedAudio', audioObj);\n          // this.$emit('updateComponent');\n        });\n    },\n    compareAudioVideoDuration() {\n      const videoDuration = document.getElementById('video_' + this.sceneNum)\n        .duration;\n      const audioDuration = document.getElementById('audio_' + this.sceneNum)\n        .duration;\n      if (Math.abs(audioDuration - videoDuration) > 1) {\n        this.showModal = true;\n        if (audioDuration < videoDuration) this.trimVideo = true;\n      } else this.audioVideoMerge();\n    },\n    async handleImageAudioMerge() {\n      const dataObj = {\n        image_url: this.$store.state.studio.selectedFromLibraryVideos[\n          parseInt(this.sceneNum) + 1\n        ],\n        zoom: 'None'\n      };\n      try {\n        const res = await this.$store.dispatch(\n          'studio/addMotionToImage',\n          dataObj\n        );\n        return res.url;\n      } catch (err) {\n        return false;\n      }\n    },\n    async audioVideoMerge() {\n      if (this.showModal) this.showModal = false;\n      this.$vs.loading({\n        background: '#fff',\n        container: `#scene_card_${this.sceneNum}`,\n        type: 'sound',\n        text: 'Adding Voice...'\n      });\n      const fd = new FormData();\n      // fd.append(\"audio_data\", this.audioBlob, this.audioBlob.name)\n      // console.log(fd.entries())\n      /* this.audioBlob.arrayBuffer().then(res => {\n        console.log(res)\n      }) */\n      // console.log('audio blob', this.audioBlob);\n      /* var dataObj = {\n        audio: this.audioFile,\n      }; */\n      const audioUrl = this.audioFile\n        ? this.audioFile\n        : this.recordedAudios[parseInt(this.sceneNum)];\n      fd.append('audio', audioUrl);\n      let videoUrl = '';\n      if (\n        this.$store.state.studio.preparedScenesVideos[\n          parseInt(this.sceneNum) + 1\n        ]\n      ) {\n        videoUrl = this.$store.state.studio.preparedScenesVideos[\n          parseInt(this.sceneNum) + 1\n        ];\n      } else {\n        videoUrl = this.$store.state.studio.selectedFromLibraryVideos[\n          parseInt(this.sceneNum) + 1\n        ];\n      }\n      const urlString = new URL(videoUrl);\n      if (urlString.pathname.split('/')[2] === 'ppt_file') {\n        videoUrl = await this.handleImageAudioMerge();\n      }\n      if (!videoUrl) {\n        this.$vs.loading.close(\n          `#scene_card_${this.sceneNum} > .con-vs-loading`\n        );\n        return;\n      }\n      // dataObj.video = videoUrl;\n      fd.append('video', videoUrl);\n      /* this.$Progress.start();\n      this.$vs.loading({ color: 'transparent' }); */\n      this.$store\n        .dispatch('studio/audioVideoMerge', fd)\n        .then(res => {\n          console.log(res);\n          const response = {\n            sceneNum: parseInt(this.sceneNum) + 1,\n            value: res.data.video_url\n          };\n          this.$emit('updateComponent');\n          this.$store.commit('studio/setVideoWithAudio', response);\n          this.$store.commit('studio/setRecordedAudio', {\n            sceneNum: parseInt(this.sceneNum),\n            value: res.data.audio_url\n          });\n          /* this.$Progress.finish();\n          this.$vs.loading.close(); */\n          // console.log('done', res.data.url);\n          // this.f(res.data.url);\n        })\n        .catch(err => {\n          console.log(err);\n          /* this.$Progress.fail();\n          this.$vs.loading.close(); */\n          this.$vs.notify({\n            title: 'Error Occured',\n            text: 'Cannot merge audio and video',\n            color: 'danger'\n          });\n        })\n        .finally(() => {\n          this.$vs.loading.close(\n            `#scene_card_${this.sceneNum} > .con-vs-loading`\n          );\n        });\n    },\n    f(v) {\n      this.$store.commit('studio/selectVideo', v);\n      console.log(\n        'selected videos',\n        this.$store.state.studio.preparedScenesVideos\n      );\n    },\n    startTimer() {\n      this.isRunning = true;\n      if (!this.timer) {\n        this.timer = setInterval(() => {\n          this.time++;\n          /* if (this.time > 0) {\n            this.time++\n          } else {\n            clearInterval(this.timer)\n            //this.sound.play()\n            this.reset()\n          } */\n        }, 1000);\n      }\n    },\n    stopTimer() {\n      this.isRunning = false;\n      clearInterval(this.timer);\n      this.timer = null;\n    },\n    resetTimer() {\n      this.stopTimer();\n      this.time = 0;\n      this.secondes = 0;\n      this.minutes = 0;\n    }\n  },\n  mounted() {\n    this.recorder = new MicRecorder({\n      bitRate: 128\n    });\n  }\n};\n</script>\n\n<style scoped>\n.mainblock {\n  margin-bottom: -12%;\n}\n\n.controls-wrapper {\n  border: 1px solid rgba(114, 71, 196, 0.16);\n  border-radius: 4px;\n}\n.delete-recording-btn {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: rgba(114, 71, 196, 0.1);\n}\n.animation {\n  box-shadow: 0 0 0 0 rgb(116, 74, 74);\n  animation: pulse 2s infinite;\n}\n@keyframes pulse {\n  0% {\n    transform: scale(0.95);\n    box-shadow: 0 0 0 0px rgba(255, 82, 82, 0.7);\n  }\n\n  70% {\n    transform: scale(1);\n    box-shadow: 0 0 0 15px rgba(255, 82, 82, 0);\n  }\n\n  100% {\n    transform: scale(0.95);\n    box-shadow: 0 0 0 0px rgba(255, 82, 82, 0);\n  }\n}\n</style>\n"]}]}