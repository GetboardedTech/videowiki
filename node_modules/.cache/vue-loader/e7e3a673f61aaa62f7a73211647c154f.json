{"remainingRequest":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/views/dashboard/Dashboard.vue?vue&type=style&index=0&id=6764ce0f&scoped=true&lang=css&","dependencies":[{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/views/dashboard/Dashboard.vue","mtime":1617441641275},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*.content {\n  padding-top: 3rem;\n  padding-left: 1.75rem;\n  padding-right: 1.75rem;\n  background: #e5e5e5;\n}*/\n",{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoNA;AACA;AACA;AACA;AACA;AACA","file":"Dashboard.vue","sourceRoot":"src/views/dashboard","sourcesContent":["<template>\n  <div>\n    <TheHeader />\n    <div\n      class=\"vs-con-loading__container\"\n      id=\"div-with-loading\"\n      :class=\"{ 'h-72': isLoading }\"\n    ></div>\n    <div v-if=\"!isLoading\">\n      <div class=\"vx-row p-8\" v-if=\"reversedVideoList.length > 0\">\n        <VideoCard\n          v-for=\"video in reversedVideoList\"\n          :key=\"video.id\"\n          :prop=\"video\"\n          :user=\"false\"\n          @click.native=\"detailView(video)\"\n        />\n      </div>\n      <div v-else class=\"flex h-72 justify-center items-center flex-wrap\">\n        <h4 class=\"text-danger\">No videos published yet</h4>\n      </div>\n    </div>\n    <vs-popup ref=\"custom_modal\" :active.sync=\"showAssetModal\">\n      <div class=\"flex items-start -m-5\">\n        <div class=\"p-5\">\n          <img src=\"@/assets/images/pages/mp4.svg\" />\n        </div>\n        <div class=\"p-5\">\n          <div class=\"mb-2\">\n            <h4>{{ selectedVideo.title }}</h4>\n          </div>\n          <div>\n            <div class=\"text-2xl\" v-if=\"!isWalletConnected\">\n              Connect Wallet !\n            </div>\n            <div v-else class=\"vs-con-loading__container\" id=\"buy-download\">\n              <div v-if=\"!isDownloadable\">\n                <div class=\"mb-2\">\n                  <b>{{ oceanRequired }}</b> OCEAN\n                </div>\n                <vs-button\n                  type=\"filled\"\n                  class=\"mb-2 font-semibold\"\n                  @click=\"buyContent\"\n                  >Buy</vs-button\n                >\n              </div>\n              <vs-button\n                v-else\n                type=\"filled\"\n                class=\"font-semibold\"\n                @click=\"downloadAsset\"\n                >Download</vs-button\n              >\n            </div>\n          </div>\n        </div>\n      </div>\n      <!--vs-divider /-->\n    </vs-popup>\n    <Transaction\n      :show=\"showTransactionModal\"\n      :transactionType=\"txType\"\n      :transactionPhase=\"currentTxPhase\"\n      @close=\"showTransactionModal = false\"\n      @retry=\"txType === 'Buy' ? buyContent() : downloadAsset()\"\n    />\n  </div>\n</template>\n<script>\nimport TheHeader from '@/layouts/components/navbar/NavbarDashboard';\nimport Transaction from '@/views/components/Transaction/Transaction.vue';\nimport VideoCard from './components/VideoCard';\nimport { ajaxCallMixin } from '../../http/HttpCommon';\nexport default {\n  name: 'Dashboard',\n  mixins: [ajaxCallMixin],\n  components: {\n    TheHeader,\n    VideoCard,\n    Transaction,\n  },\n  data() {\n    return {\n      videoList: [],\n      isLoading: false,\n      selectedVideo: {},\n      oceanRequired: 0,\n      showAssetModal: false,\n      videoTxData: {},\n      isDownloadable: false,\n      showTransactionModal: false,\n      txType: 'Buy',\n      currentTxPhase: 'Processing',\n    };\n  },\n  computed: {\n    reversedVideoList() {\n      return this.videoList.slice().reverse();\n    },\n    isWalletConnected() {\n      return this.$store.state.isWalletConnected;\n    },\n    accountAddress() {\n      return this.$store.state.accountAddress;\n    },\n  },\n  mounted() {\n    this.getVideoList();\n    this.$refs.custom_modal.$el.childNodes[1].childNodes[0].style.display =\n      'none';\n    this.$refs.custom_modal.$el.childNodes[1].style.width = '400px';\n  },\n  methods: {\n    getVideoList() {\n      const url = '/videoapi/home_videos';\n      this.$vs.loading({\n        background: 'transparent',\n        container: '#div-with-loading',\n      });\n      this.isLoading = true;\n      this.getRequest(url, this.handleResponse);\n    },\n    handleResponse(apiResponse) {\n      this.$vs.loading.close('#div-with-loading > .con-vs-loading');\n      this.isLoading = false;\n      this.videoList = apiResponse.data;\n    },\n    detailView(selectedVideo) {\n      if (selectedVideo.paid) {\n        this.showAssetModal = true;\n        this.selectedVideo = selectedVideo;\n        if (this.isWalletConnected) {\n          this.getVideoTxData();\n        }\n      } else {\n        const route = this.$router.resolve({\n          name: 'Video View',\n          params: { slug: selectedVideo.id },\n          query: { url: selectedVideo.video },\n        });\n        window.open(route.href, '_blank');\n      }\n    },\n    async buyContent() {\n      this.showAssetModal = false;\n      this.txType = 'Buy';\n      this.$store.commit('SET_CURRENT_TRANSACTION_STEP', 1);\n      this.showTransactionModal = true;\n      this.currentTxPhase = 'Processing';\n      try {\n        await this.$store.dispatch(\n          'initiateBuy',\n          this.videoTxData.exchange_key\n        );\n        this.isDownloadable = await this.$store.dispatch('getDownloadStatus', {\n          dataTokenAddress: this.videoTxData.dataToken,\n          accountAddress: this.accountAddress,\n        });\n        this.showTransactionModal = false;\n        // this.detailView(this.selectedVideo);\n      } catch (error) {\n        if (error.code === 4001) this.currentTxPhase = 'Rejected';\n        else this.currentTxPhase = 'Failed';\n      }\n    },\n    async downloadAsset() {\n      this.showAssetModal = false;\n      this.txType = 'Download';\n      this.$store.commit('SET_CURRENT_TRANSACTION_STEP', 1);\n      this.showTransactionModal = true;\n      this.currentTxPhase = 'Processing';\n      try {\n        await this.$store.dispatch('startDownload', {\n          did: this.videoTxData.dod,\n          dta: this.videoTxData.dataToken,\n        });\n        setTimeout(() => (this.showTransactionModal = false), 2000);\n      } catch (error) {\n        if (error.code === 4001) this.currentTxPhase = 'Rejected';\n        else this.currentTxPhase = 'Failed';\n      }\n    },\n    getVideoTxData() {\n      const url = `/transaction/oceanbuy?video_id=${this.selectedVideo.id}`;\n      this.$vs.loading({\n        container: `#buy-download`,\n        background: '#fff',\n        color: 'primary',\n        scale: 0.8,\n      });\n      // this.isLoading = true;\n      this.getRequest(url, this.callBackVideoTxData);\n    },\n    async callBackVideoTxData(apiResponse) {\n      // this.isLoading = false;\n      this.videoTxData = apiResponse.data;\n      const price = await this.$store.dispatch(\n        'getAssetPrice',\n        this.videoTxData.exchange_key\n      );\n      this.isDownloadable = await this.$store.dispatch('getDownloadStatus', {\n        dataTokenAddress: this.videoTxData.dataToken,\n        accountAddress: this.accountAddress,\n      });\n      this.oceanRequired = price;\n      this.$vs.loading.close(`#buy-download > .con-vs-loading`);\n    },\n  },\n};\n</script>\n<style scoped>\n/*.content {\n  padding-top: 3rem;\n  padding-left: 1.75rem;\n  padding-right: 1.75rem;\n  background: #e5e5e5;\n}*/\n</style>\n"]}]}