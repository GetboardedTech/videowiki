{"remainingRequest":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/views/pages/EditScenes.vue?vue&type=style&index=0&id=f338a514&scoped=true&lang=css&","dependencies":[{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/views/pages/EditScenes.vue","mtime":1617441641275},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.vs-con-loading__container {\n  z-index: 20 !important;\n}\n.scene-card {\n  min-height: 30rem;\n  opacity: 0.2;\n  box-shadow: none;\n  margin-bottom: 10rem;\n}\n.scene-video {\n  margin: -1.3rem -1.3rem 0;\n}\n.activeScene {\n  box-shadow: 0px 4px 25px 0px rgba(0, 0, 0, 0.1) !important;\n  -webkit-box-shadow: 0px 4px 25px 0px rgba(0, 0, 0, 0.1) !important;\n  opacity: 1 !important;\n}\n.items-left {\n  text-align: left;\n  text-align: -moz-left;\n  text-align: -webkit-left;\n}\n.items-right {\n  text-align: right;\n  text-align: -moz-right;\n  text-align: -webkit-right;\n}\n.scene-text {\n  border: 1px solid gray;\n  border-radius: 3px;\n  padding: 0.5rem;\n}\n.edit-subtitles {\n  background: rgba(107, 77, 189, 0.06);\n  border-radius: 4px;\n  padding: 5px;\n}\n.edit-transition {\n  background: rgba(107, 77, 189, 0.06);\n  border-radius: 4px;\n}\n",{"version":3,"sources":["EditScenes.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EditScenes.vue","sourceRoot":"src/views/pages","sourcesContent":["<template>\n  <div>\n    <vx-card\n      v-for=\"(s, indexs) in $store.state.studio.scenes\"\n      :key=\"indexs\"\n      :id=\"'scene_card_' + indexs\"\n      class=\"scene-card vs-con-loading__container\"\n      :class=\"{\n        activeScene:\n          $store.state.studio.currentActiveScene === parseInt(indexs) + 1\n      }\"\n    >\n      <div\n        class=\"scene-video mb-4\"\n        :id=\"`scene_video_${indexs}`\"\n        :key=\"JSON.stringify(preparedScenesVideos)\"\n      >\n        <video\n          width=\"100%\"\n          height=\"auto\"\n          controls\n          v-if=\"preparedScenesVideos[parseInt(indexs) + 1]\"\n        >\n          <source\n            :src=\"preparedScenesVideos[parseInt(indexs) + 1]\"\n            type=\"video/mp4\"\n          />\n          {{ $t('studio.errors.e1') }}\n        </video>\n        <div v-else>\n          <img\n            v-if=\"isImageUrl(selectedFromLibraryVideos[parseInt(indexs) + 1])\"\n            width=\"100%\"\n            height=\"auto\"\n            :src=\"selectedFromLibraryVideos[parseInt(indexs) + 1]\"\n          />\n          <video\n            v-else\n            width=\"100%\"\n            height=\"auto\"\n            controls\n            :src=\"selectedFromLibraryVideos[parseInt(indexs) + 1]\"\n          >\n            {{ $t('studio.errors.e1') }}\n          </video>\n        </div>\n      </div>\n      <div class=\"flex flex-wrap justify-between items-center mb-4\">\n        <div class=\"flex items-center -mx-2 edit-subtitles m-2\">\n          <div class=\"px-2\">\n            <h6 class=\"text-primary\">Subtitles</h6>\n          </div>\n          <div class=\"px-2\" style=\"transform: translate(0px, 3px)\">\n            <position-dropdown\n              @input=\"setScriptPosition(indexs, $event)\"\n              :value=\"getStyle('sceneScriptPosition', indexs)\"\n            />\n          </div>\n          <div class=\"px-2\">\n            <!--alignment-dropdown :value=\"scriptAlign\" /-->\n            <img src=\"@/assets/images/pages/align-left.svg\" alt=\"align-left\" />\n          </div>\n          <div class=\"px-2\">\n            <v-swatches\n              :value=\"getStyle('sceneScriptColor', indexs)\"\n              @input=\"setScriptColor(indexs, $event)\"\n              popover-x=\"right\"\n              popover-y=\"top\"\n              swatches=\"text-advanced\"\n            >\n              <div slot=\"trigger\"><h4 class=\"text-primary\">T</h4></div>\n            </v-swatches>\n          </div>\n          <div class=\"px-2\">\n            <v-swatches\n              :value=\"getStyle('sceneBackgroundColor', indexs)\"\n              @input=\"setBackgroundColor(indexs, $event)\"\n              popover-x=\"right\"\n              popover-y=\"top\"\n              swatches=\"text-advanced\"\n            >\n              <div\n                slot=\"trigger\"\n                class=\"bg-primary rounded-sm\"\n                style=\"width: 24px\"\n              >\n                <h4 class=\"text-white\">T</h4>\n              </div>\n            </v-swatches>\n          </div>\n          <div class=\"px-2\">\n            <vx-tooltip text=\"Remove Subtitles\">\n              <button\n                :disabled=\"!preparedScenesVideos[parseInt(indexs) + 1]\"\n                @click=\"removePreparedScene(indexs)\"\n                style=\"\n                  background: none;\n                  border: none;\n                  transform: translate(0px, 1px);\n                \"\n              >\n                <vs-icon\n                  type=\"filled\"\n                  icon=\"cancel\"\n                  :color=\"\n                    !preparedScenesVideos[parseInt(indexs) + 1] ? '' : 'primary'\n                  \"\n                  class=\"cursor-pointer\"\n                  size=\"24px\"\n                />\n              </button>\n            </vx-tooltip>\n          </div>\n        </div>\n        <!--div\n          v-if=\"parseInt(indexs) + 1 < sceneLength\"\n          class=\"flex items-center -mx-2 edit-transition px-2 p-1\"\n        >\n          <div class=\"mr-2\">\n            <h6 class=\"text-primary\">Transition</h6>\n          </div>\n          <transition-dropdown\n            @input=\"setSceneTransition(indexs, $event)\"\n            :value=\"getSceneTransition(indexs)\"\n          />\n        </div-->\n      </div>\n      <div class=\"items-left mb-3\">\n        <small class=\"items-left\">{{ $t('studio.course.c4') }}</small>\n        <p\n          contenteditable\n          :id=\"'scene_script_' + indexs\"\n          class=\"scene-text\"\n          style=\"white-space: normal\"\n        >\n          {{ s }}\n        </p>\n      </div>\n      <vs-button @click=\"prepareScene(indexs)\" :disabled=\"isVideoUrl(indexs)\"\n        >{{ $t('studio.course.c5') }} {{ parseInt(indexs) + 1 }}</vs-button\n      >\n    </vx-card>\n  </div>\n</template>\n\n<script>\nimport constants from '../../../constant';\nimport vSwatches from 'vue-swatches';\n// import vSelect from 'vue-select';\nimport 'vue-swatches/dist/vue-swatches.css';\n// import 'vue-select/dist/vue-select.css';\nimport VxTooltip from '../../layouts/components/vx-tooltip/VxTooltip.vue';\nimport PositionDropdown from './components/PositionDropdown.vue';\n// import AlignmentDropdown from './components/AlignmentDropdown';\n// import TransitionDropdown from './components/TransitionDropdown';\nexport default {\n  name: 'EditScenes',\n  data() {\n    return {\n      constants,\n      defaultStyle: {\n        sceneScriptColor: '#ffffff',\n        sceneScriptPosition: 3,\n        sceneBackgroundColor: '#674ea7',\n        transition_type: 'left_to_right'\n      },\n      scriptAlign: 'left'\n    };\n  },\n  components: {\n    vSwatches,\n    // vSelect,\n    VxTooltip,\n    PositionDropdown,\n    // AlignmentDropdown,\n    // TransitionDropdown\n  },\n  computed: {\n    preparedScenesVideos() {\n      return this.$store.state.studio.preparedScenesVideos;\n    },\n    selectedFromLibraryVideos() {\n      return this.$store.state.studio.selectedFromLibraryVideos;\n    },\n    styles() {\n      return this.$store.state.studio.styles;\n    }\n    /* sceneTransitionList() {\n      return this.$store.state.studio.sceneTransition;\n    },\n    sceneLength() {\n      return Object.keys(this.$store.state.studio.scenes).length;\n    }, */\n  },\n  methods: {\n    isImageUrl(urlString) {\n      try {\n        const imgExtentions = ['jpg', 'png', 'jpeg'];\n        urlString = new URL(urlString);\n        return imgExtentions.includes(urlString.pathname.split('.')[1]);\n      } catch (err) {\n        return false;\n      }\n    },\n    scriptInput(e) {\n      this.$store.commit('studio/editSceneScript', e.target.innerText);\n    },\n    isVideoUrl(indexs) {\n      const videoUrl = this.selectedFromLibraryVideos[parseInt(indexs) + 1];\n      if (videoUrl) {\n        const url = videoUrl.split('.');\n        if (url[url.length - 1] === 'gif') return true;\n        return false;\n      }\n      return true;\n    },\n    getStyle(prop, idx) {\n      idx = parseInt(idx);\n      if (!this.styles[idx] || !this.styles[idx][prop]) {\n        this.$store.commit('studio/setStyles', {\n          prop: prop,\n          sceneNum: idx,\n          value: this.defaultStyle[prop]\n        });\n      }\n      return this.styles[idx][prop];\n    },\n    setScriptColor(idx, value) {\n      this.$store.commit('studio/setStyles', {\n        prop: 'sceneScriptColor',\n        sceneNum: parseInt(idx),\n        value: value\n      });\n    },\n    setScriptPosition(idx, value) {\n      console.log({ sceneNum: idx, pos: value });\n      this.$store.commit('studio/setStyles', {\n        prop: 'sceneScriptPosition',\n        sceneNum: parseInt(idx),\n        value: value\n      });\n    },\n    setBackgroundColor(idx, value) {\n      this.$store.commit('studio/setStyles', {\n        prop: 'sceneBackgroundColor',\n        sceneNum: parseInt(idx),\n        value: value\n      });\n    },\n    setScriptAlignment(idx, value) {\n      this.$store.commit('studio/setStyles', {\n        prop: 'transition_type',\n        sceneNum: parseInt(idx),\n        value: value\n      });\n    },\n    /* setSceneTransition(idx, value) {\n      this.$store.commit('studio/setTransition', {\n        sceneNum: parseInt(idx),\n        value,\n      });\n    },\n    getSceneTransition(idx) {\n      if (this.sceneTransitionList[parseInt(idx)])\n        return this.sceneTransitionList[parseInt(idx)];\n      else {\n        this.setSceneTransition(idx, 'no_motion');\n        return 'no_motion';\n      }\n    }, */\n    removePreparedScene(indexs) {\n      this.$store.commit('studio/setScriptSceneVideo', {\n        sceneNum: parseInt(indexs) + 1,\n        value: null\n      });\n    },\n    async prepareScene(indexs) {\n      this.$vs.loading({\n        background: '#fff',\n        container: `#scene_card_${indexs}`,\n        text: 'Adding Subtitles...'\n      });\n      this.$store.commit('studio/editSceneScript', {\n        value: document.getElementById('scene_script_' + indexs).innerText,\n        sceneNum: parseInt(indexs)\n      });\n      const dataObj = {\n        url: this.$store.state.studio.selectedFromLibraryVideos[\n          parseInt(indexs) + 1\n        ],\n        sceneScript: this.$store.state.studio.scenes[parseInt(indexs)],\n        bg_opacity: 0.8,\n        transition_type: 'right_to_left',\n        ...this.styles[indexs]\n      };\n      this.$store\n        .dispatch('studio/editSceneScript', dataObj)\n        .then(res => {\n          const response = {\n            sceneNum: parseInt(indexs) + 1,\n            value: res.data.video_url\n          };\n          this.$store.commit('studio/setScriptSceneVideo', response);\n          // this.$store.commit('studio/selectVideo', res.data.url);\n          console.log('edit scene script', res.data.url);\n          // dataObj.video = res.data.url;\n          // console.log(dataObj);\n          this.$forceUpdate();\n          /* this.$Progress.finish();\n          this.$vs.loading.close(); */\n          this.updateComponent();\n        })\n        .catch(err => {\n          console.log('edit scene script', err);\n          /* this.$Progress.fail();\n          this.$vs.loading.close(); */\n          this.$vs.notify({\n            title: 'Error',\n            text: 'Cannot merge script with video',\n            color: 'danger'\n          });\n        })\n        .finally(() => {\n          this.$vs.loading.close(`#scene_card_${indexs} > .con-vs-loading`);\n        });\n    },\n    updateComponent() {\n      this.$forceUpdate();\n    },\n    updateScroll() {\n      // let scrollPosition = window.scrollY\n      // console.log(scrollPosition)\n      for (const s in this.$store.state.studio.scenes) {\n        const rect = document\n          .getElementById('scene_card_' + s)\n          .getBoundingClientRect();\n        // console.log(s, \"bounding client\", rect.top, rect.bottom);\n\n        if (rect.top < 200 && rect.bottom > 500) {\n          // console.log(s+\" is active\")\n          this.$store.commit('studio/setActiveScene', parseInt(s) + 1);\n        }\n      }\n    }\n  },\n  mounted() {\n    window.addEventListener('scroll', this.updateScroll);\n    const el = document.getElementById(\n      `scene_card_${this.$store.state.studio.currentActiveScene - 1}`\n    );\n    el.scrollIntoView({ block: 'center' });\n  },\n  destroyed() {\n    window.removeEventListener('scroll', this.updateScroll);\n  }\n};\n</script>\n\n<style scoped>\n.vs-con-loading__container {\n  z-index: 20 !important;\n}\n.scene-card {\n  min-height: 30rem;\n  opacity: 0.2;\n  box-shadow: none;\n  margin-bottom: 10rem;\n}\n.scene-video {\n  margin: -1.3rem -1.3rem 0;\n}\n.activeScene {\n  box-shadow: 0px 4px 25px 0px rgba(0, 0, 0, 0.1) !important;\n  -webkit-box-shadow: 0px 4px 25px 0px rgba(0, 0, 0, 0.1) !important;\n  opacity: 1 !important;\n}\n.items-left {\n  text-align: left;\n  text-align: -moz-left;\n  text-align: -webkit-left;\n}\n.items-right {\n  text-align: right;\n  text-align: -moz-right;\n  text-align: -webkit-right;\n}\n.scene-text {\n  border: 1px solid gray;\n  border-radius: 3px;\n  padding: 0.5rem;\n}\n.edit-subtitles {\n  background: rgba(107, 77, 189, 0.06);\n  border-radius: 4px;\n  padding: 5px;\n}\n.edit-transition {\n  background: rgba(107, 77, 189, 0.06);\n  border-radius: 4px;\n}\n</style>\n"]}]}