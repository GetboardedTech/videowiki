{"remainingRequest":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/components/vx-auto-suggest/VxAutoSuggest.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/components/vx-auto-suggest/VxAutoSuggest.vue","mtime":1617441534121},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import '@/assets/scss/vuexy/components/vxAutoSuggest.scss';\n",{"version":3,"sources":["VxAutoSuggest.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmRA","file":"VxAutoSuggest.vue","sourceRoot":"src/components/vx-auto-suggest","sourcesContent":["<template>\n  <div class=\"vx-auto-suggest\">\n    <div class=\"flex items-center relative\">\n      <!-- Input -->\n      <vs-input\n        ref=\"input\"\n        :placeholder=\"placeholder\"\n        :class=\"inputClassses\"\n        class=\"z-50\"\n        icon-pack=\"feather\"\n        icon=\"icon-search\"\n        icon-no-border\n        v-model=\"searchQuery\"\n        @keyup.esc=\"escPressed\"\n        @keyup.up=\"increaseIndex(false)\"\n        @keyup.down=\"increaseIndex\"\n        @keyup.enter=\"suggestionSelected\"\n        @focus=\"updateInputFocus\"\n        @blur=\"updateInputFocus(false)\"\n      />\n    </div>\n\n    <!-- Group List -->\n    <ul\n      ref=\"scrollContainer\"\n      :class=\"{ hidden: !inputFocused }\"\n      class=\"auto-suggest-suggestions-list z-50 rounded-lg mt-2 shadow-lg overflow-x-hidden\"\n      @mouseenter=\"insideSuggestions = true\"\n      @mouseleave=\"insideSuggestions = false\"\n      @focus=\"updateInputFocus\"\n      @blur=\"updateInputFocus(false)\"\n      tabindex=\"-1\"\n    >\n      <li\n        ref=\"grp_list\"\n        v-for=\"(suggestion_list, grp_name, grp_index) in filteredData\"\n        :key=\"grp_index\"\n        class=\"auto-suggest__suggestion-group-container\"\n      >\n        <!-- Group Header -->\n        <p\n          class=\"auto-suggest__suggestion-group-title pt-3 pb-1 px-4\"\n          v-if=\"!hideGroupTitle\"\n        >\n          <slot name=\"group\" :group_name=\"grp_name\"></slot>\n        </p>\n\n        <!-- Suggestion List of each group -->\n        <ul>\n          <li\n            v-for=\"(suggestion, index) in suggestion_list\"\n            :key=\"index\"\n            class=\"auto-suggest__suggestion-group__suggestion py-3 px-4 cursor-pointer\"\n            :class=\"{\n              'vx-auto-suggest__current-selected':\n                currentSelected == `${grp_index}.${index}`\n            }\"\n            @mouseenter=\"currentSelected = `${grp_index}.${index}`\"\n            @click=\"suggestionSelected\"\n          >\n            <slot :name=\"grp_name\" :suggestion=\"suggestion\"></slot>\n          </li>\n\n          <li\n            class=\"auto-suggest__suggestion-group__suggestion py-3 px-4 no-results\"\n            v-if=\"!suggestion_list.length && searchQuery\"\n          >\n            <slot name=\"noResult\" :group_name=\"grp_name\">\n              <p>No Results Found.</p>\n            </slot>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    placeholder: {\n      type: String,\n      default: 'Search..'\n    },\n    data: {\n      type: Object,\n      required: true\n    },\n    initalData: {\n      type: Object,\n      default: () => new Object()\n    },\n    inputClassses: {\n      type: [String, Object, Array]\n    },\n    autoFocus: {\n      type: Boolean,\n      default: false\n    },\n    showPinned: {\n      type: Boolean,\n      default: false\n    },\n    searchLimit: {\n      type: Number,\n      default: 4\n    },\n    hideGroupTitle: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      searchQuery: '',\n      filteredData: {},\n      currentSelected: -1,\n      inputFocused: false,\n      insideSuggestions: false\n    };\n  },\n  watch: {\n    // UPDATE SUGGESTIONS LIST\n    searchQuery(val) {\n      this.$emit('input', val);\n\n      if (val == '') {\n        this.inputInit();\n      } else {\n        const queried_data = {};\n        const data_grps = Object.keys(this.data);\n\n        data_grps.forEach((grp, i) => {\n          queried_data[data_grps[i]] = this.filter_grp(this.data[grp]);\n        });\n\n        // Check if any of group has at least one queried item\n        if (!Object.values(queried_data).some(obj => obj.length)) {\n          this.currentSelected = -1;\n        }\n\n        this.filteredData = queried_data;\n      }\n    },\n    autoFocus(val) {\n      if (val) this.focusInput();\n      else this.searchQuery = '';\n    },\n    filteredData(val) {\n      // Auto Select first item if it's not item-404\n      let grp_index = null;\n\n      for (const [index, grp_suggestions] of Object.values(val).entries()) {\n        if (grp_suggestions.length) {\n          grp_index = index;\n          break;\n        }\n      }\n\n      if (grp_index != null) this.currentSelected = grp_index + '.0';\n    }\n  },\n  methods: {\n    escPressed() {\n      this.$emit('closeSearchbar');\n      this.searchQuery = '';\n    },\n    filter_grp(grp) {\n      const exactEle = grp.data.filter(item => {\n        return item[grp.key]\n          .toLowerCase()\n          .startsWith(this.searchQuery.toLowerCase());\n      });\n      const containEle = grp.data.filter(item => {\n        return (\n          !item[grp.key]\n            .toLowerCase()\n            .startsWith(this.searchQuery.toLowerCase()) &&\n          item[grp.key].toLowerCase().indexOf(this.searchQuery.toLowerCase()) >\n            -1\n        );\n      });\n      return exactEle.concat(containEle).slice(0, this.searchLimit);\n    },\n    inputInit() {\n      if (\n        Object.entries(this.initalData).length === 0 &&\n        this.initalData.constructor === Object\n      ) {\n        this.filteredData = {};\n      } else {\n        this.filteredData = this.initalData;\n      }\n    },\n    updateInputFocus(val = true) {\n      if (val) {\n        if (this.searchQuery == '') this.inputInit();\n        setTimeout(() => {\n          this.inputFocused = true;\n        }, 100);\n      } else {\n        if (this.insideSuggestions) return;\n        setTimeout(() => {\n          this.inputFocused = false;\n        }, 100);\n        this.escPressed();\n      }\n    },\n    suggestionSelected() {\n      if (this.currentSelected > -1) {\n        const [grp_index, item_index] = this.currentSelected.split('.');\n\n        const grp_of_selected_item = Object.keys(this.data)[grp_index];\n        const selected_item = this.filteredData[grp_of_selected_item][\n          item_index\n        ];\n\n        this.$emit('selected', { [grp_of_selected_item]: selected_item });\n\n        this.searchQuery = '';\n      }\n    },\n    increaseIndex(val = true) {\n      // If there's no matching items\n      if (!Object.values(this.filteredData).some(grp_items => grp_items.length))\n        return;\n\n      const [grp_i, item_i] = this.currentSelected.split('.');\n\n      const grp_arr = Object.entries(this.filteredData);\n      const active_grp_total_items = grp_arr[grp_i][1].length;\n\n      if (val) {\n        // If active item is not of last item in grp\n        if (active_grp_total_items - 1 > item_i) {\n          this.currentSelected = grp_i + '.' + (Number(item_i) + 1);\n\n          // If active item grp is not last in grp list\n        } else if (grp_i < grp_arr.length - 1) {\n          for (let i = Number(grp_i) + 1; i < grp_arr.length; i++) {\n            // If navigating group have items => Then move in that group\n            if (grp_arr[i][1].length > 0) {\n              this.currentSelected = Number(i) + '.0';\n              break;\n            }\n          }\n        }\n      } else {\n        // If active item is not of first item in grp\n        if (Number(item_i)) {\n          this.currentSelected = grp_i + '.' + (Number(item_i) - 1);\n\n          // If active item grp  is not first in grp list\n        } else if (Number(grp_i)) {\n          for (let i = Number(grp_i) - 1; i >= 0; i--) {\n            // If navigating group have items => Then move in that group\n            if (grp_arr[i][1].length > 0) {\n              this.currentSelected = i + '.' + (grp_arr[i][1].length - 1);\n              break;\n            }\n          }\n        }\n      }\n    },\n    focusInput() {\n      this.$refs.input.$el.querySelector('input').focus();\n    }\n  },\n  mounted() {\n    if (this.autoFocus) this.focusInput();\n  }\n};\n</script>\n\n<style lang=\"scss\">\n@import '@/assets/scss/vuexy/components/vxAutoSuggest.scss';\n</style>\n"]}]}