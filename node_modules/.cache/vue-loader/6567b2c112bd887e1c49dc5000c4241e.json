{"remainingRequest":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/views/pages/components/ExternalUrl.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/views/pages/components/ExternalUrl.vue","mtime":1617441641275},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'ExternalUrl',\n  data() {\n    return {\n      extractionInProgress: false,\n      contentUrl: ''\n    };\n  },\n  methods: {\n    fetchText() {\n      this.extractionInProgress = true;\n      this.$vs.loading({\n        background: 'primary',\n        color: '#fff',\n        container: '#url-with-loading',\n        scale: 0.4\n      });\n      this.$store\n        .dispatch('studio/extractInfoFromUrl', {\n          url: this.contentUrl,\n          ext: null\n        })\n        .then(data => {\n          this.handleApiResponse(data);\n        })\n        .catch(() => {\n          this.$vs.notify({\n            title: 'Invalid URL',\n            text: 'No text found',\n            color: 'danger'\n          });\n        })\n        .finally(() => {\n          this.extractionInProgress = false;\n          this.$vs.loading.close('#url-with-loading > .con-vs-loading');\n        });\n    },\n    handleApiResponse(data) {\n      this.$store.commit('studio/setInitialState');\n      if (data.slides) {\n        const scenes = {};\n        const videos = {};\n        const images = {};\n        const keywords = {};\n        this.$store.commit('studio/SET_VIDEO_ATTR', {\n          key: 'fromPPT',\n          value: true\n        });\n        let script = '';\n        Object.values(data.slides).forEach(({ img_path, text }, index) => {\n          scenes[index] = '*No notes found in this slide*';\n          videos[index] = '';\n          images[index] = { 0: [img_path, 'slide', 'slide'] };\n          keywords[index] = [];\n          script += text;\n          this.$store.commit('studio/setInitialVideo', {\n            indexs: index,\n            value: img_path\n          });\n        });\n        this.$store.commit('studio/setSentences', scenes);\n        this.$store.commit('studio/setVideos', videos);\n        this.$store.commit('studio/setKeywords', keywords);\n        this.$store.commit('studio/setImages', images);\n        this.$store.commit('studio/setScript', script);\n      }\n      if (data.title) {\n        this.$store.commit('studio/SET_VIDEO_ATTR', {\n          key: 'title',\n          value: data.title\n        });\n      }\n      if (data.text) {\n        this.$store.commit('studio/setScript', data.text);\n      }\n      if (!this.uploadedDocumentIsPPT) {\n        this.$store.commit('studio/SET_TAB_INDEX', 0);\n      } else setTimeout(() => this.$store.commit('studio/toggleLibrary'), 1000);\n    }\n  }\n};\n",{"version":3,"sources":["ExternalUrl.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ExternalUrl.vue","sourceRoot":"src/views/pages/components","sourcesContent":["<template>\n  <vx-card title=\"Create Video From URL\">\n    <div class=\"url-wrapper\">\n      <div>\n        <h4 class=\"mb-2 font-bold\" style=\"color: #6A6874;\">\n          Enter your URL Here\n        </h4>\n        <p style=\"color: #6a6874; white-space: normal\" class=\"mb-base\">\n          You can submit medium Link & blog Link etc.\n        </p>\n        <vx-input-group class=\"mb-4 text-left\">\n          <vs-input\n            v-model=\"contentUrl\"\n            class=\"text-primary\"\n            placeholder=\"Paste URL here\"\n            :disabled=\"extractionInProgress\"\n          />\n          <template slot=\"append\">\n            <div class=\"append-text btn-addon\">\n              <vs-button\n                color=\"primary\"\n                class=\"vs-con-loading__container\"\n                id=\"url-with-loading\"\n                :disabled=\"extractionInProgress\"\n                @click=\"fetchText\"\n                >Go</vs-button\n              >\n            </div>\n          </template>\n        </vx-input-group>\n      </div>\n    </div>\n  </vx-card>\n</template>\n<script>\nexport default {\n  name: 'ExternalUrl',\n  data() {\n    return {\n      extractionInProgress: false,\n      contentUrl: ''\n    };\n  },\n  methods: {\n    fetchText() {\n      this.extractionInProgress = true;\n      this.$vs.loading({\n        background: 'primary',\n        color: '#fff',\n        container: '#url-with-loading',\n        scale: 0.4\n      });\n      this.$store\n        .dispatch('studio/extractInfoFromUrl', {\n          url: this.contentUrl,\n          ext: null\n        })\n        .then(data => {\n          this.handleApiResponse(data);\n        })\n        .catch(() => {\n          this.$vs.notify({\n            title: 'Invalid URL',\n            text: 'No text found',\n            color: 'danger'\n          });\n        })\n        .finally(() => {\n          this.extractionInProgress = false;\n          this.$vs.loading.close('#url-with-loading > .con-vs-loading');\n        });\n    },\n    handleApiResponse(data) {\n      this.$store.commit('studio/setInitialState');\n      if (data.slides) {\n        const scenes = {};\n        const videos = {};\n        const images = {};\n        const keywords = {};\n        this.$store.commit('studio/SET_VIDEO_ATTR', {\n          key: 'fromPPT',\n          value: true\n        });\n        let script = '';\n        Object.values(data.slides).forEach(({ img_path, text }, index) => {\n          scenes[index] = '*No notes found in this slide*';\n          videos[index] = '';\n          images[index] = { 0: [img_path, 'slide', 'slide'] };\n          keywords[index] = [];\n          script += text;\n          this.$store.commit('studio/setInitialVideo', {\n            indexs: index,\n            value: img_path\n          });\n        });\n        this.$store.commit('studio/setSentences', scenes);\n        this.$store.commit('studio/setVideos', videos);\n        this.$store.commit('studio/setKeywords', keywords);\n        this.$store.commit('studio/setImages', images);\n        this.$store.commit('studio/setScript', script);\n      }\n      if (data.title) {\n        this.$store.commit('studio/SET_VIDEO_ATTR', {\n          key: 'title',\n          value: data.title\n        });\n      }\n      if (data.text) {\n        this.$store.commit('studio/setScript', data.text);\n      }\n      if (!this.uploadedDocumentIsPPT) {\n        this.$store.commit('studio/SET_TAB_INDEX', 0);\n      } else setTimeout(() => this.$store.commit('studio/toggleLibrary'), 1000);\n    }\n  }\n};\n</script>\n<style scoped>\n.url-wrapper {\n  height: 400px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 10px;\n  border: 1px solid rgba(114, 71, 196, 0.16);\n  border-radius: 6px;\n}\n</style>\n"]}]}