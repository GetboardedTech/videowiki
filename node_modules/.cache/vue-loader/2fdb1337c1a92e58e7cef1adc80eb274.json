{"remainingRequest":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/views/register/RegisterJWT.vue?vue&type=style&index=0&id=005920b2&scoped=true&lang=css&","dependencies":[{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/views/register/RegisterJWT.vue","mtime":1617441641275},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.modified-input {\n  height: 60px;\n  border: none;\n  /* border-radius: 16px; */\n  background: #f3f3f3;\n  font-family: Montserrat;\n  border-radius: 4px;\n  padding: 2rem;\n  width: 100%;\n}\n.input-icon {\n  position: absolute;\n  right: 5%;\n  bottom: 30%;\n  cursor: pointer;\n}\n",{"version":3,"sources":["RegisterJWT.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"RegisterJWT.vue","sourceRoot":"src/views/register","sourcesContent":["<template>\n  <div>\n    <form>\n      <div class=\"flex mb-6\">\n        <div class=\"w-1/2 mr-2\">\n          <h6 class=\"mb-4\">First Name<span class=\"text-danger\">*</span></h6>\n          <input\n            type=\"text\"\n            placeholder=\"Enter First Name\"\n            class=\"modified-input\"\n            autocomplete=\"off\"\n            v-model=\"firstName\"\n          />\n        </div>\n        <div class=\"w-1/2\">\n          <h6 class=\"mb-4\">Last Name<span class=\"text-danger\">*</span></h6>\n          <input\n            type=\"text\"\n            placeholder=\"Enter Last Name\"\n            class=\"modified-input\"\n            autocomplete=\"off\"\n            v-model=\"lastName\"\n          />\n        </div>\n      </div>\n      <div class=\"vx-row mb-6\">\n        <div class=\"vx-col w-full\">\n          <h6 class=\"mb-4\">Email<span class=\"text-danger\">*</span></h6>\n          <input\n            type=\"email\"\n            placeholder=\"Enter email address\"\n            class=\"modified-input\"\n            autocomplete=\"off\"\n            v-model=\"email\"\n          />\n        </div>\n      </div>\n      <div class=\"vx-row mb-6\">\n        <div class=\"vx-col w-full\">\n          <h6 class=\"mb-4\">\n            Create Password<span class=\"text-danger\">*</span>\n          </h6>\n          <div class=\"flex relative\">\n            <input\n              :type=\"create_showPassword ? 'text' : 'password'\"\n              placeholder=\"Enter password\"\n              class=\"modified-input\"\n              autocomplete=\"off\"\n              v-model=\"password\"\n            />\n            <vs-icon\n              :icon=\"create_showPassword ? 'visibility_off' : 'visibility'\"\n              class=\"input-icon\"\n              @click=\"create_showPassword = !create_showPassword\"\n              size=\"25px\"\n            />\n          </div>\n        </div>\n      </div>\n      <div class=\"vx-row mb-6\">\n        <div class=\"vx-col w-full\">\n          <h6 class=\"mb-4\">\n            Repeat Password<span class=\"text-danger\">*</span>\n          </h6>\n          <div class=\"flex relative\">\n            <input\n              :type=\"repeat_showPassword ? 'text' : 'password'\"\n              placeholder=\"Enter password\"\n              class=\"modified-input\"\n              autocomplete=\"off\"\n              v-model=\"confirm_password\"\n            />\n            <vs-icon\n              :icon=\"repeat_showPassword ? 'visibility_off' : 'visibility'\"\n              class=\"input-icon\"\n              @click=\"repeat_showPassword = !repeat_showPassword\"\n              size=\"25px\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <vs-checkbox v-model=\"isTermsConditionAccepted\" class=\"mt-6\"\n        >I accept the terms & conditions.</vs-checkbox\n      >\n      <div class=\"flex flex-wrap mb-3\">\n        <vs-button\n          class=\"mt-6 flex-1 font-bold h-16\"\n          :disabled=\"!validateForm\"\n          @click.prevent=\"registerUserJWt\"\n        >\n          Create Account</vs-button\n        >\n      </div>\n    </form>\n    <div class=\"flex flex-wrap mb-3 justify-center\">\n      <!--div class=\"flex-1\"-->\n      Do you already have an account?\n      <span class=\"ml-1 text-primary cursor-pointer\" @click=\"navigateToLogin\"\n        >Login</span\n      >\n      <!--/div-->\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    popup: {\n      type: Boolean,\n      default: false,\n      required: false\n    }\n  },\n  data() {\n    return {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      confirm_password: '',\n      create_showPassword: false,\n      repeat_showPassword: false,\n      isTermsConditionAccepted: true\n    };\n  },\n  computed: {\n    validateForm() {\n      return (\n        !this.errors.any() &&\n        this.firstName !== '' &&\n        this.lastName !== '' &&\n        this.email !== '' &&\n        this.password !== '' &&\n        this.confirm_password !== '' &&\n        this.isTermsConditionAccepted === true\n      );\n    }\n  },\n  methods: {\n    checkLogin() {\n      // If user is already logged in notify\n      if (this.$store.state.auth.isUserLoggedIn()) {\n        // Close animation if passed as payload\n        // this.$vs.loading.close()\n\n        this.$vs.notify({\n          title: 'Login Attempt',\n          text: 'You are already logged in!',\n          iconPack: 'feather',\n          icon: 'icon-alert-circle',\n          color: 'warning'\n        });\n\n        return false;\n      }\n      return true;\n    },\n    registerUserJWt() {\n      // If form is not validated or user is already login return\n      if (!this.validateForm || !this.checkLogin()) return;\n\n      this.$vs.loading();\n\n      const payload = {\n        userDetails: {\n          firstName: this.firstName,\n          lastName: this.lastName,\n          email: this.email,\n          password: this.password,\n          confirmPassword: this.confirm_password\n        },\n        notify: this.$vs.notify\n      };\n      this.$store\n        .dispatch('auth/registerUser', payload)\n        .then(response => {\n          const payload = {\n            checkbox_remember_me: true,\n            userDetails: {\n              email: this.email,\n              password: this.password\n            }\n          };\n\n          this.$store\n            .dispatch('auth/login', payload)\n            .then(() => {\n              this.$vs.loading.close();\n              // window.location.href = '/';\n              this.$acl.change('user');\n              if (this.popup) this.$emit('registered');\n              else this.$router.push('/');\n            })\n            .catch(error => {\n              this.$vs.loading.close();\n              this.$vs.notify({\n                title: 'Login Error',\n                text: error.message,\n                iconPack: 'feather',\n                icon: 'icon-alert-circle',\n                color: 'danger'\n              });\n            });\n        })\n        .catch(error => {\n          this.$vs.loading.close();\n          this.$vs.notify({\n            title: 'Register Error',\n            text: error.message,\n            iconPack: 'feather',\n            icon: 'icon-alert-circle',\n            color: 'danger'\n          });\n        });\n    },\n    navigateToLogin() {\n      if (this.popup) this.$emit('toLogin');\n      else this.$router.push('/login');\n    }\n  }\n};\n</script>\n<style scoped>\n.modified-input {\n  height: 60px;\n  border: none;\n  /* border-radius: 16px; */\n  background: #f3f3f3;\n  font-family: Montserrat;\n  border-radius: 4px;\n  padding: 2rem;\n  width: 100%;\n}\n.input-icon {\n  position: absolute;\n  right: 5%;\n  bottom: 30%;\n  cursor: pointer;\n}\n</style>\n<!-- =========================================================================================\nFile Name: RegisterJWT.vue\nDescription: Register Page for JWT\n----------------------------------------------------------------------------------------\nItem Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\n  Author: Pixinvent\nAuthor URL: http://www.themeforest.net/user/pixinvent\n========================================================================================== -->\n\n<!--template>\n  <div class=\"clearfix\">\n    <vs-input\n      v-validate=\"'required|alpha_dash|min:3'\"\n      data-vv-validate-on=\"blur\"\n      label-placeholder=\"First Name\"\n      name=\"firstName\"\n      placeholder=\"First Name\"\n      v-model=\"firstName\"\n      class=\"w-full\"\n    />\n    <span class=\"text-danger text-sm\">{{ errors.first('firstName') }}</span>\n\n    <vs-input\n      v-validate=\"'required|alpha_dash|min:3'\"\n      data-vv-validate-on=\"blur\"\n      label-placeholder=\"Last Name\"\n      name=\"lastName\"\n      placeholder=\"Last Name\"\n      v-model=\"lastName\"\n      class=\"w-full\"\n    />\n    <span class=\"text-danger text-sm\">{{ errors.first('lastName') }}</span>\n\n    <vs-input\n      v-validate=\"'required|email'\"\n      data-vv-validate-on=\"blur\"\n      name=\"email\"\n      type=\"email\"\n      label-placeholder=\"Email\"\n      placeholder=\"Email\"\n      v-model=\"email\"\n      class=\"w-full mt-6\"\n    />\n    <span class=\"text-danger text-sm\">{{ errors.first('email') }}</span>\n\n    <vs-input\n      ref=\"password\"\n      type=\"password\"\n      data-vv-validate-on=\"blur\"\n      v-validate=\"'required|min:6|max:10'\"\n      name=\"password\"\n      label-placeholder=\"Password\"\n      placeholder=\"Password\"\n      v-model=\"password\"\n      class=\"w-full mt-6\"\n    />\n    <span class=\"text-danger text-sm\">{{ errors.first('password') }}</span>\n\n    <vs-input\n      type=\"password\"\n      v-validate=\"'min:6|max:10|confirmed:password'\"\n      data-vv-validate-on=\"blur\"\n      data-vv-as=\"password\"\n      name=\"confirm_password\"\n      label-placeholder=\"Confirm Password\"\n      placeholder=\"Confirm Password\"\n      v-model=\"confirm_password\"\n      class=\"w-full mt-6\"\n    />\n    <span class=\"text-danger text-sm\">{{\n      errors.first('confirm_password')\n    }}</span>\n\n    <vs-checkbox v-model=\"isTermsConditionAccepted\" class=\"mt-6\"\n      >I accept the terms & conditions.</vs-checkbox\n    >\n    <vs-button class=\"mt-6\" @click=\"registerUserJWt\" :disabled=\"!validateForm\"\n      >Register</vs-button\n    >\n    <vs-button type=\"border\" to=\"/login\" class=\"float-right mt-6\"\n      >Login</vs-button\n    >\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      confirm_password: '',\n      isTermsConditionAccepted: true\n    };\n  },\n  computed: {\n    validateForm() {\n      return (\n        !this.errors.any() &&\n        this.displayName !== '' &&\n        this.email !== '' &&\n        this.password !== '' &&\n        this.confirm_password !== '' &&\n        this.isTermsConditionAccepted === true\n      );\n    }\n  },\n  methods: {\n    checkLogin() {\n      // If user is already logged in notify\n      if (this.$store.state.auth.isUserLoggedIn()) {\n        // Close animation if passed as payload\n        // this.$vs.loading.close()\n\n        this.$vs.notify({\n          title: 'Login Attempt',\n          text: 'You are already logged in!',\n          iconPack: 'feather',\n          icon: 'icon-alert-circle',\n          color: 'warning'\n        });\n\n        return false;\n      }\n      return true;\n    },\n    registerUserJWt() {\n      // If form is not validated or user is already login return\n      if (!this.validateForm || !this.checkLogin()) return;\n\n      this.$vs.loading();\n\n      const payload = {\n        userDetails: {\n          firstName: this.firstName,\n          lastName: this.lastName,\n          email: this.email,\n          password: this.password,\n          confirmPassword: this.confirm_password\n        },\n        notify: this.$vs.notify\n      };\n      this.$store\n        .dispatch('auth/registerUser', payload)\n        .then(response => {\n          const payload = {\n            checkbox_remember_me: true,\n            userDetails: {\n              email: this.email,\n              password: this.password\n            }\n          };\n\n          this.$store\n            .dispatch('auth/login', payload)\n            .then(() => {\n              this.$vs.loading.close();\n              window.location.href = '/dashboard';\n            })\n            .catch(error => {\n              this.$vs.loading.close();\n              this.$vs.notify({\n                title: 'Login Error',\n                text: error.message,\n                iconPack: 'feather',\n                icon: 'icon-alert-circle',\n                color: 'danger'\n              });\n            });\n        })\n        .catch(error => {\n          this.$vs.loading.close();\n          this.$vs.notify({\n            title: 'Register Error',\n            text: error.message,\n            iconPack: 'feather',\n            icon: 'icon-alert-circle',\n            color: 'danger'\n          });\n        });\n    }\n  }\n};\n</script-->\n"]}]}