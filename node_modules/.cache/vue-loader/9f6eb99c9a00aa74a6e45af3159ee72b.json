{"remainingRequest":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/views/components/Transaction/components/Processing.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/views/components/Transaction/components/Processing.vue","mtime":1617441641271},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'Processing',\n  props: ['txType'],\n  data() {\n    return {\n      transaction: {\n        Publish: [\n          {\n            title: 'Create a Content ID',\n            description:\n              'Assign a unique identifier to your content. Write it on decentralized ledger.',\n            success: 'Data-Token is created'\n          },\n          {\n            title: 'Publish on MarketPlace',\n            description:\n              'Publishing the asset on marketplace with your unique Decentralized ID (called a DID or DDO)',\n            success: 'Asset published to OCEAN'\n          },\n          {\n            title: 'Create link for Paid Access',\n            description:\n              ' Creating access tokens for the published content, using which people will buy/fork your content.',\n            success: 'Tokens Minted'\n          },\n          {\n            title: 'Permission to sell your content',\n            description:\n              'Note that we published content under your name with full rights to the content. Hence we need your permission to sell the access token on your behalf.',\n            success: 'Approved'\n          },\n          {\n            title: 'Create Exchange Key',\n            description: 'Creating an exchange to sell the access token',\n            success: 'Exchange Created. Publish Complete'\n          }\n        ],\n        Buy: [\n          {\n            title: 'Permission to exchange your OCEAN tokens',\n            description:\n              'We need your permission so that we can exchange your OCEAN tokens for the datatokens',\n            success: 'Approved'\n          },\n          {\n            title: 'Swaping your token',\n            description: 'Calling smart contract to exchange the tokens',\n            success: 'Token Swapped'\n          }\n        ],\n        Download: [\n          {\n            title:\n              'Start download service and sign the transaction to start the download process',\n            description:\n              'Register your account to the download service and if already registered, sign using metamask to authenticate your account.',\n            success: 'Download Started'\n          }\n          /* {\n            title: 'Sign the transaction to authenticate yourself',\n            description: '',\n            success: '',\n          }, */\n        ]\n      }\n    };\n  },\n  computed: {\n    currentTransactionStep() {\n      return this.$store.state.currentTransactionStep;\n    },\n    transactionSteps() {\n      return this.transaction[this.txType];\n    }\n  },\n  mounted() {\n    this.$vs.loading({\n      container: '#transaction-step-1',\n      background: 'transparent',\n      color: 'success',\n      scale: 0.8\n    });\n  },\n  watch: {\n    currentTransactionStep: function(newVal, oldVal) {\n      this.$vs.loading.close(`#transaction-step-${oldVal} > .con-vs-loading`);\n      if (newVal <= this.transactionSteps.length) {\n        this.$vs.loading({\n          container: `#transaction-step-${newVal}`,\n          background: 'transparent',\n          color: 'success',\n          scale: 0.8\n        });\n      }\n    }\n  },\n  beforeDestroy() {\n    if (this.currentTransactionStep <= this.transactionSteps.length) {\n      this.$vs.loading.close(\n        `#transaction-step-${this.currentTransactionStep} > .con-vs-loading`\n      );\n    }\n  }\n};\n",{"version":3,"sources":["Processing.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"Processing.vue","sourceRoot":"src/views/components/Transaction/components","sourcesContent":["<template>\n  <div>\n    <div class=\"px-2\">\n      <h2 class=\"font-extrabold\">Transaction Processing</h2>\n      <p class=\"font-medium mb-8 text-custom-black\">\n        Please don't close this tab, transaction under processing.\n      </p>\n    </div>\n    <vs-divider />\n    <template v-for=\"(step, idx) in transactionSteps\">\n      <div class=\"flex items-center -mx-1 px-2 mb-4\" :key=\"`step_${idx}`\">\n        <div class=\"px-1\">\n          <vs-avatar\n            v-if=\"idx + 1 < currentTransactionStep\"\n            color=\"success\"\n            icon=\"done\"\n            size=\"40px\"\n            class=\"currentStep\"\n          />\n          <vs-avatar\n            v-else\n            color=\"#ffffff\"\n            :text=\"`${idx + 1}`\"\n            :textColor=\"\n              idx + 1 === currentTransactionStep ? 'success' : '#ADB2B9'\n            \"\n            :id=\"`transaction-step-${idx + 1}`\"\n            class=\"font-bold step-bullet vs-con-loading__container\"\n            :class=\"{ currentStep: currentTransactionStep === idx + 1 }\"\n            size=\"40px\"\n          />\n        </div>\n        <div class=\"px-1\">\n          <template v-if=\"idx + 1 < currentTransactionStep\">\n            <h6 class=\"Center\">{{ step.success }}</h6>\n          </template>\n          <template v-else>\n            <h6\n              :class=\"{\n                inActiveStep: idx + 1 > currentTransactionStep,\n                Center: idx + 1 !== currentTransactionStep\n              }\"\n            >\n              {{ step.title }}\n            </h6>\n            <p class=\"text-xs mt-2\" v-show=\"idx + 1 === currentTransactionStep\">\n              {{ step.description }}\n            </p>\n          </template>\n        </div>\n      </div>\n    </template>\n  </div>\n</template>\n<script>\nexport default {\n  name: 'Processing',\n  props: ['txType'],\n  data() {\n    return {\n      transaction: {\n        Publish: [\n          {\n            title: 'Create a Content ID',\n            description:\n              'Assign a unique identifier to your content. Write it on decentralized ledger.',\n            success: 'Data-Token is created'\n          },\n          {\n            title: 'Publish on MarketPlace',\n            description:\n              'Publishing the asset on marketplace with your unique Decentralized ID (called a DID or DDO)',\n            success: 'Asset published to OCEAN'\n          },\n          {\n            title: 'Create link for Paid Access',\n            description:\n              ' Creating access tokens for the published content, using which people will buy/fork your content.',\n            success: 'Tokens Minted'\n          },\n          {\n            title: 'Permission to sell your content',\n            description:\n              'Note that we published content under your name with full rights to the content. Hence we need your permission to sell the access token on your behalf.',\n            success: 'Approved'\n          },\n          {\n            title: 'Create Exchange Key',\n            description: 'Creating an exchange to sell the access token',\n            success: 'Exchange Created. Publish Complete'\n          }\n        ],\n        Buy: [\n          {\n            title: 'Permission to exchange your OCEAN tokens',\n            description:\n              'We need your permission so that we can exchange your OCEAN tokens for the datatokens',\n            success: 'Approved'\n          },\n          {\n            title: 'Swaping your token',\n            description: 'Calling smart contract to exchange the tokens',\n            success: 'Token Swapped'\n          }\n        ],\n        Download: [\n          {\n            title:\n              'Start download service and sign the transaction to start the download process',\n            description:\n              'Register your account to the download service and if already registered, sign using metamask to authenticate your account.',\n            success: 'Download Started'\n          }\n          /* {\n            title: 'Sign the transaction to authenticate yourself',\n            description: '',\n            success: '',\n          }, */\n        ]\n      }\n    };\n  },\n  computed: {\n    currentTransactionStep() {\n      return this.$store.state.currentTransactionStep;\n    },\n    transactionSteps() {\n      return this.transaction[this.txType];\n    }\n  },\n  mounted() {\n    this.$vs.loading({\n      container: '#transaction-step-1',\n      background: 'transparent',\n      color: 'success',\n      scale: 0.8\n    });\n  },\n  watch: {\n    currentTransactionStep: function(newVal, oldVal) {\n      this.$vs.loading.close(`#transaction-step-${oldVal} > .con-vs-loading`);\n      if (newVal <= this.transactionSteps.length) {\n        this.$vs.loading({\n          container: `#transaction-step-${newVal}`,\n          background: 'transparent',\n          color: 'success',\n          scale: 0.8\n        });\n      }\n    }\n  },\n  beforeDestroy() {\n    if (this.currentTransactionStep <= this.transactionSteps.length) {\n      this.$vs.loading.close(\n        `#transaction-step-${this.currentTransactionStep} > .con-vs-loading`\n      );\n    }\n  }\n};\n</script>\n<style scoped>\n.step-bullet {\n  box-shadow: 0px 0px 16px rgb(144 150 146 / 16%);\n}\n.currentStep {\n  box-shadow: 0px 0px 16px rgba(39, 174, 96, 0.16);\n}\n.inActiveStep {\n  color: #adb2b9;\n}\n.Center {\n  transform: translate(0, -4px);\n}\n</style>\n"]}]}