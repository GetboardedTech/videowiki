{"remainingRequest":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/views/pages/SelectMedia.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/views/pages/SelectMedia.vue","mtime":1617441641275},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SearchModal from '@/components/search/SearchModal';\nimport VideoNotFound from '@/components/VideoNotFound';\nimport VxCard from '../../components/vx-card/VxCard.vue';\nexport default {\n  name: 'SelectVideos',\n  components: {\n    VxCard,\n    VideoNotFound,\n    SearchModal\n  },\n  // data() {\n  //   return {\n  //     customTxtvalue: ''\n  //   };\n  // },\n  data() {\n    return {\n      selectedFile: null,\n      showSearchModal: false,\n      currentScene: null,\n      mediaType: 'video'\n    };\n  },\n  computed: {\n    selectedFromLibraryVideos() {\n      return this.$store.state.studio.selectedFromLibraryVideos;\n    },\n    /* sceneImage() {\n      return this.$store.state.studio.sceneImage;\n    }, */\n    insideIframe() {\n      return this.$store.state.insideIframe;\n    }\n  },\n  methods: {\n    /* callSetSceneImage(index, value) {\n      this.$store.commit('studio/setSceneImage', {\n        index: parseInt(index),\n        value: value,\n      });\n    }, */\n    isImageUrl(urlString) {\n      const imgExtentions = ['jpg', 'png', 'jpeg'];\n      urlString = new URL(urlString);\n      return imgExtentions.includes(urlString.pathname.split('.')[1]);\n    },\n    isValidUrl(indexs) {\n      const mediaUrl = this.selectedFromLibraryVideos[parseInt(indexs) + 1];\n      if (!mediaUrl) {\n        const payload = this.initialVideo(indexs);\n        this.$store.commit('studio/setInitialVideo', payload);\n        return !!payload.value;\n      }\n      return true;\n    },\n    loadSearchModal(index) {\n      this.showSearchModal = true;\n      this.currentScene = index;\n    },\n    initialVideo(indexs) {\n      const dataObj = {\n        indexs: parseInt(indexs),\n        value: null\n      };\n      if (\n        Object.keys(this.$store.state.studio.videos[parseInt(indexs)]).length >\n        0\n      ) {\n        const videoUrl = this.$store.state.studio.videos[\n          parseInt(indexs)\n        ][0][1];\n        const url = videoUrl.split('.');\n        if (url[url.length - 1] !== 'gif') dataObj.value = videoUrl;\n      }\n      return dataObj;\n    },\n    updateScroll() {\n      // let scrollPosition = window.scrollY\n      // console.log(scrollPosition)\n      for (const s in this.$store.state.studio.scenes) {\n        const rect = document\n          .getElementById('scene_card_' + s)\n          .getBoundingClientRect();\n        // console.log(s, \"bounding client\", rect.top, rect.bottom);\n        if (rect.top < 200 && rect.bottom > (this.insideIframe ? 420 : 500)) {\n          // console.log(s+\" is active\")\n          // this.$store.commit('studio/removeSearchedVideos');\n          this.$store.commit('studio/setActiveScene', parseInt(s) + 1);\n        }\n      }\n    }\n  },\n  mounted() {\n    window.addEventListener('scroll', this.updateScroll, { passive: true });\n    const el = document.getElementById(\n      `scene_card_${this.$store.state.studio.currentActiveScene - 1}`\n    );\n    el.scrollIntoView({ block: 'center' });\n  },\n  destroyed() {\n    window.removeEventListener('scroll', this.updateScroll);\n  }\n};\n",{"version":3,"sources":["SelectMedia.vue"],"names":[],"mappingsfile":"SelectMedia.vue","sourceRoot":"src/views/pages","sourcesContent":["<template>\n  <div class=\"select-media\">\n    <template v-for=\"(s, indexs) in $store.state.studio.scenes\">\n      <vx-card\n        :key=\"indexs\"\n        :id=\"'scene_card_' + indexs\"\n        class=\"scene-card\"\n        :class=\"{\n          activeScene:\n            $store.state.studio.currentActiveScene === parseInt(indexs) + 1\n        }\"\n      >\n        <p class=\"font-semibold items-left mb-base\" style=\"white-space: normal\">\n          {{ s }}\n        </p>\n        <div>\n          <!--v-if=\"selectedFromLibraryVideos[parseInt(indexs) + 1] !== undefined\"-->\n          <!--video\n          v-show=\"!sceneImage[parseInt(indexs)]\"\n          width=\"100%\"\n          height=\"auto\"\n          controls\n          preload=\"auto\"\n          id=\"link\"\n          :src=\"\n            selectedFromLibraryVideos[parseInt(indexs) + 1] ||\n            initialVideo(indexs)\n          \"\n          @loadstart=\"callSetSceneImage(indexs, false)\"\n          @error=\"callSetSceneImage(indexs, true)\"\n        >\n          {{ $t('studio.errors.e1') }}\n        </video>\n        <img\n          v-show=\"sceneImage[parseInt(indexs)]\"\n          width=\"100%\"\n          height=\"auto\"\n          src=\"https://oldweb.dyu.edu.tw/english/design/no-video.gif\"\n        /-->\n          <template v-if=\"isValidUrl(indexs)\">\n            <img\n              width=\"100%\"\n              height=\"auto\"\n              class=\"image-frame\"\n              v-if=\"isImageUrl(selectedFromLibraryVideos[parseInt(indexs) + 1])\"\n              :src=\"selectedFromLibraryVideos[parseInt(indexs) + 1]\"\n            />\n            <video\n              width=\"100%\"\n              height=\"auto\"\n              controls\n              v-else\n              preload=\"auto\"\n              :id=\"`library_video_${indexs}`\"\n              :src=\"selectedFromLibraryVideos[parseInt(indexs) + 1]\"\n            >\n              {{ $t('studio.errors.e1') }}\n            </video>\n          </template>\n          <div\n            v-else\n            class=\"bg-box relative vs-con-loading__container\"\n            :id=\"`upload_scene_${parseInt(indexs) + 1}`\"\n          >\n            <VideoNotFound\n              :sceneNum=\"parseInt(indexs) + 1\"\n              @search=\"loadSearchModal($event)\"\n            />\n          </div>\n        </div>\n        <!--div v-else>\n        <video\n          width=\"100%\"\n          height=\"auto\"\n          id=\"initialVideo\"\n          preload=\"auto\"\n          controls\n          :src=\"initialVideo(indexs)\"\n          $commit('studio/setSceneImage',true)\n          $commit('studio/setSceneImage',false)\n        >\n          {{ $t('studio.errors.e1') }}\n        </video>\n      </div-->\n      </vx-card>\n    </template>\n    <SearchModal\n      :showModal.sync=\"showSearchModal\"\n      :sceneNum=\"currentScene\"\n      @close=\"showSearchModal = false\"\n    />\n  </div>\n</template>\n\n<script>\nimport SearchModal from '@/components/search/SearchModal';\nimport VideoNotFound from '@/components/VideoNotFound';\nimport VxCard from '../../components/vx-card/VxCard.vue';\nexport default {\n  name: 'SelectVideos',\n  components: {\n    VxCard,\n    VideoNotFound,\n    SearchModal\n  },\n  // data() {\n  //   return {\n  //     customTxtvalue: ''\n  //   };\n  // },\n  data() {\n    return {\n      selectedFile: null,\n      showSearchModal: false,\n      currentScene: null,\n      mediaType: 'video'\n    };\n  },\n  computed: {\n    selectedFromLibraryVideos() {\n      return this.$store.state.studio.selectedFromLibraryVideos;\n    },\n    /* sceneImage() {\n      return this.$store.state.studio.sceneImage;\n    }, */\n    insideIframe() {\n      return this.$store.state.insideIframe;\n    }\n  },\n  methods: {\n    /* callSetSceneImage(index, value) {\n      this.$store.commit('studio/setSceneImage', {\n        index: parseInt(index),\n        value: value,\n      });\n    }, */\n    isImageUrl(urlString) {\n      const imgExtentions = ['jpg', 'png', 'jpeg'];\n      urlString = new URL(urlString);\n      return imgExtentions.includes(urlString.pathname.split('.')[1]);\n    },\n    isValidUrl(indexs) {\n      const mediaUrl = this.selectedFromLibraryVideos[parseInt(indexs) + 1];\n      if (!mediaUrl) {\n        const payload = this.initialVideo(indexs);\n        this.$store.commit('studio/setInitialVideo', payload);\n        return !!payload.value;\n      }\n      return true;\n    },\n    loadSearchModal(index) {\n      this.showSearchModal = true;\n      this.currentScene = index;\n    },\n    initialVideo(indexs) {\n      const dataObj = {\n        indexs: parseInt(indexs),\n        value: null\n      };\n      if (\n        Object.keys(this.$store.state.studio.videos[parseInt(indexs)]).length >\n        0\n      ) {\n        const videoUrl = this.$store.state.studio.videos[\n          parseInt(indexs)\n        ][0][1];\n        const url = videoUrl.split('.');\n        if (url[url.length - 1] !== 'gif') dataObj.value = videoUrl;\n      }\n      return dataObj;\n    },\n    updateScroll() {\n      // let scrollPosition = window.scrollY\n      // console.log(scrollPosition)\n      for (const s in this.$store.state.studio.scenes) {\n        const rect = document\n          .getElementById('scene_card_' + s)\n          .getBoundingClientRect();\n        // console.log(s, \"bounding client\", rect.top, rect.bottom);\n        if (rect.top < 200 && rect.bottom > (this.insideIframe ? 420 : 500)) {\n          // console.log(s+\" is active\")\n          // this.$store.commit('studio/removeSearchedVideos');\n          this.$store.commit('studio/setActiveScene', parseInt(s) + 1);\n        }\n      }\n    }\n  },\n  mounted() {\n    window.addEventListener('scroll', this.updateScroll, { passive: true });\n    const el = document.getElementById(\n      `scene_card_${this.$store.state.studio.currentActiveScene - 1}`\n    );\n    el.scrollIntoView({ block: 'center' });\n  },\n  destroyed() {\n    window.removeEventListener('scroll', this.updateScroll);\n  }\n};\n</script>\n\n<style scoped>\n.select-media {\n  margin-bottom: 12rem;\n}\n.scene-card {\n  min-height: 30rem;\n  /*background: #7367F0;\n    color: white;*/\n  opacity: 0.2;\n  box-shadow: none;\n  margin-bottom: 10rem;\n}\n.activeScene {\n  box-shadow: 0px 4px 25px 0px rgba(0, 0, 0, 0.1) !important;\n  -webkit-box-shadow: 0px 4px 25px 0px rgba(0, 0, 0, 0.1) !important;\n  opacity: 1 !important;\n}\n.group-card {\n  position: relative;\n}\n.scene-edit-card {\n  position: absolute;\n  opacity: 0.2;\n  box-shadow: none;\n  height: 45px;\n  width: 100px;\n  bottom: -60px;\n  right: 43%;\n}\n.bg-box {\n  height: 336px;\n  display: flex;\n  justify-content: center;\n  background: #b9b9b9;\n}\n</style>\n"]}]}