{"remainingRequest":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/babel-loader/lib/index.js!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/eslint-loader/index.js??ref--13-0!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/store/auth/moduleAuthActions.js","dependencies":[{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/store/auth/moduleAuthActions.js","mtime":1617441641271},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["/* =========================================================================================\n  File Name: moduleAuthActions.js\n  Description: Auth Module Actions\n  ----------------------------------------------------------------------------------------\n  Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\n  Author: Pixinvent\n  Author URL: http://www.themeforest.net/user/pixinvent\n========================================================================================== */\nimport jwt from \"../../http/requests/auth/jwt/index.js\";\nimport router from '@/router';\nexport default {\n  // updateUsername ({ commit }, payload) {\n  //   payload.user.updateProfile({\n  //     displayName: payload.displayName\n  //   }).then(() => {\n  //\n  //     // If username update is success\n  //     // update in localstorage\n  //     const newUserData = Object.assign({}, payload.user.providerData[0])\n  //     newUserData.displayName = payload.displayName\n  //     commit('UPDATE_USER_INFO', newUserData, {root: true})\n  //\n  //     // If reload is required to get fresh data after update\n  //     // Reload current page\n  //     if (payload.isReloadRequired) {\n  //       router.push(router.currentRoute.query.to || '/')\n  //     }\n  //   }).catch((err) => {\n  //     payload.notify({\n  //       time: 8800,\n  //       title: 'Error',\n  //       text: err.message,\n  //       iconPack: 'feather',\n  //       icon: 'icon-alert-circle',\n  //       color: 'danger'\n  //     })\n  //   })\n  // },\n  login: function login(_ref, payload) {\n    var commit = _ref.commit;\n    return new Promise(function (resolve, reject) {\n      jwt.login(payload.userDetails.email, payload.userDetails.password).then(function (response) {\n        // If there's user data in response\n        if (response.data.userData) {\n          // Navigate User to homepage\n          // router.push(router.currentRoute.query.to || '/');\n          // Set accessToken\n          localStorage.setItem('accessToken', response.data.accessToken); // Update user details\n\n          /* const userData = {\n            uid: 0,\n            displayName: response.data.userData.profile.display_name,\n            about: ''\n          }; */\n\n          var userData = response.data.userData;\n          commit('UPDATE_USER_INFO', userData, {\n            root: true\n          }); // Set bearer token in axios\n\n          commit('SET_BEARER', response.data.accessToken);\n          resolve(response);\n        } else {\n          reject({\n            message: 'Wrong Email or Password'\n          });\n        }\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  registerUser: function registerUser(_ref2, payload) {\n    var commit = _ref2.commit;\n    var _payload$userDetails = payload.userDetails,\n        firstName = _payload$userDetails.firstName,\n        lastName = _payload$userDetails.lastName,\n        email = _payload$userDetails.email,\n        password = _payload$userDetails.password,\n        confirmPassword = _payload$userDetails.confirmPassword;\n    return new Promise(function (resolve, reject) {\n      // Check confirm password\n      if (password !== confirmPassword) {\n        reject({\n          message: \"Password doesn't match. Please try again.\"\n        });\n      }\n\n      jwt.registerUser(firstName, lastName, email, password).then(function (response) {\n        resolve(response);\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  logOut: function logOut(_ref3) {\n    var commit = _ref3.commit;\n    localStorage.removeItem('userInfo');\n    localStorage.removeItem('accessToken');\n    window.location.reload(); // find a way to logout without refresh\n\n    commit('LOGOUT', null, {\n      root: true\n    });\n  },\n  fetchAccessToken: function fetchAccessToken() {\n    return new Promise(function (resolve) {\n      jwt.refreshToken().then(function (response) {\n        resolve(response);\n      });\n    });\n  }\n};",{"version":3,"sources":["/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/store/auth/moduleAuthActions.js"],"names":["jwt","router","login","payload","commit","Promise","resolve","reject","userDetails","email","password","then","response","data","userData","localStorage","setItem","accessToken","root","message","catch","error","registerUser","firstName","lastName","confirmPassword","logOut","removeItem","window","location","reload","fetchAccessToken","refreshToken"],"mappings":"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","sourcesContent":["/* =========================================================================================\n  File Name: moduleAuthActions.js\n  Description: Auth Module Actions\n  ----------------------------------------------------------------------------------------\n  Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\n  Author: Pixinvent\n  Author URL: http://www.themeforest.net/user/pixinvent\n========================================================================================== */\n\nimport jwt from '../../http/requests/auth/jwt/index.js';\nimport router from '@/router';\n\nexport default {\n  // updateUsername ({ commit }, payload) {\n  //   payload.user.updateProfile({\n  //     displayName: payload.displayName\n  //   }).then(() => {\n  //\n  //     // If username update is success\n  //     // update in localstorage\n  //     const newUserData = Object.assign({}, payload.user.providerData[0])\n  //     newUserData.displayName = payload.displayName\n  //     commit('UPDATE_USER_INFO', newUserData, {root: true})\n  //\n  //     // If reload is required to get fresh data after update\n  //     // Reload current page\n  //     if (payload.isReloadRequired) {\n  //       router.push(router.currentRoute.query.to || '/')\n  //     }\n  //   }).catch((err) => {\n  //     payload.notify({\n  //       time: 8800,\n  //       title: 'Error',\n  //       text: err.message,\n  //       iconPack: 'feather',\n  //       icon: 'icon-alert-circle',\n  //       color: 'danger'\n  //     })\n  //   })\n  // },\n\n  login({ commit }, payload) {\n    return new Promise((resolve, reject) => {\n      jwt\n        .login(payload.userDetails.email, payload.userDetails.password)\n        .then(response => {\n          // If there's user data in response\n          if (response.data.userData) {\n            // Navigate User to homepage\n            // router.push(router.currentRoute.query.to || '/');\n\n            // Set accessToken\n            localStorage.setItem('accessToken', response.data.accessToken);\n\n            // Update user details\n            /* const userData = {\n              uid: 0,\n              displayName: response.data.userData.profile.display_name,\n              about: ''\n            }; */\n            const userData = response.data.userData;\n            commit('UPDATE_USER_INFO', userData, { root: true });\n\n            // Set bearer token in axios\n            commit('SET_BEARER', response.data.accessToken);\n\n            resolve(response);\n          } else {\n            reject({ message: 'Wrong Email or Password' });\n          }\n        })\n        .catch(error => {\n          reject(error);\n        });\n    });\n  },\n\n  registerUser({ commit }, payload) {\n    const {\n      firstName,\n      lastName,\n      email,\n      password,\n      confirmPassword\n    } = payload.userDetails;\n\n    return new Promise((resolve, reject) => {\n      // Check confirm password\n      if (password !== confirmPassword) {\n        reject({ message: \"Password doesn't match. Please try again.\" });\n      }\n\n      jwt\n        .registerUser(firstName, lastName, email, password)\n        .then(response => {\n          resolve(response);\n        })\n        .catch(error => {\n          reject(error);\n        });\n    });\n  },\n\n  logOut({ commit }) {\n    localStorage.removeItem('userInfo');\n    localStorage.removeItem('accessToken');\n\n    window.location.reload();\n    // find a way to logout without refresh\n    commit('LOGOUT', null, { root: true });\n  },\n\n  fetchAccessToken() {\n    return new Promise(resolve => {\n      jwt.refreshToken().then(response => {\n        resolve(response);\n      });\n    });\n  }\n};\n"]}]}