{"remainingRequest":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/babel-loader/lib/index.js!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/eslint-loader/index.js??ref--13-0!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/blockchain/connectWallet.js","dependencies":[{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/blockchain/connectWallet.js","mtime":1617441641267},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n// import Torus from '@toruslabs/torus-embed';\n// import Portis from '@portis/web3';\nimport store from \"../store/store\";\nimport { connectToOceanMarketPlace, buyContent } from \"./OceanMarket\";\nvar Web3modal = '';\nvar Web3 = '';\nvar WalletConnectProvider = '';\n\nfunction loadLibrary() {\n  return _loadLibrary.apply(this, arguments);\n} // Web3modal instance\n\n\nfunction _loadLibrary() {\n  _loadLibrary = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return import('web3modal').then(function (obj) {\n              return obj.default;\n            });\n\n          case 2:\n            Web3modal = _context.sent;\n            _context.next = 5;\n            return import('web3').then(function (obj) {\n              return obj.default;\n            });\n\n          case 5:\n            Web3 = _context.sent;\n            _context.next = 8;\n            return import('@walletconnect/web3-provider').then(function (obj) {\n              return obj.default;\n            });\n\n          case 8:\n            WalletConnectProvider = _context.sent;\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadLibrary.apply(this, arguments);\n}\n\nvar web3Modal; // Chosen wallet provider given by the dialog window\n\nvar provider; // Address of the selected account\n\nvar selectedAccount;\n\nfunction init() {\n  var providerOptions = {\n    walletconnect: {\n      package: WalletConnectProvider,\n      options: {\n        infuraId: 'c5a798dfd7184a27990ed8744003cc61'\n      }\n    }\n    /* portis: {\n      package: Portis,\n      options: {\n        id: 'aa6a4dc8-067e-432b-a98e-c51acdad1401'\n      }\n    } */\n\n  };\n  web3Modal = new Web3modal({\n    network: 'rinkeby',\n    cacheProvider: false,\n    // optional\n    providerOptions: providerOptions,\n    // required\n    disableInjectedProvider: false // optional. For MetaMask / Brave / Opera.\n\n  });\n  console.log('Web3Modal instance is', web3Modal);\n}\n\nfunction fetchAccountData() {\n  return _fetchAccountData.apply(this, arguments);\n}\n\nfunction _fetchAccountData() {\n  _fetchAccountData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n    var web3, accounts;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // Get a Web3 instance for the wallet\n            web3 = new Web3(provider);\n            console.log('Web3 instance is', web3); // Get list of accounts of the connected wallet\n\n            _context2.next = 4;\n            return web3.eth.getAccounts();\n\n          case 4:\n            accounts = _context2.sent;\n            // MetaMask does not give you all accounts, only the selected account\n            console.log('Got accounts', accounts);\n            selectedAccount = accounts[0]; // set account address in state\n\n            store.commit('CONNECT', selectedAccount);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fetchAccountData.apply(this, arguments);\n}\n\nfunction onConnect() {\n  return _onConnect.apply(this, arguments);\n}\n\nfunction _onConnect() {\n  _onConnect = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n    var modalElement;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return loadLibrary();\n\n          case 2:\n            init();\n            _context3.prev = 3;\n            modalElement = document.getElementById('WEB3_CONNECT_MODAL_ID').firstChild;\n            modalElement.style.zIndex = 300000;\n\n            if (store.state.insideIframe) {\n              modalElement.style.height = '100%';\n              modalElement.style.width = '100%';\n              modalElement.style.transform = 'translate(-136px,0px)';\n            }\n\n            _context3.next = 9;\n            return web3Modal.connect();\n\n          case 9:\n            provider = _context3.sent;\n            _context3.next = 16;\n            break;\n\n          case 12:\n            _context3.prev = 12;\n            _context3.t0 = _context3[\"catch\"](3);\n            console.log('Could not get a wallet connection', _context3.t0);\n            return _context3.abrupt(\"return\");\n\n          case 16:\n            // Subscribe to accounts change\n            provider.on('accountsChanged', function (accounts) {\n              fetchAccountData();\n              connectToOceanMarketPlace(provider);\n            });\n            /* Subscribe to chainId change\n            provider.on(\"chainChanged\", (chainId) => {\n              fetchAccountData();\n            }); */\n            // Subscribe to networkId change\n\n            provider.on('networkChanged', function (networkId) {\n              fetchAccountData();\n            }); // await refreshAccountData();\n\n            _context3.next = 20;\n            return connectToOceanMarketPlace(provider);\n\n          case 20:\n            _context3.next = 22;\n            return fetchAccountData();\n\n          case 22:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[3, 12]]);\n  }));\n  return _onConnect.apply(this, arguments);\n}\n\nfunction onBuy() {\n  return _onBuy.apply(this, arguments);\n}\n\nfunction _onBuy() {\n  _onBuy = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            buyContent(provider);\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _onBuy.apply(this, arguments);\n}\n\nfunction onDisconnect() {\n  return _onDisconnect.apply(this, arguments);\n}\n\nfunction _onDisconnect() {\n  _onDisconnect = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return web3Modal.clearCachedProvider();\n\n          case 2:\n            provider = null;\n            selectedAccount = null;\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _onDisconnect.apply(this, arguments);\n}\n\nexport { onConnect, onDisconnect, onBuy, selectedAccount };",{"version":3,"sources":["/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/blockchain/connectWallet.js"],"names":["store","connectToOceanMarketPlace","buyContent","Web3modal","Web3","WalletConnectProvider","loadLibrary","then","obj","default","web3Modal","provider","selectedAccount","init","providerOptions","walletconnect","package","options","infuraId","network","cacheProvider","disableInjectedProvider","console","log","fetchAccountData","web3","eth","getAccounts","accounts","commit","onConnect","modalElement","document","getElementById","firstChild","style","zIndex","state","insideIframe","height","width","transform","connect","on","networkId","onBuy","onDisconnect","clearCachedProvider"],"mappings":"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","sourcesContent":["// import Torus from '@toruslabs/torus-embed';\n// import Portis from '@portis/web3';\nimport store from '../store/store';\nimport { connectToOceanMarketPlace, buyContent } from './OceanMarket';\nlet Web3modal = '';\nlet Web3 = '';\nlet WalletConnectProvider = '';\n\nasync function loadLibrary() {\n  Web3modal = await import('web3modal').then(obj => obj.default);\n  Web3 = await import('web3').then(obj => obj.default);\n  WalletConnectProvider = await import('@walletconnect/web3-provider').then(\n    obj => obj.default\n  );\n}\n\n// Web3modal instance\nlet web3Modal;\n\n// Chosen wallet provider given by the dialog window\nlet provider;\n\n// Address of the selected account\nlet selectedAccount;\n\nfunction init() {\n  const providerOptions = {\n    walletconnect: {\n      package: WalletConnectProvider,\n      options: {\n        infuraId: 'c5a798dfd7184a27990ed8744003cc61'\n      }\n    }\n    /* portis: {\n      package: Portis,\n      options: {\n        id: 'aa6a4dc8-067e-432b-a98e-c51acdad1401'\n      }\n    } */\n  };\n  web3Modal = new Web3modal({\n    network: 'rinkeby',\n    cacheProvider: false, // optional\n    providerOptions, // required\n    disableInjectedProvider: false // optional. For MetaMask / Brave / Opera.\n  });\n  console.log('Web3Modal instance is', web3Modal);\n}\n\nasync function fetchAccountData() {\n  // Get a Web3 instance for the wallet\n  const web3 = new Web3(provider);\n\n  console.log('Web3 instance is', web3);\n\n  // Get list of accounts of the connected wallet\n  const accounts = await web3.eth.getAccounts();\n\n  // MetaMask does not give you all accounts, only the selected account\n  console.log('Got accounts', accounts);\n  selectedAccount = accounts[0];\n\n  // set account address in state\n  store.commit('CONNECT', selectedAccount);\n}\nasync function onConnect() {\n  await loadLibrary();\n  init();\n  try {\n    const modalElement = document.getElementById('WEB3_CONNECT_MODAL_ID')\n      .firstChild;\n    modalElement.style.zIndex = 300000;\n    if (store.state.insideIframe) {\n      modalElement.style.height = '100%';\n      modalElement.style.width = '100%';\n      modalElement.style.transform = 'translate(-136px,0px)';\n    }\n    provider = await web3Modal.connect();\n  } catch (e) {\n    console.log('Could not get a wallet connection', e);\n    return;\n  }\n  // Subscribe to accounts change\n  provider.on('accountsChanged', accounts => {\n    fetchAccountData();\n    connectToOceanMarketPlace(provider);\n  });\n  /* Subscribe to chainId change\n  provider.on(\"chainChanged\", (chainId) => {\n    fetchAccountData();\n  }); */\n\n  // Subscribe to networkId change\n  provider.on('networkChanged', networkId => {\n    fetchAccountData();\n  });\n  // await refreshAccountData();\n  await connectToOceanMarketPlace(provider);\n  // publishContent(provider)\n  await fetchAccountData();\n}\n\nasync function onBuy() {\n  buyContent(provider);\n}\n\nasync function onDisconnect() {\n  await web3Modal.clearCachedProvider();\n  provider = null;\n  selectedAccount = null;\n}\n\nexport { onConnect, onDisconnect, onBuy, selectedAccount };\n"]}]}