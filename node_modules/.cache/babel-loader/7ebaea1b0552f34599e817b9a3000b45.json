{"remainingRequest":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/babel-loader/lib/index.js!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/views/components/audioRecorder.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/views/components/audioRecorder.vue","mtime":1617441641275},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es6.regexp.split\";\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar MicRecorder = require('mic-recorder-to-mp3');\n\nexport default {\n  name: 'audio-recorder',\n  props: ['sceneNum'],\n  data: function data() {\n    return {\n      button: null,\n      recorder: null,\n      recordingInProcess: false,\n      recordingReady: false,\n      audioBlob: null,\n      audioFile: null,\n      isRunning: true,\n      trimVideo: false,\n      showModal: false,\n      minutes: 0,\n      secondes: 0,\n      time: 0,\n      timer: null\n    };\n  },\n  filters: {\n    prettify: function prettify(value) {\n      var data = value.split(':');\n      var minutes = data[0];\n      var secondes = data[1];\n\n      if (minutes < 10) {\n        minutes = '0' + minutes;\n      }\n\n      if (secondes < 10) {\n        secondes = '0' + secondes;\n      }\n\n      return minutes + ':' + secondes;\n    }\n  },\n  computed: {\n    prettyTime: function prettyTime() {\n      var time = this.time / 60;\n      var minutes = parseInt(time);\n      var secondes = Math.round((time - minutes) * 60);\n      return minutes + ':' + secondes;\n    },\n    recordedAudios: function recordedAudios() {\n      return this.$store.state.studio.recordedAudios;\n    },\n    addedAudioVideos: function addedAudioVideos() {\n      return this.$store.state.studio.addedAudioVideos;\n    }\n  },\n  methods: {\n    removeAddedAudio: function removeAddedAudio() {\n      this.$store.commit('studio/setVideoWithAudio', {\n        sceneNum: parseInt(this.sceneNum) + 1,\n        value: null\n      });\n    },\n    removeRecording: function removeRecording() {\n      this.$store.commit('studio/setRecordedAudio', {\n        sceneNum: parseInt(this.sceneNum),\n        value: null\n      });\n    },\n    openFile: function openFile() {\n      document.getElementById(\"recorded_file\").click();\n    },\n    uploadRecordedFile: function uploadRecordedFile(event) {\n      this.audioFile = event.target.files[0];\n      var url = URL.createObjectURL(this.audioFile);\n      var audioObj = {\n        value: url,\n        sceneNum: parseInt(this.sceneNum)\n      };\n      this.$store.commit('studio/setRecordedAudio', audioObj);\n    },\n    playVid: function playVid() {\n      var vid = document.getElementById('video_' + this.sceneNum);\n\n      if (vid) {\n        vid.currentTime = 0;\n        vid.play();\n      }\n    },\n    pauseVid: function pauseVid() {\n      var vid = document.getElementById('video_' + this.sceneNum);\n\n      if (vid) {\n        vid.pause();\n      }\n    },\n    startRecording: function startRecording() {\n      var _this = this;\n\n      this.recorder.start().then(function () {\n        _this.playVid();\n\n        _this.startTimer();\n\n        _this.recordingInProcess = true;\n      }).catch(function (e) {\n        console.error(e);\n      });\n    },\n    toBase64: function toBase64(blob) {\n      var reader = new FileReader();\n      reader.readAsDataURL(blob);\n      var base64data = null;\n      return new Promise(function (resolve, reject) {\n        reader.onloadend = function () {\n          base64data = reader.result; // console.log(base64data);\n\n          resolve(base64data);\n        };\n      });\n    },\n    stopRecording: function stopRecording() {\n      var _this2 = this;\n\n      this.recorder.stop().getMp3().then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            buffer = _ref2[0],\n            blob = _ref2[1];\n\n        _this2.pauseVid();\n\n        _this2.resetTimer();\n\n        _this2.recordingInProcess = false; // console.log(buffer, blob);\n\n        /* this.toBase64(blob)\n          .then((res) => {\n            this.audioBlob = res;\n          })\n          .catch((e) => {\n            console.error(e);\n          }); */\n\n        _this2.audioFile = new File(buffer, 'music_' + _this2.sceneNum + '.mp3', {\n          type: blob.type,\n          lastModified: Date.now()\n        });\n        var url = URL.createObjectURL(_this2.audioFile);\n        var audioObj = {\n          value: url,\n          sceneNum: parseInt(_this2.sceneNum)\n        };\n\n        _this2.$store.commit('studio/setRecordedAudio', audioObj); // this.$emit('updateComponent');\n\n      });\n    },\n    compareAudioVideoDuration: function compareAudioVideoDuration() {\n      var videoDuration = document.getElementById('video_' + this.sceneNum).duration;\n      var audioDuration = document.getElementById('audio_' + this.sceneNum).duration;\n\n      if (Math.abs(audioDuration - videoDuration) > 1) {\n        this.showModal = true;\n        if (audioDuration < videoDuration) this.trimVideo = true;\n      } else this.audioVideoMerge();\n    },\n    handleImageAudioMerge: function () {\n      var _handleImageAudioMerge = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var dataObj, res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dataObj = {\n                  image_url: this.$store.state.studio.selectedFromLibraryVideos[parseInt(this.sceneNum) + 1],\n                  zoom: 'None'\n                };\n                _context.prev = 1;\n                _context.next = 4;\n                return this.$store.dispatch('studio/addMotionToImage', dataObj);\n\n              case 4:\n                res = _context.sent;\n                return _context.abrupt(\"return\", res.url);\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](1);\n                return _context.abrupt(\"return\", false);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 8]]);\n      }));\n\n      function handleImageAudioMerge() {\n        return _handleImageAudioMerge.apply(this, arguments);\n      }\n\n      return handleImageAudioMerge;\n    }(),\n    audioVideoMerge: function () {\n      var _audioVideoMerge = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _this3 = this;\n\n        var fd, audioUrl, videoUrl, urlString;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.showModal) this.showModal = false;\n                this.$vs.loading({\n                  background: '#fff',\n                  container: \"#scene_card_\".concat(this.sceneNum),\n                  type: 'sound',\n                  text: 'Adding Voice...'\n                });\n                fd = new FormData(); // fd.append(\"audio_data\", this.audioBlob, this.audioBlob.name)\n                // console.log(fd.entries())\n\n                /* this.audioBlob.arrayBuffer().then(res => {\n                  console.log(res)\n                }) */\n                // console.log('audio blob', this.audioBlob);\n\n                /* var dataObj = {\n                  audio: this.audioFile,\n                }; */\n\n                audioUrl = this.audioFile ? this.audioFile : this.recordedAudios[parseInt(this.sceneNum)];\n                fd.append('audio', audioUrl);\n                videoUrl = '';\n\n                if (this.$store.state.studio.preparedScenesVideos[parseInt(this.sceneNum) + 1]) {\n                  videoUrl = this.$store.state.studio.preparedScenesVideos[parseInt(this.sceneNum) + 1];\n                } else {\n                  videoUrl = this.$store.state.studio.selectedFromLibraryVideos[parseInt(this.sceneNum) + 1];\n                }\n\n                urlString = new URL(videoUrl);\n\n                if (!(urlString.pathname.split('/')[2] === 'ppt_file')) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                _context2.next = 11;\n                return this.handleImageAudioMerge();\n\n              case 11:\n                videoUrl = _context2.sent;\n\n              case 12:\n                if (videoUrl) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                this.$vs.loading.close(\"#scene_card_\".concat(this.sceneNum, \" > .con-vs-loading\"));\n                return _context2.abrupt(\"return\");\n\n              case 15:\n                // dataObj.video = videoUrl;\n                fd.append('video', videoUrl);\n                /* this.$Progress.start();\n                this.$vs.loading({ color: 'transparent' }); */\n\n                this.$store.dispatch('studio/audioVideoMerge', fd).then(function (res) {\n                  console.log(res);\n                  var response = {\n                    sceneNum: parseInt(_this3.sceneNum) + 1,\n                    value: res.data.video_url\n                  };\n\n                  _this3.$emit('updateComponent');\n\n                  _this3.$store.commit('studio/setVideoWithAudio', response);\n\n                  _this3.$store.commit('studio/setRecordedAudio', {\n                    sceneNum: parseInt(_this3.sceneNum),\n                    value: res.data.audio_url\n                  });\n                  /* this.$Progress.finish();\n                  this.$vs.loading.close(); */\n                  // console.log('done', res.data.url);\n                  // this.f(res.data.url);\n\n                }).catch(function (err) {\n                  console.log(err);\n                  /* this.$Progress.fail();\n                  this.$vs.loading.close(); */\n\n                  _this3.$vs.notify({\n                    title: 'Error Occured',\n                    text: 'Cannot merge audio and video',\n                    color: 'danger'\n                  });\n                }).finally(function () {\n                  _this3.$vs.loading.close(\"#scene_card_\".concat(_this3.sceneNum, \" > .con-vs-loading\"));\n                });\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function audioVideoMerge() {\n        return _audioVideoMerge.apply(this, arguments);\n      }\n\n      return audioVideoMerge;\n    }(),\n    f: function f(v) {\n      this.$store.commit('studio/selectVideo', v);\n      console.log('selected videos', this.$store.state.studio.preparedScenesVideos);\n    },\n    startTimer: function startTimer() {\n      var _this4 = this;\n\n      this.isRunning = true;\n\n      if (!this.timer) {\n        this.timer = setInterval(function () {\n          _this4.time++;\n          /* if (this.time > 0) {\n            this.time++\n          } else {\n            clearInterval(this.timer)\n            //this.sound.play()\n            this.reset()\n          } */\n        }, 1000);\n      }\n    },\n    stopTimer: function stopTimer() {\n      this.isRunning = false;\n      clearInterval(this.timer);\n      this.timer = null;\n    },\n    resetTimer: function resetTimer() {\n      this.stopTimer();\n      this.time = 0;\n      this.secondes = 0;\n      this.minutes = 0;\n    }\n  },\n  mounted: function mounted() {\n    this.recorder = new MicRecorder({\n      bitRate: 128\n    });\n  }\n};",{"version":3,"sources":["audioRecorder.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"w-full\">\n    <div>\n      <div\n        class=\"flex flex-wrap justify-center -m-2\"\n        v-if=\"!recordedAudios[parseInt(sceneNum)] && !recordingInProcess\"\n      >\n        <div class=\"p-2\">\n          <vs-button @click=\"startRecording\">{{\n            $t('studio.voice.v1')\n          }}</vs-button>\n        </div>\n        <div class=\"p-2\">\n          <vs-button @click=\"openFile\">Add Audio</vs-button>\n          <input\n            type=\"file\"\n            :id=\"`recorded_file`\"\n            @change=\"uploadRecordedFile\"\n            class=\"hidden\"\n            accept=\"audio/*\"\n          />\n        </div>\n      </div>\n      <div v-show=\"recordingInProcess\">\n        <vs-button\n          color=\"danger\"\n          icon=\"pause\"\n          radius\n          class=\"mb-3 animation\"\n          @click=\"stopRecording\"\n        ></vs-button>\n        <h6>\n          {{ prettyTime | prettify }}\n        </h6>\n      </div>\n      <!--ul\n        :class=\"'playlist_' + sceneNum\"\n        :id=\"'play_' + sceneNum\">\n        class=\"mb-base\"\n      ></ul-->\n      <div\n        class=\"flex flex-wrap controls-wrapper\"\n        v-if=\"recordedAudios[parseInt(sceneNum)] && !recordingInProcess\"\n      >\n        <div\n          class=\"cursor-pointer delete-recording-btn w-full sm:w-1/10\"\n          @click=\"removeRecording\"\n        >\n          <vs-icon icon=\"delete\" size=\"20px\" color=\"primary\" />\n        </div>\n        <div\n          class=\"flex flex-wrap items-center justify-center w-full sm:w-9/10\"\n        >\n          <div class=\"p-2 flex sm:w-1/2 w-4/5\">\n            <audio controls :id=\"'audio_' + sceneNum\" style=\"height:42px\">\n              <source\n                :src=\"recordedAudios[parseInt(sceneNum)]\"\n                type=\"audio/mp3\"\n              />\n              Your browser does not support the audio element.\n            </audio>\n          </div>\n          <!--div class=\"p-2\">\n            <vx-tooltip text=\"Record again\">\n              <vs-button icon=\"replay\" @click=\"startRecording\" />\n            </vx-tooltip>\n          </div-->\n          <div class=\"p-2\">\n            <vs-button\n              style=\"inline-text: center\"\n              @click=\"compareAudioVideoDuration\"\n              >Add Voice</vs-button\n            >\n          </div>\n          <div class=\"p-1\">\n            <vx-tooltip text=\"Remove Voice\">\n              <vs-button\n                icon=\"block\"\n                color=\"danger\"\n                :disabled=\"!addedAudioVideos[parseInt(sceneNum) + 1]\"\n                @click=\"removeAddedAudio\"\n              ></vs-button>\n            </vx-tooltip>\n          </div>\n        </div>\n      </div>\n    </div>\n    <vs-popup title=\"Confirmation\" :active.sync=\"showModal\">\n      <p v-if=\"trimVideo\" class=\"mb-base\">\n        We will trim the video to match it with audio\n      </p>\n      <p v-else class=\"mb-base\">\n        We will loop the video to match it with audio\n      </p>\n      <div class=\"flex justify-around\">\n        <vs-button type=\"filled\" color=\"danger\" @click=\"showModal = false\"\n          >No, Record Again</vs-button\n        >\n        <vs-button type=\"filled\" color=\"primary\" @click=\"audioVideoMerge\"\n          >OK</vs-button\n        >\n      </div>\n    </vs-popup>\n  </div>\n</template>\n\n<script>\nconst MicRecorder = require('mic-recorder-to-mp3');\nexport default {\n  name: 'audio-recorder',\n  props: ['sceneNum'],\n  data() {\n    return {\n      button: null,\n      recorder: null,\n      recordingInProcess: false,\n      recordingReady: false,\n      audioBlob: null,\n      audioFile: null,\n      isRunning: true,\n      trimVideo: false,\n      showModal: false,\n      minutes: 0,\n      secondes: 0,\n      time: 0,\n      timer: null\n    };\n  },\n  filters: {\n    prettify: function(value) {\n      const data = value.split(':');\n      let minutes = data[0];\n      let secondes = data[1];\n      if (minutes < 10) {\n        minutes = '0' + minutes;\n      }\n      if (secondes < 10) {\n        secondes = '0' + secondes;\n      }\n      return minutes + ':' + secondes;\n    }\n  },\n  computed: {\n    prettyTime() {\n      const time = this.time / 60;\n      const minutes = parseInt(time);\n      const secondes = Math.round((time - minutes) * 60);\n      return minutes + ':' + secondes;\n    },\n    recordedAudios() {\n      return this.$store.state.studio.recordedAudios;\n    },\n    addedAudioVideos() {\n      return this.$store.state.studio.addedAudioVideos;\n    }\n  },\n  methods: {\n    removeAddedAudio() {\n      this.$store.commit('studio/setVideoWithAudio', {\n        sceneNum: parseInt(this.sceneNum) + 1,\n        value: null\n      });\n    },\n    removeRecording() {\n      this.$store.commit('studio/setRecordedAudio', {\n        sceneNum: parseInt(this.sceneNum),\n        value: null\n      });\n    },\n    openFile() {\n      document.getElementById(`recorded_file`).click();\n    },\n    uploadRecordedFile(event) {\n      this.audioFile = event.target.files[0];\n      const url = URL.createObjectURL(this.audioFile);\n      const audioObj = {\n        value: url,\n        sceneNum: parseInt(this.sceneNum)\n      };\n      this.$store.commit('studio/setRecordedAudio', audioObj);\n    },\n    playVid() {\n      const vid = document.getElementById('video_' + this.sceneNum);\n      if (vid) {\n        vid.currentTime = 0;\n        vid.play();\n      }\n    },\n    pauseVid() {\n      const vid = document.getElementById('video_' + this.sceneNum);\n      if (vid) {\n        vid.pause();\n      }\n    },\n    startRecording() {\n      this.recorder\n        .start()\n        .then(() => {\n          this.playVid();\n          this.startTimer();\n          this.recordingInProcess = true;\n        })\n        .catch(e => {\n          console.error(e);\n        });\n    },\n    toBase64(blob) {\n      const reader = new FileReader();\n      reader.readAsDataURL(blob);\n      let base64data = null;\n      return new Promise((resolve, reject) => {\n        reader.onloadend = function() {\n          base64data = reader.result;\n          // console.log(base64data);\n          resolve(base64data);\n        };\n      });\n    },\n    stopRecording() {\n      this.recorder\n        .stop()\n        .getMp3()\n        .then(([buffer, blob]) => {\n          this.pauseVid();\n          this.resetTimer();\n\n          this.recordingInProcess = false;\n          // console.log(buffer, blob);\n\n          /* this.toBase64(blob)\n            .then((res) => {\n              this.audioBlob = res;\n            })\n            .catch((e) => {\n              console.error(e);\n            }); */\n          this.audioFile = new File(buffer, 'music_' + this.sceneNum + '.mp3', {\n            type: blob.type,\n            lastModified: Date.now()\n          });\n          const url = URL.createObjectURL(this.audioFile);\n          const audioObj = {\n            value: url,\n            sceneNum: parseInt(this.sceneNum)\n          };\n          this.$store.commit('studio/setRecordedAudio', audioObj);\n          // this.$emit('updateComponent');\n        });\n    },\n    compareAudioVideoDuration() {\n      const videoDuration = document.getElementById('video_' + this.sceneNum)\n        .duration;\n      const audioDuration = document.getElementById('audio_' + this.sceneNum)\n        .duration;\n      if (Math.abs(audioDuration - videoDuration) > 1) {\n        this.showModal = true;\n        if (audioDuration < videoDuration) this.trimVideo = true;\n      } else this.audioVideoMerge();\n    },\n    async handleImageAudioMerge() {\n      const dataObj = {\n        image_url: this.$store.state.studio.selectedFromLibraryVideos[\n          parseInt(this.sceneNum) + 1\n        ],\n        zoom: 'None'\n      };\n      try {\n        const res = await this.$store.dispatch(\n          'studio/addMotionToImage',\n          dataObj\n        );\n        return res.url;\n      } catch (err) {\n        return false;\n      }\n    },\n    async audioVideoMerge() {\n      if (this.showModal) this.showModal = false;\n      this.$vs.loading({\n        background: '#fff',\n        container: `#scene_card_${this.sceneNum}`,\n        type: 'sound',\n        text: 'Adding Voice...'\n      });\n      const fd = new FormData();\n      // fd.append(\"audio_data\", this.audioBlob, this.audioBlob.name)\n      // console.log(fd.entries())\n      /* this.audioBlob.arrayBuffer().then(res => {\n        console.log(res)\n      }) */\n      // console.log('audio blob', this.audioBlob);\n      /* var dataObj = {\n        audio: this.audioFile,\n      }; */\n      const audioUrl = this.audioFile\n        ? this.audioFile\n        : this.recordedAudios[parseInt(this.sceneNum)];\n      fd.append('audio', audioUrl);\n      let videoUrl = '';\n      if (\n        this.$store.state.studio.preparedScenesVideos[\n          parseInt(this.sceneNum) + 1\n        ]\n      ) {\n        videoUrl = this.$store.state.studio.preparedScenesVideos[\n          parseInt(this.sceneNum) + 1\n        ];\n      } else {\n        videoUrl = this.$store.state.studio.selectedFromLibraryVideos[\n          parseInt(this.sceneNum) + 1\n        ];\n      }\n      const urlString = new URL(videoUrl);\n      if (urlString.pathname.split('/')[2] === 'ppt_file') {\n        videoUrl = await this.handleImageAudioMerge();\n      }\n      if (!videoUrl) {\n        this.$vs.loading.close(\n          `#scene_card_${this.sceneNum} > .con-vs-loading`\n        );\n        return;\n      }\n      // dataObj.video = videoUrl;\n      fd.append('video', videoUrl);\n      /* this.$Progress.start();\n      this.$vs.loading({ color: 'transparent' }); */\n      this.$store\n        .dispatch('studio/audioVideoMerge', fd)\n        .then(res => {\n          console.log(res);\n          const response = {\n            sceneNum: parseInt(this.sceneNum) + 1,\n            value: res.data.video_url\n          };\n          this.$emit('updateComponent');\n          this.$store.commit('studio/setVideoWithAudio', response);\n          this.$store.commit('studio/setRecordedAudio', {\n            sceneNum: parseInt(this.sceneNum),\n            value: res.data.audio_url\n          });\n          /* this.$Progress.finish();\n          this.$vs.loading.close(); */\n          // console.log('done', res.data.url);\n          // this.f(res.data.url);\n        })\n        .catch(err => {\n          console.log(err);\n          /* this.$Progress.fail();\n          this.$vs.loading.close(); */\n          this.$vs.notify({\n            title: 'Error Occured',\n            text: 'Cannot merge audio and video',\n            color: 'danger'\n          });\n        })\n        .finally(() => {\n          this.$vs.loading.close(\n            `#scene_card_${this.sceneNum} > .con-vs-loading`\n          );\n        });\n    },\n    f(v) {\n      this.$store.commit('studio/selectVideo', v);\n      console.log(\n        'selected videos',\n        this.$store.state.studio.preparedScenesVideos\n      );\n    },\n    startTimer() {\n      this.isRunning = true;\n      if (!this.timer) {\n        this.timer = setInterval(() => {\n          this.time++;\n          /* if (this.time > 0) {\n            this.time++\n          } else {\n            clearInterval(this.timer)\n            //this.sound.play()\n            this.reset()\n          } */\n        }, 1000);\n      }\n    },\n    stopTimer() {\n      this.isRunning = false;\n      clearInterval(this.timer);\n      this.timer = null;\n    },\n    resetTimer() {\n      this.stopTimer();\n      this.time = 0;\n      this.secondes = 0;\n      this.minutes = 0;\n    }\n  },\n  mounted() {\n    this.recorder = new MicRecorder({\n      bitRate: 128\n    });\n  }\n};\n</script>\n\n<style scoped>\n.mainblock {\n  margin-bottom: -12%;\n}\n\n.controls-wrapper {\n  border: 1px solid rgba(114, 71, 196, 0.16);\n  border-radius: 4px;\n}\n.delete-recording-btn {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: rgba(114, 71, 196, 0.1);\n}\n.animation {\n  box-shadow: 0 0 0 0 rgb(116, 74, 74);\n  animation: pulse 2s infinite;\n}\n@keyframes pulse {\n  0% {\n    transform: scale(0.95);\n    box-shadow: 0 0 0 0px rgba(255, 82, 82, 0.7);\n  }\n\n  70% {\n    transform: scale(1);\n    box-shadow: 0 0 0 15px rgba(255, 82, 82, 0);\n  }\n\n  100% {\n    transform: scale(0.95);\n    box-shadow: 0 0 0 0px rgba(255, 82, 82, 0);\n  }\n}\n</style>\n"],"sourceRoot":"src/views/components"}]}