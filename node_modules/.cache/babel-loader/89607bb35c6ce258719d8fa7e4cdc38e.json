{"remainingRequest":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/babel-loader/lib/index.js!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/views/pages/PublishVideo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/views/pages/PublishVideo.vue","mtime":1617441641275},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _slicedToArray from \"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es7.object.entries\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport constants from \"../../../constant\";\nimport axios from 'axios';\nimport Transaction from '@/views/components/Transaction/Transaction.vue';\nimport { mapState } from 'vuex';\nexport default {\n  name: 'PublishVideo',\n  components: {\n    Transaction: Transaction\n  },\n  data: function data() {\n    return {\n      player: null,\n      videos: [],\n      indexs: 0,\n      constants: constants,\n      // showAlert: false,\n      saveForLater: false,\n      task_id: null,\n      videoId: null,\n      downloadInProgress: false,\n      showTransactionModal: false,\n      currentTxPhase: 'Processing',\n      previewReq: Function\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapState('auth', ['isUserLoggedIn'])), {}, {\n    getVideoLink: function getVideoLink() {\n      return this.$store.state.studio.previewVideo;\n    },\n    getFilename: function getFilename() {\n      return \"\".concat(this.$store.state.studio.video.title, \"_videowiki.mp4\");\n    },\n\n    /* isPublished() {\n      return this.$store.state.studio.publishStatus;\n    }, */\n    isPaid: function isPaid() {\n      return this.$store.state.studio.video.isPaid;\n    },\n    totalScenes: function totalScenes() {\n      return Object.keys(this.$store.state.studio.scenes).length;\n    },\n    sceneTransitionList: function sceneTransitionList() {\n      return this.$store.state.studio.sceneTransition;\n    },\n    insideIframe: function insideIframe() {\n      return this.$store.state.insideIframe;\n    }\n  }),\n  mounted: function mounted() {\n    if (this.$route.params.videoId) {\n      this.videoId = this.$route.params.videoId;\n    }\n\n    if (this.getVideoLink) {\n      this.$vs.dialog({\n        type: 'confirm',\n        color: 'primary',\n        title: \"Confirm\",\n        acceptText: 'Yes',\n        text: 'Do you want to generate the Preview again ?',\n        accept: this.collectVideos\n      });\n    } else {\n      this.collectVideos();\n    }\n  },\n  methods: {\n    collectVideos: function collectVideos() {\n      this.$store.commit('studio/setPreviewVideo', null);\n      this.$vs.loading({\n        background: '#fff',\n        container: '#preview-loading',\n        text: 'Generating Preview...'\n      });\n      var libraryItems = this.$store.state.studio.selectedFromLibraryVideos;\n      var preparedScene = this.$store.state.studio.preparedScenesVideos;\n      var audioVideo = this.$store.state.studio.addedAudioVideos;\n\n      for (var i = 1; i <= this.totalScenes; i++) {\n        if (audioVideo[i]) this.videos.push(audioVideo[i]);else if (preparedScene[i]) this.videos.push(preparedScene[i]);else if (libraryItems[i]) this.videos.push(libraryItems[i]);\n      }\n\n      this.concatVideos();\n    },\n    concatVideos: function () {\n      var _concatVideos = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var videoData, apiResponse;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                videoData = {\n                  videos: this.videos,\n                  task_id: this.task_id,\n                  isPreview: 1,\n                  motions: this.sceneTransitionList,\n                  bgm: this.$store.state.studio.backgroundMusic.url || null\n                };\n                _context.prev = 1;\n                _context.next = 4;\n                return this.$store.dispatch('studio/concatenateVideos', videoData);\n\n              case 4:\n                apiResponse = _context.sent;\n                console.log(apiResponse);\n                if (!this.task_id) this.task_id = apiResponse.task_id;\n\n                if (apiResponse.status) {\n                  this.$store.commit('studio/setPreviewVideo', apiResponse.data.video_url);\n                  this.$store.commit('studio/SET_VIDEO_ATTR', {\n                    key: 'image',\n                    value: apiResponse.data.image_url\n                  }); // this.$Progress.finish();\n\n                  this.$vs.loading.close('#preview-loading > .con-vs-loading');\n                  /* this.$vs.loading({\n                    background: '#fff',\n                    container: '#preview-loading',\n                    text: 'Preparing your video..',\n                  });\n                  const previewVideo = document.getElementById('preview_video');\n                  previewVideo.oncanplaythrough = () => {\n                    this.$vs.loading.close('#preview-loading > .con-vs-loading');\n                  }; */\n                } else {\n                  this.previewReq = setTimeout(function () {\n                    return _this.concatVideos();\n                  }, 15000);\n                }\n\n                _context.next = 14;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](1);\n                // this.$Progress.fail();\n                this.$vs.loading.close('#preview-loading > .con-vs-loading');\n                this.$vs.notify({\n                  title: 'Error',\n                  text: 'Merge Failed',\n                  color: 'danger'\n                });\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 10]]);\n      }));\n\n      function concatVideos() {\n        return _concatVideos.apply(this, arguments);\n      }\n\n      return concatVideos;\n    }(),\n    getUserName: function getUserName() {\n      var userInfo = this.$store.state.AppActiveUser;\n      return userInfo.username;\n    },\n    handlePublish: function handlePublish() {\n      this.saveForLater = false;\n      this.handleVideoSubmit();\n    },\n    handleSaveForLater: function handleSaveForLater() {\n      this.saveForLater = true;\n      this.handleVideoSubmit();\n    },\n    handleVideoSubmit: function () {\n      var _handleVideoSubmit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var title, desc, payload;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this.isUserLoggedIn()) {\n                  _context2.next = 30;\n                  break;\n                }\n\n                title = this.$store.state.studio.video.title;\n                desc = this.$store.state.studio.video.description;\n\n                if (!(title !== '' && desc !== '')) {\n                  _context2.next = 27;\n                  break;\n                }\n\n                if (!this.isPaid) {\n                  _context2.next = 24;\n                  break;\n                }\n\n                if (!this.$store.state.isWalletConnected) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                payload = {\n                  author: this.getUserName(),\n                  metaData: {\n                    url: this.getVideoLink,\n                    title: title\n                  }\n                };\n                this.$store.commit('SET_CURRENT_TRANSACTION_STEP', 1);\n                this.currentTxPhase = 'Processing';\n                this.showTransactionModal = true;\n                _context2.prev = 10;\n                _context2.next = 13;\n                return this.$store.dispatch('publishToOcean', payload);\n\n              case 13:\n                setTimeout(function () {\n                  _this2.showTransactionModal = false;\n\n                  _this2.submitVideo();\n                }, 2000);\n                _context2.next = 19;\n                break;\n\n              case 16:\n                _context2.prev = 16;\n                _context2.t0 = _context2[\"catch\"](10);\n                if (_context2.t0.code === 4001) this.currentTxPhase = 'Rejected';else this.currentTxPhase = 'Failed';\n\n              case 19:\n                _context2.next = 22;\n                break;\n\n              case 21:\n                this.$vs.notify({\n                  text: 'Connect your Wallet First',\n                  color: 'primary'\n                });\n\n              case 22:\n                _context2.next = 25;\n                break;\n\n              case 24:\n                this.submitVideo();\n\n              case 25:\n                _context2.next = 28;\n                break;\n\n              case 27:\n                this.$vs.notify({\n                  title: 'Input Missing',\n                  text: 'Title/Description cannot be empty',\n                  color: 'primary'\n                });\n\n              case 28:\n                _context2.next = 31;\n                break;\n\n              case 30:\n                this.$store.commit('TOGGLE_LOGIN_POPUP', true);\n\n              case 31:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[10, 16]]);\n      }));\n\n      function handleVideoSubmit() {\n        return _handleVideoSubmit.apply(this, arguments);\n      }\n\n      return handleVideoSubmit;\n    }(),\n    submitVideo: function submitVideo() {\n      var _this3 = this;\n\n      this.$Progress.start();\n      this.$vs.loading({\n        color: 'transparent'\n      });\n      var video = this.$store.state.studio.video;\n      var metaData = this.$store.state.studio;\n      var sceneData = this.getSceneData(metaData);\n      var data = {\n        info: {\n          title: video.title,\n          description: video.description,\n          image: video.image,\n          script: metaData.videoScript,\n          url: video.url,\n          user: this.getUserName(),\n          duration: document.getElementById('preview_video').duration,\n          language: video.srcLang\n        },\n        id: this.videoId,\n        published_id: video.published_id,\n        scenes: sceneData,\n        bgm: metaData.backgroundMusic.url || null,\n        video: metaData.previewVideo,\n        is_save_later: this.saveForLater,\n        tags: metaData.tags\n      };\n      console.log(data);\n      /* Ajax call start */\n\n      this.$store.dispatch('studio/publishVideo', data).then(function (res) {\n        if (!_this3.saveForLater) {\n          if (_this3.isPaid) {\n            var payload = {\n              exchange_key: video.txData.exchangeId,\n              dod: video.txData.did,\n              dataToken: video.txData.dataTokenAddress,\n              paid: video.isPaid,\n              video_id: res.data.id\n            };\n\n            _this3.$store.dispatch('studio/postTxData', payload).then(function () {\n              _this3.$Progress.finish();\n\n              _this3.$vs.loading.close();\n\n              _this3.$router.push('/dashboard');\n\n              _this3.$vs.notify({\n                title: 'Success',\n                text: 'Video Published Successfully',\n                color: 'success'\n              });\n            }).catch(function (err) {\n              console.log(err);\n\n              _this3.$Progress.fail();\n\n              _this3.$vs.loading.close();\n\n              _this3.$vs.notify({\n                title: 'Error',\n                text: 'Video Tx data was not saved',\n                color: 'danger'\n              });\n            });\n\n            return;\n          }\n\n          _this3.$Progress.finish();\n\n          _this3.$vs.loading.close();\n\n          _this3.$router.push('/dashboard');\n\n          _this3.$vs.notify({\n            title: 'Success',\n            text: 'Video Published Successfully',\n            color: 'success'\n          });\n        } else {\n          _this3.$Progress.finish();\n\n          _this3.$vs.loading.close();\n\n          _this3.$router.push('/myvideos');\n\n          _this3.$vs.notify({\n            title: 'Success',\n            text: 'Video Saved Successfully',\n            color: 'success'\n          });\n        }\n      }).catch(function (err) {\n        console.log(err);\n\n        _this3.$Progress.fail();\n\n        _this3.$vs.loading.close();\n\n        _this3.$vs.notify({\n          title: 'Error',\n          text: _this3.saveForLater ? 'Video was not saved' : 'Video was not published',\n          color: 'danger'\n        });\n      });\n      /* Ajax call end */\n    },\n    getSceneData: function getSceneData(metaData) {\n      var scenes = {};\n      Object.entries(metaData.scenes).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n\n        var _metaData$styles$key = metaData.styles[key],\n            font_color = _metaData$styles$key.sceneScriptColor,\n            position = _metaData$styles$key.sceneScriptPosition,\n            background_color = _metaData$styles$key.sceneBackgroundColor;\n        scenes[key] = {\n          text: value,\n          keywords: metaData.keywords[key],\n          online_url: null,\n          audio: null,\n          uploaded_video: null,\n          position: position.toString(),\n          font_color: font_color,\n          background_color: background_color\n        }; // audio url\n\n        if (metaData.recordedAudios[key]) {\n          var audioUrl = metaData.recordedAudios[key];\n          scenes[key].audio = audioUrl.search('blob:') === -1 ? audioUrl : null;\n        } // video url\n\n\n        if (metaData.selectedFromLibraryVideos[parseInt(key) + 1]) {\n          var videoUrl = new URL(metaData.selectedFromLibraryVideos[parseInt(key) + 1]);\n          if (videoUrl.origin === constants.apiUrl) scenes[key].uploaded_video = videoUrl.href;else scenes[key].online_url = videoUrl.href;\n        }\n      });\n      return scenes;\n    },\n    handleDownload: function handleDownload() {\n      var _this4 = this;\n\n      this.downloadInProgress = true;\n      this.$vs.loading({\n        background: 'primary',\n        color: '#fff',\n        container: '#download-with-loading',\n        scale: 0.45\n      });\n      axios.get(this.getVideoLink, {\n        responseType: 'blob'\n      }).then(function (response) {\n        var blob = new Blob([response.data], {\n          type: 'video/mp4'\n        });\n        var link = document.createElement('a');\n        link.href = URL.createObjectURL(blob);\n        link.download = _this4.getFilename;\n        link.click();\n        URL.revokeObjectURL(link.href);\n      }).catch(function () {\n        _this4.$vs.notify({\n          title: 'Error Occured',\n          text: 'Download Failed',\n          color: 'danger'\n        });\n      }).finally(function () {\n        _this4.downloadInProgress = false;\n\n        _this4.$vs.loading.close('#download-with-loading > .con-vs-loading');\n      });\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    clearTimeout(this.previewReq);\n  }\n};",{"version":3,"sources":["PublishVideo.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <vx-card class=\"scene-card vs-con-loading__container\" id=\"preview-loading\">\n      <h4 class=\"text-center mb-4\">Preview</h4>\n      <p class=\"font-semibold items-left mb-base\" style=\"white-space: normal\">\n        Note: This is a low quality video for rendering purposes only, when your\n        are ready, extract a high quality video by publishing it.\n      </p>\n      <video\n        width=\"100%\"\n        height=\"auto\"\n        :src=\"getVideoLink\"\n        id=\"preview_video\"\n        controls\n      >\n        {{ $t('studio.errors.e1') }}\n      </video>\n      <div class=\"mb-base\"></div>\n      <div class=\"flex justify-center\">\n        <vs-button\n          @click=\"handlePublish\"\n          class=\"bg-custom-purple mr-4\"\n          v-if=\"!insideIframe\"\n          >{{ $t('studio.publish.p1') }}</vs-button\n        >\n        <!--vs-button\n          class=\"bg-custom-purple mr-4\"\n          @click.prevent=\"handleSaveForLater\"\n          >Save Draft</vs-button\n        -->\n\n        <vs-button\n          class=\"bg-custom-purple px-4 vs-con-loading__container\"\n          id=\"download-with-loading\"\n          icon=\"get_app\"\n          :disabled=\"downloadInProgress\"\n          @click.prevent=\"handleDownload\"\n          >Download</vs-button\n        >\n      </div>\n    </vx-card>\n    <Transaction\n      :show=\"showTransactionModal\"\n      transactionType=\"Publish\"\n      :transactionPhase=\"currentTxPhase\"\n      @close=\"showTransactionModal = false\"\n      @retry=\"handlePublish\"\n    />\n  </div>\n</template>\n\n<script>\nimport constants from '../../../constant';\nimport axios from 'axios';\nimport Transaction from '@/views/components/Transaction/Transaction.vue';\nimport { mapState } from 'vuex';\n\nexport default {\n  name: 'PublishVideo',\n  components: {\n    Transaction\n  },\n  data() {\n    return {\n      player: null,\n      videos: [],\n      indexs: 0,\n      constants,\n      // showAlert: false,\n      saveForLater: false,\n      task_id: null,\n      videoId: null,\n      downloadInProgress: false,\n      showTransactionModal: false,\n      currentTxPhase: 'Processing',\n      previewReq: Function\n    };\n  },\n  computed: {\n    ...mapState('auth', ['isUserLoggedIn']),\n    getVideoLink() {\n      return this.$store.state.studio.previewVideo;\n    },\n    getFilename() {\n      return `${this.$store.state.studio.video.title}_videowiki.mp4`;\n    },\n    /* isPublished() {\n      return this.$store.state.studio.publishStatus;\n    }, */\n    isPaid() {\n      return this.$store.state.studio.video.isPaid;\n    },\n    totalScenes() {\n      return Object.keys(this.$store.state.studio.scenes).length;\n    },\n    sceneTransitionList() {\n      return this.$store.state.studio.sceneTransition;\n    },\n    insideIframe() {\n      return this.$store.state.insideIframe;\n    }\n  },\n  mounted() {\n    if (this.$route.params.videoId) {\n      this.videoId = this.$route.params.videoId;\n    }\n    if (this.getVideoLink) {\n      this.$vs.dialog({\n        type: 'confirm',\n        color: 'primary',\n        title: `Confirm`,\n        acceptText: 'Yes',\n        text: 'Do you want to generate the Preview again ?',\n        accept: this.collectVideos\n      });\n    } else {\n      this.collectVideos();\n    }\n  },\n  methods: {\n    collectVideos() {\n      this.$store.commit('studio/setPreviewVideo', null);\n      this.$vs.loading({\n        background: '#fff',\n        container: '#preview-loading',\n        text: 'Generating Preview...'\n      });\n      const libraryItems = this.$store.state.studio.selectedFromLibraryVideos;\n      const preparedScene = this.$store.state.studio.preparedScenesVideos;\n      const audioVideo = this.$store.state.studio.addedAudioVideos;\n      for (let i = 1; i <= this.totalScenes; i++) {\n        if (audioVideo[i]) this.videos.push(audioVideo[i]);\n        else if (preparedScene[i]) this.videos.push(preparedScene[i]);\n        else if (libraryItems[i]) this.videos.push(libraryItems[i]);\n      }\n      this.concatVideos();\n    },\n    async concatVideos() {\n      const videoData = {\n        videos: this.videos,\n        task_id: this.task_id,\n        isPreview: 1,\n        motions: this.sceneTransitionList,\n        bgm: this.$store.state.studio.backgroundMusic.url || null\n      };\n      try {\n        const apiResponse = await this.$store.dispatch(\n          'studio/concatenateVideos',\n          videoData\n        );\n        console.log(apiResponse);\n        if (!this.task_id) this.task_id = apiResponse.task_id;\n        if (apiResponse.status) {\n          this.$store.commit(\n            'studio/setPreviewVideo',\n            apiResponse.data.video_url\n          );\n          this.$store.commit('studio/SET_VIDEO_ATTR', {\n            key: 'image',\n            value: apiResponse.data.image_url\n          });\n          // this.$Progress.finish();\n          this.$vs.loading.close('#preview-loading > .con-vs-loading');\n          /* this.$vs.loading({\n            background: '#fff',\n            container: '#preview-loading',\n            text: 'Preparing your video..',\n          });\n          const previewVideo = document.getElementById('preview_video');\n          previewVideo.oncanplaythrough = () => {\n            this.$vs.loading.close('#preview-loading > .con-vs-loading');\n          }; */\n        } else {\n          this.previewReq = setTimeout(() => this.concatVideos(), 15000);\n        }\n      } catch (err) {\n        // this.$Progress.fail();\n        this.$vs.loading.close('#preview-loading > .con-vs-loading');\n        this.$vs.notify({\n          title: 'Error',\n          text: 'Merge Failed',\n          color: 'danger'\n        });\n      }\n    },\n    getUserName() {\n      const userInfo = this.$store.state.AppActiveUser;\n      return userInfo.username;\n    },\n    handlePublish() {\n      this.saveForLater = false;\n      this.handleVideoSubmit();\n    },\n    handleSaveForLater() {\n      this.saveForLater = true;\n      this.handleVideoSubmit();\n    },\n    async handleVideoSubmit() {\n      if (this.isUserLoggedIn()) {\n        const title = this.$store.state.studio.video.title;\n        const desc = this.$store.state.studio.video.description;\n        if (title !== '' && desc !== '') {\n          // this.submitVideo(saveLater);\n          if (this.isPaid) {\n            if (this.$store.state.isWalletConnected) {\n              const payload = {\n                author: this.getUserName(),\n                metaData: {\n                  url: this.getVideoLink,\n                  title: title\n                }\n              };\n              this.$store.commit('SET_CURRENT_TRANSACTION_STEP', 1);\n              this.currentTxPhase = 'Processing';\n              this.showTransactionModal = true;\n              try {\n                await this.$store.dispatch('publishToOcean', payload);\n                setTimeout(() => {\n                  this.showTransactionModal = false;\n                  this.submitVideo();\n                }, 2000);\n              } catch (error) {\n                if (error.code === 4001) this.currentTxPhase = 'Rejected';\n                else this.currentTxPhase = 'Failed';\n              }\n            } else {\n              this.$vs.notify({\n                text: 'Connect your Wallet First',\n                color: 'primary'\n              });\n            }\n          } else {\n            this.submitVideo();\n          }\n        } else {\n          this.$vs.notify({\n            title: 'Input Missing',\n            text: 'Title/Description cannot be empty',\n            color: 'primary'\n          });\n        }\n      } else {\n        this.$store.commit('TOGGLE_LOGIN_POPUP', true);\n      }\n    },\n    submitVideo() {\n      this.$Progress.start();\n      this.$vs.loading({ color: 'transparent' });\n      const video = this.$store.state.studio.video;\n      const metaData = this.$store.state.studio;\n      const sceneData = this.getSceneData(metaData);\n      const data = {\n        info: {\n          title: video.title,\n          description: video.description,\n          image: video.image,\n          script: metaData.videoScript,\n          url: video.url,\n          user: this.getUserName(),\n          duration: document.getElementById('preview_video').duration,\n          language: video.srcLang\n        },\n        id: this.videoId,\n        published_id: video.published_id,\n        scenes: sceneData,\n        bgm: metaData.backgroundMusic.url || null,\n        video: metaData.previewVideo,\n        is_save_later: this.saveForLater,\n        tags: metaData.tags\n      };\n      console.log(data);\n      /* Ajax call start */\n      this.$store\n        .dispatch('studio/publishVideo', data)\n        .then(res => {\n          if (!this.saveForLater) {\n            if (this.isPaid) {\n              const payload = {\n                exchange_key: video.txData.exchangeId,\n                dod: video.txData.did,\n                dataToken: video.txData.dataTokenAddress,\n                paid: video.isPaid,\n                video_id: res.data.id\n              };\n              this.$store\n                .dispatch('studio/postTxData', payload)\n                .then(() => {\n                  this.$Progress.finish();\n                  this.$vs.loading.close();\n                  this.$router.push('/dashboard');\n                  this.$vs.notify({\n                    title: 'Success',\n                    text: 'Video Published Successfully',\n                    color: 'success'\n                  });\n                })\n                .catch(err => {\n                  console.log(err);\n                  this.$Progress.fail();\n                  this.$vs.loading.close();\n                  this.$vs.notify({\n                    title: 'Error',\n                    text: 'Video Tx data was not saved',\n                    color: 'danger'\n                  });\n                });\n              return;\n            }\n            this.$Progress.finish();\n            this.$vs.loading.close();\n            this.$router.push('/dashboard');\n            this.$vs.notify({\n              title: 'Success',\n              text: 'Video Published Successfully',\n              color: 'success'\n            });\n          } else {\n            this.$Progress.finish();\n            this.$vs.loading.close();\n            this.$router.push('/myvideos');\n            this.$vs.notify({\n              title: 'Success',\n              text: 'Video Saved Successfully',\n              color: 'success'\n            });\n          }\n        })\n        .catch(err => {\n          console.log(err);\n          this.$Progress.fail();\n          this.$vs.loading.close();\n          this.$vs.notify({\n            title: 'Error',\n            text: this.saveForLater\n              ? 'Video was not saved'\n              : 'Video was not published',\n            color: 'danger'\n          });\n        });\n      /* Ajax call end */\n    },\n    getSceneData(metaData) {\n      const scenes = {};\n      Object.entries(metaData.scenes).forEach(([key, value]) => {\n        const {\n          sceneScriptColor: font_color,\n          sceneScriptPosition: position,\n          sceneBackgroundColor: background_color\n        } = metaData.styles[key];\n\n        scenes[key] = {\n          text: value,\n          keywords: metaData.keywords[key],\n          online_url: null,\n          audio: null,\n          uploaded_video: null,\n          position: position.toString(),\n          font_color,\n          background_color\n        };\n        // audio url\n        if (metaData.recordedAudios[key]) {\n          const audioUrl = metaData.recordedAudios[key];\n          scenes[key].audio = audioUrl.search('blob:') === -1 ? audioUrl : null;\n        }\n        // video url\n        if (metaData.selectedFromLibraryVideos[parseInt(key) + 1]) {\n          const videoUrl = new URL(\n            metaData.selectedFromLibraryVideos[parseInt(key) + 1]\n          );\n          if (videoUrl.origin === constants.apiUrl)\n            scenes[key].uploaded_video = videoUrl.href;\n          else scenes[key].online_url = videoUrl.href;\n        }\n      });\n      return scenes;\n    },\n    handleDownload() {\n      this.downloadInProgress = true;\n      this.$vs.loading({\n        background: 'primary',\n        color: '#fff',\n        container: '#download-with-loading',\n        scale: 0.45\n      });\n      axios\n        .get(this.getVideoLink, { responseType: 'blob' })\n        .then(response => {\n          const blob = new Blob([response.data], { type: 'video/mp4' });\n          const link = document.createElement('a');\n          link.href = URL.createObjectURL(blob);\n          link.download = this.getFilename;\n          link.click();\n          URL.revokeObjectURL(link.href);\n        })\n        .catch(() => {\n          this.$vs.notify({\n            title: 'Error Occured',\n            text: 'Download Failed',\n            color: 'danger'\n          });\n        })\n        .finally(() => {\n          this.downloadInProgress = false;\n          this.$vs.loading.close('#download-with-loading > .con-vs-loading');\n        });\n    }\n  },\n  beforeDestroy() {\n    clearTimeout(this.previewReq);\n  }\n};\n</script>\n\n<style scoped>\n.vs-con-loading__container {\n  z-index: 10 !important;\n}\n</style>\n"],"sourceRoot":"src/views/pages"}]}