{"remainingRequest":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/babel-loader/lib/index.js!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/views/pages/EditScenes.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/views/pages/EditScenes.vue","mtime":1617441641275},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es7.array.includes\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport constants from \"../../../constant\";\nimport vSwatches from 'vue-swatches'; // import vSelect from 'vue-select';\n\nimport 'vue-swatches/dist/vue-swatches.css'; // import 'vue-select/dist/vue-select.css';\n\nimport VxTooltip from \"../../layouts/components/vx-tooltip/VxTooltip.vue\";\nimport PositionDropdown from \"./components/PositionDropdown.vue\"; // import AlignmentDropdown from './components/AlignmentDropdown';\n// import TransitionDropdown from './components/TransitionDropdown';\n\nexport default {\n  name: 'EditScenes',\n  data: function data() {\n    return {\n      constants: constants,\n      defaultStyle: {\n        sceneScriptColor: '#ffffff',\n        sceneScriptPosition: 3,\n        sceneBackgroundColor: '#674ea7',\n        transition_type: 'left_to_right'\n      },\n      scriptAlign: 'left'\n    };\n  },\n  components: {\n    vSwatches: vSwatches,\n    // vSelect,\n    VxTooltip: VxTooltip,\n    PositionDropdown: PositionDropdown // AlignmentDropdown,\n    // TransitionDropdown\n\n  },\n  computed: {\n    preparedScenesVideos: function preparedScenesVideos() {\n      return this.$store.state.studio.preparedScenesVideos;\n    },\n    selectedFromLibraryVideos: function selectedFromLibraryVideos() {\n      return this.$store.state.studio.selectedFromLibraryVideos;\n    },\n    styles: function styles() {\n      return this.$store.state.studio.styles;\n    }\n    /* sceneTransitionList() {\n      return this.$store.state.studio.sceneTransition;\n    },\n    sceneLength() {\n      return Object.keys(this.$store.state.studio.scenes).length;\n    }, */\n\n  },\n  methods: {\n    isImageUrl: function isImageUrl(urlString) {\n      try {\n        var imgExtentions = ['jpg', 'png', 'jpeg'];\n        urlString = new URL(urlString);\n        return imgExtentions.includes(urlString.pathname.split('.')[1]);\n      } catch (err) {\n        return false;\n      }\n    },\n    scriptInput: function scriptInput(e) {\n      this.$store.commit('studio/editSceneScript', e.target.innerText);\n    },\n    isVideoUrl: function isVideoUrl(indexs) {\n      var videoUrl = this.selectedFromLibraryVideos[parseInt(indexs) + 1];\n\n      if (videoUrl) {\n        var url = videoUrl.split('.');\n        if (url[url.length - 1] === 'gif') return true;\n        return false;\n      }\n\n      return true;\n    },\n    getStyle: function getStyle(prop, idx) {\n      idx = parseInt(idx);\n\n      if (!this.styles[idx] || !this.styles[idx][prop]) {\n        this.$store.commit('studio/setStyles', {\n          prop: prop,\n          sceneNum: idx,\n          value: this.defaultStyle[prop]\n        });\n      }\n\n      return this.styles[idx][prop];\n    },\n    setScriptColor: function setScriptColor(idx, value) {\n      this.$store.commit('studio/setStyles', {\n        prop: 'sceneScriptColor',\n        sceneNum: parseInt(idx),\n        value: value\n      });\n    },\n    setScriptPosition: function setScriptPosition(idx, value) {\n      console.log({\n        sceneNum: idx,\n        pos: value\n      });\n      this.$store.commit('studio/setStyles', {\n        prop: 'sceneScriptPosition',\n        sceneNum: parseInt(idx),\n        value: value\n      });\n    },\n    setBackgroundColor: function setBackgroundColor(idx, value) {\n      this.$store.commit('studio/setStyles', {\n        prop: 'sceneBackgroundColor',\n        sceneNum: parseInt(idx),\n        value: value\n      });\n    },\n    setScriptAlignment: function setScriptAlignment(idx, value) {\n      this.$store.commit('studio/setStyles', {\n        prop: 'transition_type',\n        sceneNum: parseInt(idx),\n        value: value\n      });\n    },\n\n    /* setSceneTransition(idx, value) {\n      this.$store.commit('studio/setTransition', {\n        sceneNum: parseInt(idx),\n        value,\n      });\n    },\n    getSceneTransition(idx) {\n      if (this.sceneTransitionList[parseInt(idx)])\n        return this.sceneTransitionList[parseInt(idx)];\n      else {\n        this.setSceneTransition(idx, 'no_motion');\n        return 'no_motion';\n      }\n    }, */\n    removePreparedScene: function removePreparedScene(indexs) {\n      this.$store.commit('studio/setScriptSceneVideo', {\n        sceneNum: parseInt(indexs) + 1,\n        value: null\n      });\n    },\n    prepareScene: function () {\n      var _prepareScene = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(indexs) {\n        var _this = this;\n\n        var dataObj;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.$vs.loading({\n                  background: '#fff',\n                  container: \"#scene_card_\".concat(indexs),\n                  text: 'Adding Subtitles...'\n                });\n                this.$store.commit('studio/editSceneScript', {\n                  value: document.getElementById('scene_script_' + indexs).innerText,\n                  sceneNum: parseInt(indexs)\n                });\n                dataObj = _objectSpread({\n                  url: this.$store.state.studio.selectedFromLibraryVideos[parseInt(indexs) + 1],\n                  sceneScript: this.$store.state.studio.scenes[parseInt(indexs)],\n                  bg_opacity: 0.8,\n                  transition_type: 'right_to_left'\n                }, this.styles[indexs]);\n                this.$store.dispatch('studio/editSceneScript', dataObj).then(function (res) {\n                  var response = {\n                    sceneNum: parseInt(indexs) + 1,\n                    value: res.data.video_url\n                  };\n\n                  _this.$store.commit('studio/setScriptSceneVideo', response); // this.$store.commit('studio/selectVideo', res.data.url);\n\n\n                  console.log('edit scene script', res.data.url); // dataObj.video = res.data.url;\n                  // console.log(dataObj);\n\n                  _this.$forceUpdate();\n                  /* this.$Progress.finish();\n                  this.$vs.loading.close(); */\n\n\n                  _this.updateComponent();\n                }).catch(function (err) {\n                  console.log('edit scene script', err);\n                  /* this.$Progress.fail();\n                  this.$vs.loading.close(); */\n\n                  _this.$vs.notify({\n                    title: 'Error',\n                    text: 'Cannot merge script with video',\n                    color: 'danger'\n                  });\n                }).finally(function () {\n                  _this.$vs.loading.close(\"#scene_card_\".concat(indexs, \" > .con-vs-loading\"));\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function prepareScene(_x) {\n        return _prepareScene.apply(this, arguments);\n      }\n\n      return prepareScene;\n    }(),\n    updateComponent: function updateComponent() {\n      this.$forceUpdate();\n    },\n    updateScroll: function updateScroll() {\n      // let scrollPosition = window.scrollY\n      // console.log(scrollPosition)\n      for (var s in this.$store.state.studio.scenes) {\n        var rect = document.getElementById('scene_card_' + s).getBoundingClientRect(); // console.log(s, \"bounding client\", rect.top, rect.bottom);\n\n        if (rect.top < 200 && rect.bottom > 500) {\n          // console.log(s+\" is active\")\n          this.$store.commit('studio/setActiveScene', parseInt(s) + 1);\n        }\n      }\n    }\n  },\n  mounted: function mounted() {\n    window.addEventListener('scroll', this.updateScroll);\n    var el = document.getElementById(\"scene_card_\".concat(this.$store.state.studio.currentActiveScene - 1));\n    el.scrollIntoView({\n      block: 'center'\n    });\n  },\n  destroyed: function destroyed() {\n    window.removeEventListener('scroll', this.updateScroll);\n  }\n};",{"version":3,"sources":["EditScenes.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <vx-card\n      v-for=\"(s, indexs) in $store.state.studio.scenes\"\n      :key=\"indexs\"\n      :id=\"'scene_card_' + indexs\"\n      class=\"scene-card vs-con-loading__container\"\n      :class=\"{\n        activeScene:\n          $store.state.studio.currentActiveScene === parseInt(indexs) + 1\n      }\"\n    >\n      <div\n        class=\"scene-video mb-4\"\n        :id=\"`scene_video_${indexs}`\"\n        :key=\"JSON.stringify(preparedScenesVideos)\"\n      >\n        <video\n          width=\"100%\"\n          height=\"auto\"\n          controls\n          v-if=\"preparedScenesVideos[parseInt(indexs) + 1]\"\n        >\n          <source\n            :src=\"preparedScenesVideos[parseInt(indexs) + 1]\"\n            type=\"video/mp4\"\n          />\n          {{ $t('studio.errors.e1') }}\n        </video>\n        <div v-else>\n          <img\n            v-if=\"isImageUrl(selectedFromLibraryVideos[parseInt(indexs) + 1])\"\n            width=\"100%\"\n            height=\"auto\"\n            :src=\"selectedFromLibraryVideos[parseInt(indexs) + 1]\"\n          />\n          <video\n            v-else\n            width=\"100%\"\n            height=\"auto\"\n            controls\n            :src=\"selectedFromLibraryVideos[parseInt(indexs) + 1]\"\n          >\n            {{ $t('studio.errors.e1') }}\n          </video>\n        </div>\n      </div>\n      <div class=\"flex flex-wrap justify-between items-center mb-4\">\n        <div class=\"flex items-center -mx-2 edit-subtitles m-2\">\n          <div class=\"px-2\">\n            <h6 class=\"text-primary\">Subtitles</h6>\n          </div>\n          <div class=\"px-2\" style=\"transform: translate(0px, 3px)\">\n            <position-dropdown\n              @input=\"setScriptPosition(indexs, $event)\"\n              :value=\"getStyle('sceneScriptPosition', indexs)\"\n            />\n          </div>\n          <div class=\"px-2\">\n            <!--alignment-dropdown :value=\"scriptAlign\" /-->\n            <img src=\"@/assets/images/pages/align-left.svg\" alt=\"align-left\" />\n          </div>\n          <div class=\"px-2\">\n            <v-swatches\n              :value=\"getStyle('sceneScriptColor', indexs)\"\n              @input=\"setScriptColor(indexs, $event)\"\n              popover-x=\"right\"\n              popover-y=\"top\"\n              swatches=\"text-advanced\"\n            >\n              <div slot=\"trigger\"><h4 class=\"text-primary\">T</h4></div>\n            </v-swatches>\n          </div>\n          <div class=\"px-2\">\n            <v-swatches\n              :value=\"getStyle('sceneBackgroundColor', indexs)\"\n              @input=\"setBackgroundColor(indexs, $event)\"\n              popover-x=\"right\"\n              popover-y=\"top\"\n              swatches=\"text-advanced\"\n            >\n              <div\n                slot=\"trigger\"\n                class=\"bg-primary rounded-sm\"\n                style=\"width: 24px\"\n              >\n                <h4 class=\"text-white\">T</h4>\n              </div>\n            </v-swatches>\n          </div>\n          <div class=\"px-2\">\n            <vx-tooltip text=\"Remove Subtitles\">\n              <button\n                :disabled=\"!preparedScenesVideos[parseInt(indexs) + 1]\"\n                @click=\"removePreparedScene(indexs)\"\n                style=\"\n                  background: none;\n                  border: none;\n                  transform: translate(0px, 1px);\n                \"\n              >\n                <vs-icon\n                  type=\"filled\"\n                  icon=\"cancel\"\n                  :color=\"\n                    !preparedScenesVideos[parseInt(indexs) + 1] ? '' : 'primary'\n                  \"\n                  class=\"cursor-pointer\"\n                  size=\"24px\"\n                />\n              </button>\n            </vx-tooltip>\n          </div>\n        </div>\n        <!--div\n          v-if=\"parseInt(indexs) + 1 < sceneLength\"\n          class=\"flex items-center -mx-2 edit-transition px-2 p-1\"\n        >\n          <div class=\"mr-2\">\n            <h6 class=\"text-primary\">Transition</h6>\n          </div>\n          <transition-dropdown\n            @input=\"setSceneTransition(indexs, $event)\"\n            :value=\"getSceneTransition(indexs)\"\n          />\n        </div-->\n      </div>\n      <div class=\"items-left mb-3\">\n        <small class=\"items-left\">{{ $t('studio.course.c4') }}</small>\n        <p\n          contenteditable\n          :id=\"'scene_script_' + indexs\"\n          class=\"scene-text\"\n          style=\"white-space: normal\"\n        >\n          {{ s }}\n        </p>\n      </div>\n      <vs-button @click=\"prepareScene(indexs)\" :disabled=\"isVideoUrl(indexs)\"\n        >{{ $t('studio.course.c5') }} {{ parseInt(indexs) + 1 }}</vs-button\n      >\n    </vx-card>\n  </div>\n</template>\n\n<script>\nimport constants from '../../../constant';\nimport vSwatches from 'vue-swatches';\n// import vSelect from 'vue-select';\nimport 'vue-swatches/dist/vue-swatches.css';\n// import 'vue-select/dist/vue-select.css';\nimport VxTooltip from '../../layouts/components/vx-tooltip/VxTooltip.vue';\nimport PositionDropdown from './components/PositionDropdown.vue';\n// import AlignmentDropdown from './components/AlignmentDropdown';\n// import TransitionDropdown from './components/TransitionDropdown';\nexport default {\n  name: 'EditScenes',\n  data() {\n    return {\n      constants,\n      defaultStyle: {\n        sceneScriptColor: '#ffffff',\n        sceneScriptPosition: 3,\n        sceneBackgroundColor: '#674ea7',\n        transition_type: 'left_to_right'\n      },\n      scriptAlign: 'left'\n    };\n  },\n  components: {\n    vSwatches,\n    // vSelect,\n    VxTooltip,\n    PositionDropdown,\n    // AlignmentDropdown,\n    // TransitionDropdown\n  },\n  computed: {\n    preparedScenesVideos() {\n      return this.$store.state.studio.preparedScenesVideos;\n    },\n    selectedFromLibraryVideos() {\n      return this.$store.state.studio.selectedFromLibraryVideos;\n    },\n    styles() {\n      return this.$store.state.studio.styles;\n    }\n    /* sceneTransitionList() {\n      return this.$store.state.studio.sceneTransition;\n    },\n    sceneLength() {\n      return Object.keys(this.$store.state.studio.scenes).length;\n    }, */\n  },\n  methods: {\n    isImageUrl(urlString) {\n      try {\n        const imgExtentions = ['jpg', 'png', 'jpeg'];\n        urlString = new URL(urlString);\n        return imgExtentions.includes(urlString.pathname.split('.')[1]);\n      } catch (err) {\n        return false;\n      }\n    },\n    scriptInput(e) {\n      this.$store.commit('studio/editSceneScript', e.target.innerText);\n    },\n    isVideoUrl(indexs) {\n      const videoUrl = this.selectedFromLibraryVideos[parseInt(indexs) + 1];\n      if (videoUrl) {\n        const url = videoUrl.split('.');\n        if (url[url.length - 1] === 'gif') return true;\n        return false;\n      }\n      return true;\n    },\n    getStyle(prop, idx) {\n      idx = parseInt(idx);\n      if (!this.styles[idx] || !this.styles[idx][prop]) {\n        this.$store.commit('studio/setStyles', {\n          prop: prop,\n          sceneNum: idx,\n          value: this.defaultStyle[prop]\n        });\n      }\n      return this.styles[idx][prop];\n    },\n    setScriptColor(idx, value) {\n      this.$store.commit('studio/setStyles', {\n        prop: 'sceneScriptColor',\n        sceneNum: parseInt(idx),\n        value: value\n      });\n    },\n    setScriptPosition(idx, value) {\n      console.log({ sceneNum: idx, pos: value });\n      this.$store.commit('studio/setStyles', {\n        prop: 'sceneScriptPosition',\n        sceneNum: parseInt(idx),\n        value: value\n      });\n    },\n    setBackgroundColor(idx, value) {\n      this.$store.commit('studio/setStyles', {\n        prop: 'sceneBackgroundColor',\n        sceneNum: parseInt(idx),\n        value: value\n      });\n    },\n    setScriptAlignment(idx, value) {\n      this.$store.commit('studio/setStyles', {\n        prop: 'transition_type',\n        sceneNum: parseInt(idx),\n        value: value\n      });\n    },\n    /* setSceneTransition(idx, value) {\n      this.$store.commit('studio/setTransition', {\n        sceneNum: parseInt(idx),\n        value,\n      });\n    },\n    getSceneTransition(idx) {\n      if (this.sceneTransitionList[parseInt(idx)])\n        return this.sceneTransitionList[parseInt(idx)];\n      else {\n        this.setSceneTransition(idx, 'no_motion');\n        return 'no_motion';\n      }\n    }, */\n    removePreparedScene(indexs) {\n      this.$store.commit('studio/setScriptSceneVideo', {\n        sceneNum: parseInt(indexs) + 1,\n        value: null\n      });\n    },\n    async prepareScene(indexs) {\n      this.$vs.loading({\n        background: '#fff',\n        container: `#scene_card_${indexs}`,\n        text: 'Adding Subtitles...'\n      });\n      this.$store.commit('studio/editSceneScript', {\n        value: document.getElementById('scene_script_' + indexs).innerText,\n        sceneNum: parseInt(indexs)\n      });\n      const dataObj = {\n        url: this.$store.state.studio.selectedFromLibraryVideos[\n          parseInt(indexs) + 1\n        ],\n        sceneScript: this.$store.state.studio.scenes[parseInt(indexs)],\n        bg_opacity: 0.8,\n        transition_type: 'right_to_left',\n        ...this.styles[indexs]\n      };\n      this.$store\n        .dispatch('studio/editSceneScript', dataObj)\n        .then(res => {\n          const response = {\n            sceneNum: parseInt(indexs) + 1,\n            value: res.data.video_url\n          };\n          this.$store.commit('studio/setScriptSceneVideo', response);\n          // this.$store.commit('studio/selectVideo', res.data.url);\n          console.log('edit scene script', res.data.url);\n          // dataObj.video = res.data.url;\n          // console.log(dataObj);\n          this.$forceUpdate();\n          /* this.$Progress.finish();\n          this.$vs.loading.close(); */\n          this.updateComponent();\n        })\n        .catch(err => {\n          console.log('edit scene script', err);\n          /* this.$Progress.fail();\n          this.$vs.loading.close(); */\n          this.$vs.notify({\n            title: 'Error',\n            text: 'Cannot merge script with video',\n            color: 'danger'\n          });\n        })\n        .finally(() => {\n          this.$vs.loading.close(`#scene_card_${indexs} > .con-vs-loading`);\n        });\n    },\n    updateComponent() {\n      this.$forceUpdate();\n    },\n    updateScroll() {\n      // let scrollPosition = window.scrollY\n      // console.log(scrollPosition)\n      for (const s in this.$store.state.studio.scenes) {\n        const rect = document\n          .getElementById('scene_card_' + s)\n          .getBoundingClientRect();\n        // console.log(s, \"bounding client\", rect.top, rect.bottom);\n\n        if (rect.top < 200 && rect.bottom > 500) {\n          // console.log(s+\" is active\")\n          this.$store.commit('studio/setActiveScene', parseInt(s) + 1);\n        }\n      }\n    }\n  },\n  mounted() {\n    window.addEventListener('scroll', this.updateScroll);\n    const el = document.getElementById(\n      `scene_card_${this.$store.state.studio.currentActiveScene - 1}`\n    );\n    el.scrollIntoView({ block: 'center' });\n  },\n  destroyed() {\n    window.removeEventListener('scroll', this.updateScroll);\n  }\n};\n</script>\n\n<style scoped>\n.vs-con-loading__container {\n  z-index: 20 !important;\n}\n.scene-card {\n  min-height: 30rem;\n  opacity: 0.2;\n  box-shadow: none;\n  margin-bottom: 10rem;\n}\n.scene-video {\n  margin: -1.3rem -1.3rem 0;\n}\n.activeScene {\n  box-shadow: 0px 4px 25px 0px rgba(0, 0, 0, 0.1) !important;\n  -webkit-box-shadow: 0px 4px 25px 0px rgba(0, 0, 0, 0.1) !important;\n  opacity: 1 !important;\n}\n.items-left {\n  text-align: left;\n  text-align: -moz-left;\n  text-align: -webkit-left;\n}\n.items-right {\n  text-align: right;\n  text-align: -moz-right;\n  text-align: -webkit-right;\n}\n.scene-text {\n  border: 1px solid gray;\n  border-radius: 3px;\n  padding: 0.5rem;\n}\n.edit-subtitles {\n  background: rgba(107, 77, 189, 0.06);\n  border-radius: 4px;\n  padding: 5px;\n}\n.edit-transition {\n  background: rgba(107, 77, 189, 0.06);\n  border-radius: 4px;\n}\n</style>\n"],"sourceRoot":"src/views/pages"}]}