{"remainingRequest":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/babel-loader/lib/index.js!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/layouts/components/vertical-nav-menu/VerticalNavMenu.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/src/layouts/components/vertical-nav-menu/VerticalNavMenu.vue","mtime":1617441641271},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.array.find-index\";\nimport _slicedToArray from \"/home/falcon-puneet/Documents/Arbunize/videowiki/video-wiki-frontend/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/web.dom.iterable\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar';\nimport VNavMenuGroup from \"./VerticalNavMenuGroup.vue\";\nimport VNavMenuItem from \"./VerticalNavMenuItem.vue\";\nimport Logo from \"../Logo.vue\";\nexport default {\n  name: 'v-nav-menu',\n  components: {\n    VNavMenuGroup: VNavMenuGroup,\n    VNavMenuItem: VNavMenuItem,\n    VuePerfectScrollbar: VuePerfectScrollbar,\n    Logo: Logo\n  },\n  props: {\n    logo: {\n      type: String\n    },\n    openGroupHover: {\n      type: Boolean,\n      default: false\n    },\n    parent: {\n      type: String\n    },\n    reduceNotRebound: {\n      type: Boolean,\n      default: true\n    },\n    navMenuItems: {\n      type: Array,\n      required: true\n    },\n    title: {\n      type: String\n    }\n  },\n  data: function data() {\n    return {\n      clickNotClose: false,\n      // disable close navMenu on outside click\n      isMouseEnter: false,\n      reduce: false,\n      // determines if navMenu is reduce - component property\n      showCloseButton: true,\n      // show close button in smaller devices\n      settings: {\n        // perfectScrollbar settings\n        maxScrollbarLength: 60,\n        wheelSpeed: 1,\n        swipeEasing: true\n      },\n      showShadowBottom: false\n    };\n  },\n  computed: {\n    isGroupActive: function isGroupActive() {\n      var _this = this;\n\n      return function (item) {\n        var path = _this.$route.fullPath;\n        var routeParent = _this.$route.meta ? _this.$route.meta.parent : undefined;\n        var open = false;\n\n        var func = function func(item) {\n          if (item.submenu) {\n            item.submenu.forEach(function (item) {\n              if (item.url && (path === item.url || routeParent === item.slug)) {\n                open = true;\n              } else if (item.submenu) {\n                func(item);\n              }\n            });\n          }\n        };\n\n        func(item);\n        return open;\n      };\n    },\n    menuItemsUpdated: function menuItemsUpdated() {\n      var clone = this.navMenuItems.slice();\n\n      var _iterator = _createForOfIteratorHelper(this.navMenuItems.entries()),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var _step$value = _slicedToArray(_step.value, 2),\n              index = _step$value[0],\n              item = _step$value[1];\n\n          if (item.header && item.items.length && (index || 1)) {\n            var i = clone.findIndex(function (ix) {\n              return ix.header === item.header;\n            });\n\n            var _iterator2 = _createForOfIteratorHelper(item.items.entries()),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var _step2$value = _slicedToArray(_step2.value, 2),\n                    subIndex = _step2$value[0],\n                    subItem = _step2$value[1];\n\n                clone.splice(i + 1 + subIndex, 0, subItem);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return clone;\n    },\n    isVerticalNavMenuActive: {\n      get: function get() {\n        return this.$store.state.isVerticalNavMenuActive;\n      },\n      set: function set(val) {\n        this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', val);\n      }\n    },\n    layoutType: function layoutType() {\n      return this.$store.state.mainLayoutType;\n    },\n    reduceButton: {\n      get: function get() {\n        return this.$store.state.reduceButton;\n      },\n      set: function set(val) {\n        this.$store.commit('TOGGLE_REDUCE_BUTTON', val);\n      }\n    },\n    isVerticalNavMenuReduced: function isVerticalNavMenuReduced() {\n      return Boolean(this.reduce && this.reduceButton);\n    },\n    verticalNavMenuItemsMin: function verticalNavMenuItemsMin() {\n      return this.$store.state.verticalNavMenuItemsMin;\n    },\n    scrollbarTag: function scrollbarTag() {\n      return this.$store.getters.scrollbarTag;\n    },\n    windowWidth: function windowWidth() {\n      return this.$store.state.windowWidth;\n    }\n  },\n  watch: {\n    $route: function $route() {\n      if (this.isVerticalNavMenuActive && this.showCloseButton) this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false);\n    },\n    reduce: function reduce(val) {\n      var verticalNavMenuWidth = val ? 'reduced' : this.$store.state.windowWidth < 1200 ? 'no-nav-menu' : 'default';\n      this.$store.dispatch('updateVerticalNavMenuWidth', verticalNavMenuWidth);\n      setTimeout(function () {\n        window.dispatchEvent(new Event('resize'));\n      }, 100);\n    },\n    layoutType: function layoutType() {\n      this.setVerticalNavMenuWidth();\n    },\n    reduceButton: function reduceButton() {\n      this.setVerticalNavMenuWidth();\n    },\n    windowWidth: function windowWidth() {\n      this.setVerticalNavMenuWidth();\n    }\n  },\n  methods: {\n    onMenuSwipe: function onMenuSwipe(event) {\n      // Swipe Right\n      if (event.direction === 4 && this.$vs.rtl) {\n        if (this.isVerticalNavMenuActive && this.showCloseButton) this.isVerticalNavMenuActive = false;\n      } // Swipe Left\n      else if (event.direction === 2 && !this.$vs.rtl) {\n          if (this.isVerticalNavMenuActive && this.showCloseButton) this.isVerticalNavMenuActive = false;\n        }\n    },\n    onSwipeAreaSwipe: function onSwipeAreaSwipe(event) {\n      // Swipe Right\n      if (event.direction === 4 && !this.$vs.rtl) {\n        if (!this.isVerticalNavMenuActive && this.showCloseButton) this.isVerticalNavMenuActive = true;\n      } // Swipe Left\n      else if (event.direction === 2 && this.$vs.rtl) {\n          if (!this.isVerticalNavMenuActive && this.showCloseButton) this.isVerticalNavMenuActive = true;\n        }\n    },\n    psSectionScroll: function psSectionScroll() {\n      var scroll_el = this.$refs.verticalNavMenuPs.$el || this.$refs.verticalNavMenuPs;\n      this.showShadowBottom = scroll_el.scrollTop > 0;\n    },\n    mouseEnter: function mouseEnter() {\n      if (this.reduce) this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', false);\n      this.isMouseEnter = true;\n    },\n    mouseLeave: function mouseLeave() {\n      if (this.reduce) this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', true);\n      this.isMouseEnter = false;\n    },\n    setVerticalNavMenuWidth: function setVerticalNavMenuWidth() {\n      /* if (this.windowWidth > 1200) {\n        if (this.layoutType === 'vertical') {\n          // Set reduce\n          this.reduce = !!this.reduceButton;\n           // Open NavMenu\n          this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false);\n           // Set Menu Items Only Icon Mode\n          const verticalNavMenuItemsMin = !!(\n            this.reduceButton && !this.isMouseEnter\n          );\n          this.$store.commit(\n            'UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN',\n            verticalNavMenuItemsMin\n          );\n           // Menu Action buttons\n          this.clickNotClose = true;\n          this.showCloseButton = false;\n           const verticalNavMenuWidth = this.isVerticalNavMenuReduced\n            ? 'reduced'\n            : 'default';\n          this.$store.dispatch(\n            'updateVerticalNavMenuWidth',\n            verticalNavMenuWidth\n          );\n           return;\n        }\n      }\n       // Close NavMenu\n      this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false);\n       // Reduce button\n      if (this.reduceButton) this.reduce = false;\n       // Menu Action buttons\n      this.showCloseButton = true;\n      this.clickNotClose = false;\n       // Update NavMenu Width\n      this.$store.dispatch('updateVerticalNavMenuWidth', 'no-nav-menu');\n       // Remove Only Icon in Menu\n      this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', false);\n       // if(this.layoutType === 'vertical' || (this.layoutType === 'horizontal' && this.windowWidth < 1200))\n      // if (this.windowWidth < 1200) {\n       // Close NavMenu\n      // this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false)\n       // Reduce button\n      // (this.reduceButton) this.reduce = false\n       // Menu Action buttons\n      // this.showCloseButton = true\n      // this.clickNotClose   = false\n       // Update NavMenu Width\n      // this.$store.dispatch('updateVerticalNavMenuWidth', 'no-nav-menu')\n       // Remove Only Icon in Menu\n      // this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', false)\n       // } else {\n       //   // Set reduce\n      //   this.reduce = this.reduceButton ? true : false\n       //   // Open NavMenu\n      //   this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', true)\n       //   // Set Menu Items Only Icon Mode\n      //   const verticalNavMenuItemsMin = (this.reduceButton && !this.isMouseEnter) ? true : false\n      //   this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', verticalNavMenuItemsMin)\n       //   // Menu Action buttons\n      //   this.clickNotClose   = true\n      //   this.showCloseButton = false\n       //   const verticalNavMenuWidth   = this.isVerticalNavMenuReduced ? \"reduced\" : \"default\"\n      //   this.$store.dispatch('updateVerticalNavMenuWidth', verticalNavMenuWidth)\n      // } */\n    },\n    toggleReduce: function toggleReduce(val) {\n      this.reduceButton = val;\n      this.setVerticalNavMenuWidth();\n    }\n  },\n  mounted: function mounted() {\n    this.setVerticalNavMenuWidth();\n  }\n};",{"version":3,"sources":["VerticalNavMenu.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- =========================================================================================\n  File Name: VerticalNavMenu.vue\n  Description: Vertical NavMenu Component\n  Component Name: VerticalNavMenu\n  ----------------------------------------------------------------------------------------\n  Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\n    Author: Pixinvent\n  Author URL: http://www.themeforest.net/user/pixinvent\n========================================================================================== -->\n\n<template>\n  <div class=\"parentx\">\n    <vs-sidebar\n      class=\"v-nav-menu items-no-padding\"\n      v-model=\"isVerticalNavMenuActive\"\n      ref=\"verticalNavMenu1\"\n      default-index=\"-1\"\n      :click-not-close=\"clickNotClose\"\n      :reduce-not-rebound=\"reduceNotRebound\"\n      :parent=\"parent\"\n      :hiddenBackground=\"clickNotClose\"\n      :reduce=\"reduce\"\n      v-hammer:swipe=\"onMenuSwipe\"\n    >\n      <div @mouseenter=\"mouseEnter\" @mouseleave=\"mouseLeave\">\n        <!-- Header -->\n        <div\n          class=\"header-sidebar flex items-end justify-between\"\n          slot=\"header\"\n        >\n          <!-- Logo -->\n          <router-link\n            tag=\"div\"\n            class=\"vx-logo cursor-pointer flex items-center\"\n            to=\"/\"\n          >\n            <!--logo class=\"w-10 mr-4 fill-current text-primary\" /-->\n            <img\n              src=\"@/assets/images/logo/logo.svg\"\n              class=\"mr-4 text-primary h-12\"\n            />\n            <span\n              class=\"vx-logo-text text-custom-purple\"\n              v-show=\"isMouseEnter || !reduce\"\n              v-if=\"title\"\n              >{{ title }}</span\n            >\n          </router-link>\n          <!-- /Logo -->\n\n          <!-- Menu Buttons -->\n          <div>\n            <!-- Close Button -->\n            <template>\n              <feather-icon\n                icon=\"XIcon\"\n                class=\"m-0 cursor-pointer\"\n                @click=\"\n                  $store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false)\n                \"\n              />\n            </template>\n\n            <!-- Toggle Buttons -->\n            <!--template v-else-if=\"!showCloseButton && !verticalNavMenuItemsMin\">\n              <feather-icon\n                id=\"btnVNavMenuMinToggler\"\n                class=\"mr-0 cursor-pointer\"\n                :icon=\"reduce ? 'CircleIcon' : 'DiscIcon'\"\n                svg-classes=\"stroke-current text-primary\"\n                @click=\"toggleReduce(!reduce)\"\n              />\n            </template-->\n          </div>\n          <!-- /Menu Toggle Buttons -->\n        </div>\n        <!-- /Header -->\n\n        <!-- Header Shadow -->\n        <div class=\"shadow-bottom\" v-show=\"showShadowBottom\" />\n\n        <!-- Menu Items -->\n        <component\n          :is=\"scrollbarTag\"\n          ref=\"verticalNavMenuPs\"\n          class=\"scroll-area-v-nav-menu pt-2\"\n          :settings=\"settings\"\n          @ps-scroll-y=\"psSectionScroll\"\n          @scroll=\"psSectionScroll\"\n          :key=\"$vs.rtl\"\n        >\n          <template v-for=\"(item, index) in menuItemsUpdated\">\n            <!-- Group Header -->\n            <span\n              v-if=\"item.header && !verticalNavMenuItemsMin\"\n              class=\"navigation-header truncate\"\n              :key=\"`header-${index}`\"\n            >\n              {{ item.header }}\n            </span>\n            <!-- /Group Header -->\n\n            <template v-else-if=\"!item.header\">\n              <!-- Nav-Item -->\n              <v-nav-menu-item\n                v-if=\"!item.submenu\"\n                :key=\"`item-${index}`\"\n                :index=\"index\"\n                :to=\"item.slug !== 'external' ? item.url : null\"\n                :href=\"item.slug === 'external' ? item.url : null\"\n                :icon=\"item.icon\"\n                :target=\"item.target\"\n                :isDisabled=\"item.isDisabled\"\n                :slug=\"item.slug\"\n              >\n                <span v-show=\"!verticalNavMenuItemsMin\" class=\"truncate\">{{\n                  item.name\n                }}</span>\n                <vs-chip\n                  class=\"ml-auto\"\n                  :color=\"item.tagColor\"\n                  v-if=\"item.tag && (isMouseEnter || !reduce)\"\n                  >{{ item.tag }}</vs-chip\n                >\n              </v-nav-menu-item>\n\n              <!-- Nav-Group -->\n              <template v-else>\n                <v-nav-menu-group\n                  :key=\"`group-${index}`\"\n                  :openHover=\"openGroupHover\"\n                  :group=\"item\"\n                  :groupIndex=\"index\"\n                  :open=\"isGroupActive(item)\"\n                />\n              </template>\n              <!-- /Nav-Group -->\n            </template>\n          </template>\n        </component>\n        <!-- /Menu Items -->\n      </div>\n    </vs-sidebar>\n\n    <!-- Swipe Gesture -->\n    <div\n      v-if=\"!isVerticalNavMenuActive\"\n      class=\"v-nav-menu-swipe-area\"\n      v-hammer:swipe=\"onSwipeAreaSwipe\"\n    />\n    <!-- /Swipe Gesture -->\n  </div>\n</template>\n\n<script>\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar';\nimport VNavMenuGroup from './VerticalNavMenuGroup.vue';\nimport VNavMenuItem from './VerticalNavMenuItem.vue';\n\nimport Logo from '../Logo.vue';\n\nexport default {\n  name: 'v-nav-menu',\n  components: {\n    VNavMenuGroup,\n    VNavMenuItem,\n    VuePerfectScrollbar,\n    Logo\n  },\n  props: {\n    logo: { type: String },\n    openGroupHover: { type: Boolean, default: false },\n    parent: { type: String },\n    reduceNotRebound: { type: Boolean, default: true },\n    navMenuItems: { type: Array, required: true },\n    title: { type: String }\n  },\n  data: () => ({\n    clickNotClose: false, // disable close navMenu on outside click\n    isMouseEnter: false,\n    reduce: false, // determines if navMenu is reduce - component property\n    showCloseButton: true, // show close button in smaller devices\n    settings: {\n      // perfectScrollbar settings\n      maxScrollbarLength: 60,\n      wheelSpeed: 1,\n      swipeEasing: true\n    },\n    showShadowBottom: false\n  }),\n  computed: {\n    isGroupActive() {\n      return item => {\n        const path = this.$route.fullPath;\n        const routeParent = this.$route.meta\n          ? this.$route.meta.parent\n          : undefined;\n        let open = false;\n\n        const func = item => {\n          if (item.submenu) {\n            item.submenu.forEach(item => {\n              if (\n                item.url &&\n                (path === item.url || routeParent === item.slug)\n              ) {\n                open = true;\n              } else if (item.submenu) {\n                func(item);\n              }\n            });\n          }\n        };\n        func(item);\n        return open;\n      };\n    },\n    menuItemsUpdated() {\n      const clone = this.navMenuItems.slice();\n\n      for (const [index, item] of this.navMenuItems.entries()) {\n        if (item.header && item.items.length && (index || 1)) {\n          const i = clone.findIndex(ix => ix.header === item.header);\n          for (const [subIndex, subItem] of item.items.entries()) {\n            clone.splice(i + 1 + subIndex, 0, subItem);\n          }\n        }\n      }\n\n      return clone;\n    },\n    isVerticalNavMenuActive: {\n      get() {\n        return this.$store.state.isVerticalNavMenuActive;\n      },\n      set(val) {\n        this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', val);\n      }\n    },\n    layoutType() {\n      return this.$store.state.mainLayoutType;\n    },\n    reduceButton: {\n      get() {\n        return this.$store.state.reduceButton;\n      },\n      set(val) {\n        this.$store.commit('TOGGLE_REDUCE_BUTTON', val);\n      }\n    },\n    isVerticalNavMenuReduced() {\n      return Boolean(this.reduce && this.reduceButton);\n    },\n    verticalNavMenuItemsMin() {\n      return this.$store.state.verticalNavMenuItemsMin;\n    },\n    scrollbarTag() {\n      return this.$store.getters.scrollbarTag;\n    },\n    windowWidth() {\n      return this.$store.state.windowWidth;\n    }\n  },\n  watch: {\n    $route() {\n      if (this.isVerticalNavMenuActive && this.showCloseButton)\n        this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false);\n    },\n    reduce(val) {\n      const verticalNavMenuWidth = val\n        ? 'reduced'\n        : this.$store.state.windowWidth < 1200\n        ? 'no-nav-menu'\n        : 'default';\n      this.$store.dispatch('updateVerticalNavMenuWidth', verticalNavMenuWidth);\n\n      setTimeout(function() {\n        window.dispatchEvent(new Event('resize'));\n      }, 100);\n    },\n    layoutType() {\n      this.setVerticalNavMenuWidth();\n    },\n    reduceButton() {\n      this.setVerticalNavMenuWidth();\n    },\n    windowWidth() {\n      this.setVerticalNavMenuWidth();\n    }\n  },\n  methods: {\n    onMenuSwipe(event) {\n      // Swipe Right\n      if (event.direction === 4 && this.$vs.rtl) {\n        if (this.isVerticalNavMenuActive && this.showCloseButton)\n          this.isVerticalNavMenuActive = false;\n      }\n      // Swipe Left\n      else if (event.direction === 2 && !this.$vs.rtl) {\n        if (this.isVerticalNavMenuActive && this.showCloseButton)\n          this.isVerticalNavMenuActive = false;\n      }\n    },\n    onSwipeAreaSwipe(event) {\n      // Swipe Right\n      if (event.direction === 4 && !this.$vs.rtl) {\n        if (!this.isVerticalNavMenuActive && this.showCloseButton)\n          this.isVerticalNavMenuActive = true;\n      }\n      // Swipe Left\n      else if (event.direction === 2 && this.$vs.rtl) {\n        if (!this.isVerticalNavMenuActive && this.showCloseButton)\n          this.isVerticalNavMenuActive = true;\n      }\n    },\n    psSectionScroll() {\n      const scroll_el =\n        this.$refs.verticalNavMenuPs.$el || this.$refs.verticalNavMenuPs;\n      this.showShadowBottom = scroll_el.scrollTop > 0;\n    },\n    mouseEnter() {\n      if (this.reduce)\n        this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', false);\n      this.isMouseEnter = true;\n    },\n    mouseLeave() {\n      if (this.reduce)\n        this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', true);\n      this.isMouseEnter = false;\n    },\n    setVerticalNavMenuWidth() {\n      /* if (this.windowWidth > 1200) {\n        if (this.layoutType === 'vertical') {\n          // Set reduce\n          this.reduce = !!this.reduceButton;\n\n          // Open NavMenu\n          this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false);\n\n          // Set Menu Items Only Icon Mode\n          const verticalNavMenuItemsMin = !!(\n            this.reduceButton && !this.isMouseEnter\n          );\n          this.$store.commit(\n            'UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN',\n            verticalNavMenuItemsMin\n          );\n\n          // Menu Action buttons\n          this.clickNotClose = true;\n          this.showCloseButton = false;\n\n          const verticalNavMenuWidth = this.isVerticalNavMenuReduced\n            ? 'reduced'\n            : 'default';\n          this.$store.dispatch(\n            'updateVerticalNavMenuWidth',\n            verticalNavMenuWidth\n          );\n\n          return;\n        }\n      }\n\n      // Close NavMenu\n      this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false);\n\n      // Reduce button\n      if (this.reduceButton) this.reduce = false;\n\n      // Menu Action buttons\n      this.showCloseButton = true;\n      this.clickNotClose = false;\n\n      // Update NavMenu Width\n      this.$store.dispatch('updateVerticalNavMenuWidth', 'no-nav-menu');\n\n      // Remove Only Icon in Menu\n      this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', false);\n\n      // if(this.layoutType === 'vertical' || (this.layoutType === 'horizontal' && this.windowWidth < 1200))\n      // if (this.windowWidth < 1200) {\n\n      // Close NavMenu\n      // this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false)\n\n      // Reduce button\n      // (this.reduceButton) this.reduce = false\n\n      // Menu Action buttons\n      // this.showCloseButton = true\n      // this.clickNotClose   = false\n\n      // Update NavMenu Width\n      // this.$store.dispatch('updateVerticalNavMenuWidth', 'no-nav-menu')\n\n      // Remove Only Icon in Menu\n      // this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', false)\n\n      // } else {\n\n      //   // Set reduce\n      //   this.reduce = this.reduceButton ? true : false\n\n      //   // Open NavMenu\n      //   this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', true)\n\n      //   // Set Menu Items Only Icon Mode\n      //   const verticalNavMenuItemsMin = (this.reduceButton && !this.isMouseEnter) ? true : false\n      //   this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', verticalNavMenuItemsMin)\n\n      //   // Menu Action buttons\n      //   this.clickNotClose   = true\n      //   this.showCloseButton = false\n\n      //   const verticalNavMenuWidth   = this.isVerticalNavMenuReduced ? \"reduced\" : \"default\"\n      //   this.$store.dispatch('updateVerticalNavMenuWidth', verticalNavMenuWidth)\n      // } */\n    },\n    toggleReduce(val) {\n      this.reduceButton = val;\n      this.setVerticalNavMenuWidth();\n    }\n  },\n  mounted() {\n    this.setVerticalNavMenuWidth();\n  }\n};\n</script>\n\n<style lang=\"scss\">\n@import '@/assets/scss/vuexy/components/verticalNavMenu.scss';\n</style>\n"],"sourceRoot":"src/layouts/components/vertical-nav-menu"}]}